import mongoose from 'mongoose';

// Bi·∫øn l∆∞u tr·ªØ k·∫øt n·ªëi to√†n c·ª•c
let cachedConnection = {
  client: null,
  mongoosePromise: null,
  isConnecting: false,
  connectionsCounter: 0,
  lastReconnectAttempt: 0
};

// C·ªù ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ log m·ªôt l·∫ßn
let connectionLoggedOnce = false;

// ƒê·ªãnh c·∫•u h√¨nh v√† h·∫±ng s·ªë
const RECONNECT_COOLDOWN = 5000; // 5 gi√¢y gi·ªØa c√°c l·∫ßn t√°i k·∫øt n·ªëi
const MONGODB_OPTIONS = {
  maxPoolSize: 50,       // TƒÉng s·ªë l∆∞·ª£ng k·∫øt n·ªëi t·ªëi ƒëa 
  minPoolSize: 10,       // TƒÉng s·ªë l∆∞·ª£ng k·∫øt n·ªëi t·ªëi thi·ªÉu ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n c√≥ s·∫µn
  socketTimeoutMS: 60000, // TƒÉng th·ªùi gian timeout socket
  connectTimeoutMS: 30000, // TƒÉng timeout k·∫øt n·ªëi
  serverSelectionTimeoutMS: 30000, // TƒÉng th·ªùi gian ch·ªçn server
  heartbeatFrequencyMS: 10000, // TƒÉng t·∫ßn su·∫•t heartbeat
  retryWrites: true,
  w: 'majority'
};

// Ki·ªÉm tra URI MongoDB v√† ghi log c·∫£nh b√°o thay v√¨ b√°o l·ªói
if (!process.env.MONGODB_URI) {
  console.warn('C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y MONGODB_URI trong bi·∫øn m√¥i tr∆∞·ªùng, ·ª©ng d·ª•ng s·∫Ω ch·∫°y ·ªü ch·∫ø ƒë·ªô demo');
}

/**
 * K·∫øt n·ªëi ƒë·∫øn MongoDB v√† tr·∫£ v·ªÅ client ƒë√£ ƒë∆∞·ª£c cache
 * @returns {Promise<import('mongodb').MongoClient>} MongoDB client
 */
export const getMongoClient = async () => {
  const { MongoClient } = await import('mongodb');

  // Tr·∫£ v·ªÅ ngay n·∫øu client ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ho·∫°t ƒë·ªông
  if (cachedConnection.client) {
    cachedConnection.connectionsCounter++;
    // Ch·ªâ log khi ƒëang ·ªü development v√† s·ªë l·∫ßn g·ªçi chia h·∫øt cho 10
    if (process.env.NODE_ENV === 'development' && cachedConnection.connectionsCounter % 10 === 0) {
      console.log(`‚úÖ S·ª≠ d·ª•ng k·∫øt n·ªëi MongoDB ƒë√£ cache (l·∫ßn ${cachedConnection.connectionsCounter})`);
    }
    return cachedConnection.client;
  }

  // N·∫øu ƒëang trong qu√° tr√¨nh k·∫øt n·ªëi, ƒë·ª£i ƒë·∫øn khi ho√†n th√†nh
  if (cachedConnection.isConnecting) {
    // Log khi b·∫Øt ƒë·∫ßu ƒë·ª£i
    console.log('‚è≥ ƒêang ƒë·ª£i k·∫øt n·ªëi MongoDB hi·ªán t·∫°i ho√†n th√†nh...');
    
    // ƒê·∫∑t timeout ƒë·ªÉ kh√¥ng ƒë·ª£i v√¥ h·∫°n
    const waitTimeout = setTimeout(() => {
      cachedConnection.isConnecting = false; // Reset tr·∫°ng th√°i n·∫øu ƒë·ª£i qu√° l√¢u
      console.warn('‚ö†Ô∏è ƒê√£ h·ªßy ƒë·ª£i k·∫øt n·ªëi MongoDB sau 10 gi√¢y');
    }, 10000);
    
    while (cachedConnection.isConnecting) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    clearTimeout(waitTimeout); // X√≥a timeout n·∫øu kh√¥ng c·∫ßn n·ªØa
    
    if (cachedConnection.client) {
      return cachedConnection.client;
    }
  }

  // Ki·ªÉm tra th·ªùi gian t√°i k·∫øt n·ªëi
  const now = Date.now();
  if (now - cachedConnection.lastReconnectAttempt < RECONNECT_COOLDOWN) {
    console.log('‚è≥ ƒê·ª£i th√™m tr∆∞·ªõc khi th·ª≠ k·∫øt n·ªëi l·∫°i MongoDB...');
    await new Promise(resolve => setTimeout(resolve, RECONNECT_COOLDOWN));
  }
  cachedConnection.lastReconnectAttempt = now;

  // Kh·ªüi t·∫°o qu√° tr√¨nh k·∫øt n·ªëi m·ªõi
  try {
    cachedConnection.isConnecting = true;
    const uri = process.env.MONGODB_URI;
    
    if (!uri) {
      throw new Error('MONGODB_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    // Log m·ªôt l·∫ßn duy nh·∫•t cho m·ªói l·∫ßn kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
    console.log('üîÑ ƒêang kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB m·ªõi...');

    // T·∫°o client v·ªõi c√°c th√¥ng s·ªë t·ªëi ∆∞u
    const client = new MongoClient(uri, MONGODB_OPTIONS);

    // K·∫øt n·ªëi v√† l∆∞u v√†o cache
    await client.connect();
    
    // L∆∞u client v√†o cache to√†n c·ª•c
    cachedConnection.client = client;
    cachedConnection.connectionsCounter = 1;

    // Thi·∫øt l·∫≠p x·ª≠ l√Ω khi ·ª©ng d·ª•ng t·∫Øt
    setupGracefulShutdown(client);

    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng v√† ƒë∆∞·ª£c cache');
    return client;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error.message);
    cachedConnection.isConnecting = false;
    throw error;
  } finally {
    cachedConnection.isConnecting = false;
  }
};

/**
 * Thi·∫øt l·∫≠p x·ª≠ l√Ω ƒë√≥ng k·∫øt n·ªëi khi ·ª©ng d·ª•ng t·∫Øt
 * @param {import('mongodb').MongoClient} client - MongoDB client
 */
function setupGracefulShutdown(client) {
  // Ki·ªÉm tra n·∫øu ƒë√£ thi·∫øt l·∫≠p s·ª± ki·ªán
  if (process._mongoShutdownHandlerAdded) return;
  process._mongoShutdownHandlerAdded = true;
  
  const shutdown = async () => {
    try {
      console.log('üîÑ ƒê√≥ng k·∫øt n·ªëi MongoDB khi t·∫Øt ·ª©ng d·ª•ng...');
      
      // ƒê√≥ng k·∫øt n·ªëi MongoDB n·∫øu t·ªìn t·∫°i
      if (cachedConnection.client) {
        await cachedConnection.client.close();
        cachedConnection.client = null;
      }
      
      // ƒê√≥ng k·∫øt n·ªëi Mongoose n·∫øu ƒëang k·∫øt n·ªëi
      if (mongoose.connection.readyState === 1) {
        await mongoose.connection.close();
      }
      
      console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB th√†nh c√¥ng');
      process.exit(0);
    } catch (err) {
      console.error('‚ùå L·ªói khi ƒë√≥ng k·∫øt n·ªëi MongoDB:', err);
      process.exit(1);
    }
  };

  // ƒêƒÉng k√Ω c√°c s·ª± ki·ªán t·∫Øt ·ª©ng d·ª•ng
  process.on('SIGINT', shutdown);
  process.on('SIGTERM', shutdown);
  process.on('exit', shutdown);
}

/**
 * K·∫øt n·ªëi ƒë·∫øn MongoDB s·ª≠ d·ª•ng Mongoose v√† tr·∫£ v·ªÅ k·∫øt n·ªëi
 */
export const connectDB = async () => {
  // Ki·ªÉm tra n·∫øu Mongoose ƒë√£ k·∫øt n·ªëi
  if (mongoose.connection.readyState === 1) {
    cachedConnection.connectionsCounter++;
    // Ch·ªâ log khi ƒëang ·ªü development v√† s·ªë l·∫ßn g·ªçi chia h·∫øt cho 10
    if (process.env.NODE_ENV === 'development' && cachedConnection.connectionsCounter % 10 === 0) {
      console.log(`‚úÖ S·ª≠ d·ª•ng k·∫øt n·ªëi Mongoose ƒë√£ cache (l·∫ßn ${cachedConnection.connectionsCounter})`);
    }
    return mongoose.connection;
  }

  // N·∫øu ƒëang k·∫øt n·ªëi, ƒë·ª£i ƒë·∫øn khi ho√†n th√†nh
  if (cachedConnection.isConnecting) {
    console.log('‚è≥ ƒêang ƒë·ª£i k·∫øt n·ªëi Mongoose hi·ªán t·∫°i ho√†n th√†nh...');
    
    // ƒê·∫∑t timeout ƒë·ªÉ kh√¥ng ƒë·ª£i v√¥ h·∫°n
    const waitTimeout = setTimeout(() => {
      cachedConnection.isConnecting = false; // Reset tr·∫°ng th√°i n·∫øu ƒë·ª£i qu√° l√¢u
      console.warn('‚ö†Ô∏è ƒê√£ h·ªßy ƒë·ª£i k·∫øt n·ªëi Mongoose sau 10 gi√¢y');
    }, 10000);
    
    while (cachedConnection.isConnecting) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    clearTimeout(waitTimeout); // X√≥a timeout n·∫øu kh√¥ng c·∫ßn n·ªØa
    
    if (mongoose.connection.readyState === 1) {
      return mongoose.connection;
    }
  }

  // B·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi m·ªõi
  try {
    cachedConnection.isConnecting = true;
    
    // L·∫•y URI t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const uri = process.env.MONGODB_URI;
    if (!uri) {
      throw new Error('MONGODB_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    console.log('üîÑ Kh·ªüi t·∫°o k·∫øt n·ªëi Mongoose m·ªõi...');
    
    // Thi·∫øt l·∫≠p c·∫•u h√¨nh Mongoose to√†n c·ª•c
    mongoose.set('strictQuery', false);
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán
    setupMongooseEventHandlers();
    
    // T·∫°o Promise k·∫øt n·ªëi v·ªõi c√°c t√πy ch·ªçn t·ªëi ∆∞u
    cachedConnection.mongoosePromise = mongoose.connect(uri, {
      bufferCommands: false,
      ...MONGODB_OPTIONS
    });
    
    // ƒê·ª£i k·∫øt n·ªëi ho√†n t·∫•t
    await cachedConnection.mongoosePromise;
    cachedConnection.connectionsCounter++;
    
    console.log('‚úÖ K·∫øt n·ªëi Mongoose th√†nh c√¥ng');
    return mongoose.connection;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi Mongoose:', error.message);
    cachedConnection.mongoosePromise = null;
    throw error;
  } finally {
    cachedConnection.isConnecting = false;
  }
};

/**
 * Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán cho k·∫øt n·ªëi Mongoose
 */
function setupMongooseEventHandlers() {
  // Ch·ªâ thi·∫øt l·∫≠p m·ªôt l·∫ßn
  if (mongoose.connection._hasSetupEvents) return;
  mongoose.connection._hasSetupEvents = true;
  
  // B·∫Øt s·ª± ki·ªán k·∫øt n·ªëi th√†nh c√¥ng
  mongoose.connection.on('connected', () => {
    console.log('‚úÖ Mongoose ƒë√£ k·∫øt n·ªëi v·ªõi MongoDB');
  });
  
  // B·∫Øt s·ª± ki·ªán ng·∫Øt k·∫øt n·ªëi v√† t·ª± ƒë·ªông th·ª≠ k·∫øt n·ªëi l·∫°i
  mongoose.connection.on('disconnected', () => {
    console.log('‚ùå Mongoose ƒë√£ ng·∫Øt k·∫øt n·ªëi t·ª´ MongoDB');
    
    // Reset ƒë·ªÉ l·∫ßn sau s·∫Ω t·∫°o k·∫øt n·ªëi m·ªõi
    cachedConnection.mongoosePromise = null;
    connectionLoggedOnce = false;
    
    // Th·ª≠ k·∫øt n·ªëi l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
    setTimeout(async () => {
      try {
        if (mongoose.connection.readyState !== 1) {
          console.log('üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i Mongoose...');
          await connectDB();
        }
      } catch (reconnectError) {
        console.error('‚ùå Kh√¥ng th·ªÉ t√°i k·∫øt n·ªëi Mongoose:', reconnectError.message);
      }
    }, RECONNECT_COOLDOWN);
  });
  
  // B·∫Øt s·ª± ki·ªán l·ªói ƒë·ªÉ tr√°nh crash ·ª©ng d·ª•ng
  mongoose.connection.on('error', (err) => {
    console.error('‚ùå L·ªói k·∫øt n·ªëi Mongoose:', err.message);
  });
}

// H√†m ƒë·ªÉ l·∫•y s·ªë l∆∞·ª£ng k·∫øt n·ªëi hi·ªán t·∫°i (debug)
export const getConnectionStats = async () => {
  try {
    // Th√¥ng tin c∆° b·∫£n
    return {
      // Tr·∫°ng th√°i k·∫øt n·ªëi mongoose (0: ƒëang ng·∫Øt k·∫øt n·ªëi, 1: ƒë√£ k·∫øt n·ªëi, 2: ƒëang k·∫øt n·ªëi, 3: ƒëang ng·∫Øt k·∫øt n·ªëi)
      mongooseState: mongoose.connection.readyState,
      mongooseStateText: ['disconnected', 'connected', 'connecting', 'disconnecting'][mongoose.connection.readyState],
      
      // Th√¥ng tin t·ª´ b·ªô ƒë·∫øm n·ªôi b·ªô
      cachedConnectionCounter: cachedConnection.connectionsCounter,
      
      // C√≥ k·∫øt n·ªëi MongoDB Client kh√¥ng
      hasMongoClient: cachedConnection.client !== null,
      
      // C√≥ Promise k·∫øt n·ªëi Mongoose kh√¥ng
      hasMongoosePromise: cachedConnection.mongoosePromise !== null,
      
      // ƒêang trong qu√° tr√¨nh k·∫øt n·ªëi kh√¥ng
      isConnecting: cachedConnection.isConnecting,
      
      // Th·ªùi gian ki·ªÉm tra
      checkedAt: new Date().toISOString(),
      
      // Th·ªùi gian k·ªÉ t·ª´ l·∫ßn t√°i k·∫øt n·ªëi cu·ªëi
      timeSinceLastReconnect: Date.now() - cachedConnection.lastReconnectAttempt
    };
  } catch (error) {
    return { error: error.message };
  }
};

// Ph∆∞∆°ng th·ª©c t∆∞∆°ng th√≠ch ng∆∞·ª£c
export const connectToDatabase = async () => {
  return await getMongoClient();
};

// Export client promise theo c√°ch c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi m√£ hi·ªán t·∫°i
const clientPromise = getMongoClient();
export default clientPromise; 