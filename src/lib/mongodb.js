import mongoose from 'mongoose';

// Bi·∫øn l∆∞u tr·ªØ k·∫øt n·ªëi to√†n c·ª•c
let cachedConnection = {
  client: null,
  mongoosePromise: null,
  isConnecting: false,
  connectionsCounter: 0
};

// C·ªù ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ log m·ªôt l·∫ßn
let connectionLoggedOnce = false;

// Ki·ªÉm tra URI MongoDB v√† ghi log c·∫£nh b√°o thay v√¨ b√°o l·ªói
if (!process.env.MONGODB_URI) {
  console.warn('C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y MONGODB_URI trong bi·∫øn m√¥i tr∆∞·ªùng, ·ª©ng d·ª•ng s·∫Ω ch·∫°y ·ªü ch·∫ø ƒë·ªô demo');
}

/**
 * K·∫øt n·ªëi ƒë·∫øn MongoDB v√† tr·∫£ v·ªÅ client ƒë√£ ƒë∆∞·ª£c cache
 * @returns {Promise<import('mongodb').MongoClient>} MongoDB client
 */
export const getMongoClient = async () => {
  const { MongoClient } = await import('mongodb');

  // Tr·∫£ v·ªÅ ngay n·∫øu client ƒë√£ ƒë∆∞·ª£c t·∫°o
  if (cachedConnection.client) {
    cachedConnection.connectionsCounter++;
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ S·ª≠ d·ª•ng k·∫øt n·ªëi MongoDB ƒë√£ cache (l·∫ßn ${cachedConnection.connectionsCounter})`);
    }
    return cachedConnection.client;
  }

  // N·∫øu ƒëang trong qu√° tr√¨nh k·∫øt n·ªëi, ƒë·ª£i ƒë·∫øn khi ho√†n th√†nh
  if (cachedConnection.isConnecting) {
    while (cachedConnection.isConnecting) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    return cachedConnection.client;
  }

  // Kh·ªüi t·∫°o qu√° tr√¨nh k·∫øt n·ªëi m·ªõi
  try {
    cachedConnection.isConnecting = true;
    const uri = process.env.MONGODB_URI;
    
    if (!uri) {
      throw new Error('MONGODB_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    // Log m·ªôt l·∫ßn duy nh·∫•t
    if (!connectionLoggedOnce && process.env.NODE_ENV === 'development') {
      console.log('üîÑ ƒêang kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB m·ªõi...');
      connectionLoggedOnce = true;
    }

    // T·∫°o client v·ªõi c√°c th√¥ng s·ªë t·ªëi ∆∞u
    const client = new MongoClient(uri, {
      maxPoolSize: 10, // ƒêi·ªÅu ch·ªânh theo nhu c·∫ßu th·ª±c t·∫ø
      minPoolSize: 3,  // Duy tr√¨ √≠t nh·∫•t 3 k·∫øt n·ªëi
      maxIdleTimeMS: 60000, // ƒê√≥ng k·∫øt n·ªëi n·∫øu kh√¥ng s·ª≠ d·ª•ng sau 60s
      connectTimeoutMS: 10000,
      socketTimeoutMS: 45000,
      retryWrites: true,
      w: 'majority'
    });

    // K·∫øt n·ªëi v√† l∆∞u v√†o cache
    await client.connect();
    
    // L∆∞u client v√†o cache to√†n c·ª•c
    cachedConnection.client = client;
    cachedConnection.connectionsCounter = 1;

    // Thi·∫øt l·∫≠p x·ª≠ l√Ω khi ·ª©ng d·ª•ng t·∫Øt
    process.on('SIGINT', async () => {
      try {
        if (cachedConnection.client) {
          console.log('ƒê√≥ng k·∫øt n·ªëi MongoDB khi t·∫Øt ·ª©ng d·ª•ng');
          await cachedConnection.client.close();
          cachedConnection.client = null;
        }
      } catch (err) {
        console.error('L·ªói khi ƒë√≥ng k·∫øt n·ªëi MongoDB:', err);
      }
    });

    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng v√† ƒë∆∞·ª£c cache');
    return client;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error.message);
    cachedConnection.isConnecting = false;
    throw error;
  } finally {
    cachedConnection.isConnecting = false;
  }
};

/**
 * K·∫øt n·ªëi ƒë·∫øn MongoDB s·ª≠ d·ª•ng Mongoose v√† tr·∫£ v·ªÅ k·∫øt n·ªëi
 */
export const connectDB = async () => {
  // Tr·∫£ v·ªÅ ngay n·∫øu Mongoose ƒë√£ k·∫øt n·ªëi
  if (mongoose.connection.readyState === 1) {
    cachedConnection.connectionsCounter++;
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ S·ª≠ d·ª•ng k·∫øt n·ªëi Mongoose ƒë√£ cache (l·∫ßn ${cachedConnection.connectionsCounter})`);
    }
    return;
  }

  // N·∫øu ƒëang k·∫øt n·ªëi, ƒë·ª£i ƒë·∫øn khi ho√†n th√†nh
  if (cachedConnection.isConnecting) {
    while (cachedConnection.isConnecting) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    return;
  }

  // B·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi m·ªõi
  try {
    cachedConnection.isConnecting = true;
    
    // L·∫•y URI t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const uri = process.env.MONGODB_URI;
    if (!uri) {
      throw new Error('MONGODB_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    // T·∫°o Promise k·∫øt n·ªëi
    if (!cachedConnection.mongoosePromise) {
      if (process.env.NODE_ENV === 'development') {
        console.log('üîÑ Kh·ªüi t·∫°o k·∫øt n·ªëi Mongoose m·ªõi...');
      }
      
      // Thi·∫øt l·∫≠p c√°c t√πy ch·ªçn k·∫øt n·ªëi t·ªëi ∆∞u
      cachedConnection.mongoosePromise = mongoose.connect(uri, {
        bufferCommands: false,
        maxPoolSize: 10,
        minPoolSize: 3,
        socketTimeoutMS: 45000,
        connectTimeoutMS: 10000,
        serverSelectionTimeoutMS: 10000
      });
    }
    
    // ƒê·ª£i k·∫øt n·ªëi ho√†n t·∫•t
    await cachedConnection.mongoosePromise;
    cachedConnection.connectionsCounter++;
    
    if (process.env.NODE_ENV === 'development' && !connectionLoggedOnce) {
      console.log('‚úÖ K·∫øt n·ªëi Mongoose th√†nh c√¥ng');
      connectionLoggedOnce = true;
    }
    
    return;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi Mongoose:', error.message);
    cachedConnection.mongoosePromise = null;
    throw error;
  } finally {
    cachedConnection.isConnecting = false;
  }
};

// B·∫Øt s·ª± ki·ªán k·∫øt n·ªëi th√†nh c√¥ng
mongoose.connection.on('connected', () => {
  if (process.env.NODE_ENV === 'development') {
    console.log('‚úÖ Mongoose ƒë√£ k·∫øt n·ªëi v·ªõi MongoDB');
  }
});

// B·∫Øt s·ª± ki·ªán ng·∫Øt k·∫øt n·ªëi v√† reset cache
mongoose.connection.on('disconnected', () => {
  if (process.env.NODE_ENV === 'development') {
    console.log('‚ùå Mongoose ƒë√£ ng·∫Øt k·∫øt n·ªëi t·ª´ MongoDB');
  }
  connectionLoggedOnce = false;
});

// B·∫Øt s·ª± ki·ªán l·ªói ƒë·ªÉ tr√°nh crash ·ª©ng d·ª•ng
mongoose.connection.on('error', (err) => {
  console.error('‚ùå L·ªói k·∫øt n·ªëi Mongoose:', err);
  connectionLoggedOnce = false;
});

// H√†m ƒë·ªÉ l·∫•y s·ªë l∆∞·ª£ng k·∫øt n·ªëi hi·ªán t·∫°i (debug)
export const getConnectionStats = async () => {
  try {
    // Th√¥ng tin c∆° b·∫£n m√† kh√¥ng c·∫ßn quy·ªÅn admin
    return {
      // Tr·∫°ng th√°i k·∫øt n·ªëi mongoose (0: ƒëang ng·∫Øt k·∫øt n·ªëi, 1: ƒë√£ k·∫øt n·ªëi, 2: ƒëang k·∫øt n·ªëi, 3: ƒëang ng·∫Øt k·∫øt n·ªëi)
      mongooseState: mongoose.connection.readyState,
      mongooseStateText: ['disconnected', 'connected', 'connecting', 'disconnecting'][mongoose.connection.readyState],
      
      // Th√¥ng tin t·ª´ b·ªô ƒë·∫øm n·ªôi b·ªô
      cachedConnectionCounter: cachedConnection.connectionsCounter,
      
      // C√≥ k·∫øt n·ªëi MongoDB Client kh√¥ng
      hasMongoClient: cachedConnection.client !== null,
      
      // C√≥ Promise k·∫øt n·ªëi Mongoose kh√¥ng
      hasMongoosePromise: cachedConnection.mongoosePromise !== null,
      
      // ƒêang trong qu√° tr√¨nh k·∫øt n·ªëi kh√¥ng
      isConnecting: cachedConnection.isConnecting,
      
      // Th·ªùi gian ki·ªÉm tra
      checkedAt: new Date().toISOString()
    };
  } catch (error) {
    return { error: error.message };
  }
};

// Ph∆∞∆°ng th·ª©c t∆∞∆°ng th√≠ch ng∆∞·ª£c
export const connectToDatabase = async () => {
  return await getMongoClient();
};

// Export client promise theo c√°ch c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi m√£ hi·ªán t·∫°i
const clientPromise = getMongoClient();
export default clientPromise; 