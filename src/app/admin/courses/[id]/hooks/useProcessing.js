import { useState } from 'react';
import { useRouter } from 'next/navigation';
import CryptoJS from 'crypto-js';

export function useProcessing({ course, fetchCourseDetail, setShowJsonInputModal, setJsonInput, setJsonInputError, setSyncing, setSyncResult, setPreviewData, setShowPreviewModal, setApplyingSync }) {
  const router = useRouter();
  
  // States for sync
  const [syncing, setSyncingState] = useState(false);
  
  // States for processing
  const [processingData, setProcessingData] = useState(false);
  const [processingAllDrive, setProcessingAllDrive] = useState(false);
  const [processAllDriveResult, setProcessAllDriveResult] = useState(null);
  const [processingAllSheets, setProcessingAllSheets] = useState(false);
  const [processAllSheetsResult, setProcessAllSheetsResult] = useState(null);
  
  // H√†m x√≥a kh√≥a h·ªçc
  const handleDelete = async () => {
    if (!course) return;
    
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc n√†y?')) {
      try {
        const response = await fetch(`/api/courses/${course._id}`, {
          method: 'DELETE',
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc');
        }
        
        alert('X√≥a kh√≥a h·ªçc th√†nh c√¥ng!');
        router.push('/admin/courses');
      } catch (err) {
        console.error('L·ªói khi x√≥a kh√≥a h·ªçc:', err);
        alert(`L·ªói khi x√≥a kh√≥a h·ªçc: ${err.message}`);
      }
    }
  };

  // H√†m th√™m kh√≥a h·ªçc m·ªõi
  const handleAddCourse = async (newCourseData, setAddingCourse, setShowAddCourseModal) => {
    setAddingCourse(true);
    try {
      const response = await fetch('/api/courses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newCourseData),
      });
      
      if (!response.ok) {
        throw new Error(`L·ªói ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      
      // N·∫øu API tr·∫£ v·ªÅ d·ªØ li·ªáu m√£ h√≥a
      if (result._secureData) {
        alert('ƒê√£ t·∫°o kh√≥a h·ªçc m·ªõi th√†nh c√¥ng!');
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt kh√≥a h·ªçc v·ª´a t·∫°o
        const createdCourseData = JSON.parse(CryptoJS.AES.decrypt(result._secureData, 'kimvan-secure-key-2024').toString(CryptoJS.enc.Utf8));
        router.push(`/admin/courses/${createdCourseData.course._id}`);
      } else if (result.success) {
        alert('ƒê√£ t·∫°o kh√≥a h·ªçc m·ªõi th√†nh c√¥ng!');
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt kh√≥a h·ªçc v·ª´a t·∫°o
        router.push(`/admin/courses/${result.course._id}`);
      } else {
        throw new Error(result.message || 'Kh√¥ng th·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi');
      }
    } catch (error) {
      console.error('L·ªói khi t·∫°o kh√≥a h·ªçc m·ªõi:', error);
      alert(`Kh√¥ng th·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi: ${error.message}`);
    } finally {
      setAddingCourse(false);
      setShowAddCourseModal(false);
    }
  };

  // H√†m ƒë·ªìng b·ªô kh√≥a h·ªçc
  const handleSync = async () => {
    if (!course || !course.kimvanId) return;
    
    // Reset state
    setJsonInput('');
    setJsonInputError(null);
    
    // M·ªü modal nh·∫≠p JSON
    setShowJsonInputModal(true);
  };

  // H√†m x·ª≠ l√Ω submit form nh·∫≠p JSON
  const handleJsonSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·ªìng b·ªô
      setSyncing(true);
      setSyncResult({
        success: true,
        message: `ƒêang ƒë·ªìng b·ªô kh√≥a h·ªçc "${course.name}"...`,
        inProgress: true
      });
      
      let jsonData;
      
      try {
        // N·∫øu c√≥ JSON input, s·ª≠ d·ª•ng n√≥
        if (jsonInput.trim()) {
          jsonData = JSON.parse(jsonInput);
        }
      } catch (error) {
        setJsonInputError(`L·ªói ph√¢n t√≠ch JSON: ${error.message}`);
        setSyncing(false);
        return;
      }
      
      // Chu·∫©n b·ªã data cho API
      const requestData = {
        preview: true,
        useCache: false,
        originalPrice: course.originalPrice, // S·ª≠ d·ª•ng gi√° g·ªëc t·ª´ d·ªØ li·ªáu kh√≥a h·ªçc
        manualJson: jsonData // Th√™m JSON ng∆∞·ªùi d√πng nh·∫≠p v√†o n·∫øu c√≥
      };
      
      // G·ªçi API ƒë·ªÉ xem tr∆∞·ªõc d·ªØ li·ªáu
      console.log(`üîç G·ª≠i y√™u c·∫ßu xem tr∆∞·ªõc d·ªØ li·ªáu ƒë·ªìng b·ªô cho kh√≥a h·ªçc: ${course.kimvanId}`);
      const previewResponse = await fetch(`/api/courses/${course.kimvanId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });
      
      const previewResult = await previewResponse.json();
      
      if (!previewResponse.ok) {
        throw new Error(previewResult.message || 'Kh√¥ng th·ªÉ xem tr∆∞·ªõc d·ªØ li·ªáu ƒë·ªìng b·ªô');
      }
      
      // ƒê√≥ng modal nh·∫≠p JSON
      setShowJsonInputModal(false);
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£ xem tr∆∞·ªõc
      console.log('‚úÖ Nh·∫≠n d·ªØ li·ªáu xem tr∆∞·ªõc th√†nh c√¥ng:', previewResult);
      setPreviewData(previewResult.previewData);
      setShowPreviewModal(true);
      
      // C·∫≠p nh·∫≠t th√¥ng b√°o
      setSyncResult({
        success: true,
        message: 'ƒê√£ t·∫£i d·ªØ li·ªáu xem tr∆∞·ªõc, vui l√≤ng x√°c nh·∫≠n ƒë·ªÉ ti·∫øp t·ª•c',
        inProgress: false,
        preview: true
      });
      
    } catch (err) {
      console.error('L·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc:', err);
      setJsonInputError(`L·ªói ƒë·ªìng b·ªô: ${err.message}`);
      setSyncResult({
        success: false,
        message: `L·ªói ƒë·ªìng b·ªô: ${err.message}`,
        inProgress: false
      });
      setSyncing(false);
    }
  };

  // H√†m √°p d·ª•ng ƒë·ªìng b·ªô sau khi xem tr∆∞·ªõc
  const applySync = async (previewData) => {
    try {
      setApplyingSync(true);
      setSyncResult({
        success: true,
        message: `ƒêang √°p d·ª•ng ƒë·ªìng b·ªô kh√≥a h·ªçc "${course.name}"...`,
        inProgress: true
      });
      
      // G·ªçi API ƒë·ªÉ th·ª±c hi·ªán ƒë·ªìng b·ªô th·ª±c s·ª±
      const response = await fetch(`/api/courses/${course.kimvanId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          applyProcessedLinks: true,
          preview: false,
          useCache: true,
          originalPrice: course.originalPrice,
          manualJson: previewData?.manualJson // Chuy·ªÉn ti·∫øp JSON ƒë√£ nh·∫≠p n·∫øu c√≥
        })
      });
      
      const syncData = await response.json();
      
      if (!response.ok) {
        throw new Error(syncData.message || 'Kh√¥ng th·ªÉ ƒë·ªìng b·ªô kh√≥a h·ªçc');
      }
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·ªìng b·ªô
      setSyncResult({
        success: true,
        message: syncData.message || 'ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng',
        stats: syncData.stats,
        inProgress: false
      });
      
      // T·∫£i l·∫°i th√¥ng tin kh√≥a h·ªçc
      await fetchCourseDetail();
      
      // ƒê√≥ng modal xem tr∆∞·ªõc
      setShowPreviewModal(false);
      setPreviewData(null);
      
    } catch (err) {
      console.error('L·ªói khi √°p d·ª•ng ƒë·ªìng b·ªô kh√≥a h·ªçc:', err);
      setSyncResult({
        success: false,
        message: `L·ªói √°p d·ª•ng ƒë·ªìng b·ªô: ${err.message}`,
        inProgress: false
      });
    } finally {
      setApplyingSync(false);
      setSyncing(false);
    }
  };

  // H√†m h·ªßy ƒë·ªìng b·ªô
  const cancelSync = () => {
    setShowPreviewModal(false);
    setPreviewData(null);
    setSyncing(false);
    setSyncResult(null);
  };

  // H√†m x·ª≠ l√Ω d·ªØ li·ªáu database
  const handleProcessData = async (processMethod) => {
    if (!course) return;
    
    try {
      setProcessingData(true);
      
      const response = await fetch(`/api/courses/process/${course._id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          method: processMethod
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc');
      }
      
      // N·∫øu x·ª≠ l√Ω th√†nh c√¥ng, t·∫£i l·∫°i th√¥ng tin kh√≥a h·ªçc
      if (data.success) {
        await fetchCourseDetail();
      }

      return data;
    } catch (err) {
      console.error('L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc:', err);
      return {
        success: false,
        message: err.message || 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc'
      };
    } finally {
      setProcessingData(false);
    }
  };

  // H√†m x·ª≠ l√Ω upload file PDF
  const handleUploadPdf = async (pdfFile, setUploadingPdf, setUploadResult, setPdfFile) => {
    if (!pdfFile) {
      alert('Vui l√≤ng ch·ªçn file PDF ƒë·ªÉ t·∫£i l√™n');
      return;
    }
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    if (pdfFile.type !== 'application/pdf') {
      alert('Ch·ªâ h·ªó tr·ª£ t·∫£i l√™n file PDF');
      return;
    }
    
    try {
      setUploadingPdf(true);
      setUploadResult(null);
      
      const formData = new FormData();
      formData.append('pdf', pdfFile);
      formData.append('courseId', course._id);
      
      const response = await fetch('/api/courses/pdf/upload', {
        method: 'POST',
        body: formData,
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ t·∫£i l√™n file PDF');
      }
      
      setUploadResult({
        success: true,
        message: 'T·∫£i l√™n file PDF th√†nh c√¥ng',
        url: data.url,
        filename: data.filename
      });
      
      // Reset file input
      setPdfFile(null);
      
      // T·∫£i l·∫°i th√¥ng tin kh√≥a h·ªçc
      await fetchCourseDetail();
    } catch (err) {
      console.error('L·ªói khi t·∫£i l√™n file PDF:', err);
      setUploadResult({
        success: false,
        message: err.message || 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i l√™n file PDF'
      });
    } finally {
      setUploadingPdf(false);
    }
  };

  // H√†m x·ª≠ l√Ω t·∫•t c·∫£ c√°c link Drive trong kh√≥a h·ªçc
  const handleProcessAllDrive = async (skipWatermarkRemoval) => {
    if (!course) return;
    
    if (window.confirm(`B·∫°n c√≥ mu·ªën x·ª≠ l√Ω t·∫•t c·∫£ c√°c link Drive trong kh√≥a h·ªçc "${course.name}" kh√¥ng?`)) {
      try {
        setProcessingAllDrive(true);
        setProcessAllDriveResult({
          success: true,
          message: `ƒêang x·ª≠ l√Ω t·∫•t c·∫£ c√°c link Drive trong kh√≥a h·ªçc "${course.name}"...`,
          inProgress: true
        });
        
        const response = await fetch(`/api/courses/${course._id}/process-all-drive`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            skipWatermarkRemoval: skipWatermarkRemoval
          })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
          throw new Error(result.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω c√°c link Drive');
        }
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω
        setProcessAllDriveResult({
          success: true,
          message: result.message || 'X·ª≠ l√Ω t·∫•t c·∫£ c√°c link Drive th√†nh c√¥ng',
          details: result.details || null,
          inProgress: false
        });
        
        // T·∫£i l·∫°i th√¥ng tin kh√≥a h·ªçc
        await fetchCourseDetail();
      } catch (err) {
        console.error('L·ªói khi x·ª≠ l√Ω c√°c link Drive:', err);
        setProcessAllDriveResult({
          success: false,
          message: `L·ªói x·ª≠ l√Ω: ${err.message}`,
          inProgress: false
        });
      } finally {
        setProcessingAllDrive(false);
      }
    }
  };

  // H√†m x·ª≠ l√Ω ƒë·ªìng b·ªô t·∫•t c·∫£ sheets v·ªõi database
  const handleProcessAllSheets = async () => {
    if (!course) {
      console.log("‚ùå [CLIENT] handleProcessAllSheets: No course data available");
      return;
    }
    
    console.log(`üîÑ [CLIENT] handleProcessAllSheets: Starting for course "${course.name}" (${course._id})`);
    console.log(`üîÑ [CLIENT] handleProcessAllSheets: Current sheets:`, course.sheets);
    
    if (window.confirm(`B·∫°n c√≥ mu·ªën ƒë·ªìng b·ªô t·∫•t c·∫£ sheets v·ªõi database cho kh√≥a h·ªçc "${course.name}" kh√¥ng?`)) {
      console.log("‚úÖ [CLIENT] handleProcessAllSheets: User confirmed sync operation");
      try {
        setProcessingAllSheets(true);
        console.log("üîÑ [CLIENT] handleProcessAllSheets: Set processingAllSheets = true");
        
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        setProcessAllSheetsResult({
          success: true,
          message: `ƒêang ƒë·ªìng b·ªô t·∫•t c·∫£ sheets cho kh√≥a h·ªçc "${course.name}"...`,
          inProgress: true
        });
        console.log("üîÑ [CLIENT] handleProcessAllSheets: Set initial notification");
        
        console.log(`üîÑ [CLIENT] handleProcessAllSheets: Calling API endpoint /api/courses/${course._id}/process-all-sheets`);
        const response = await fetch(`/api/courses/${course._id}/process-all-sheets`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        console.log(`üîÑ [CLIENT] handleProcessAllSheets: API response status:`, response.status);
        const result = await response.json();
        console.log(`üîÑ [CLIENT] handleProcessAllSheets: API response data:`, result);
        
        if (!response.ok) {
          console.error(`‚ùå [CLIENT] handleProcessAllSheets: API returned error status ${response.status}:`, result);
          throw new Error(result.message || 'Kh√¥ng th·ªÉ ƒë·ªìng b·ªô sheets');
        }
        
        console.log(`‚úÖ [CLIENT] handleProcessAllSheets: API call successful, results:`, result.results);
        setProcessAllSheetsResult({
          success: true,
          message: result.message || 'ƒê·ªìng b·ªô sheets th√†nh c√¥ng',
          results: result.results,
          errors: result.errors
        });
        console.log("‚úÖ [CLIENT] handleProcessAllSheets: Updated notification with success");
        
        // T·∫£i l·∫°i th√¥ng tin kh√≥a h·ªçc
        console.log("üîÑ [CLIENT] handleProcessAllSheets: Refreshing course data...");
        await fetchCourseDetail();
        console.log("‚úÖ [CLIENT] handleProcessAllSheets: Course data refreshed");
        
      } catch (err) {
        console.error('‚ùå [CLIENT] handleProcessAllSheets: Error:', err);
        setProcessAllSheetsResult({
          success: false,
          message: `L·ªói ƒë·ªìng b·ªô sheets: ${err.message}`
        });
        console.log("‚ùå [CLIENT] handleProcessAllSheets: Updated notification with error");
      } finally {
        setProcessingAllSheets(false);
        console.log("‚úÖ [CLIENT] handleProcessAllSheets: Set processingAllSheets = false");
      }
    } else {
      console.log("‚ÑπÔ∏è [CLIENT] handleProcessAllSheets: User cancelled operation");
    }
  };

  return {
    handleDelete,
    handleAddCourse,
    handleSync,
    handleJsonSubmit,
    applySync,
    cancelSync,
    handleProcessData,
    handleUploadPdf,
    handleProcessAllDrive,
    handleProcessAllSheets,
    processingData,
    processingAllDrive,
    processAllDriveResult,
    setProcessAllDriveResult,
    processingAllSheets,
    processAllSheetsResult,
    setProcessAllSheetsResult,
    syncing
  };
} 