'use client';

import { useState, useEffect } from 'react';
import { PlusIcon, PencilIcon, TrashIcon, CloudArrowDownIcon, ExclamationCircleIcon, ArrowDownTrayIcon } from '@heroicons/react/24/outline';
import { AdjustmentsHorizontalIcon, CheckCircleIcon, XMarkIcon } from '@heroicons/react/24/outline';
import { useRouter } from 'next/navigation';

export default function CoursesPage() {
  const router = useRouter();
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [currentCourse, setCurrentCourse] = useState(null);
  const [error, setError] = useState(null);
  // Removed unused state variables related to sync/initialization
  const [hasMongoConnection, setHasMongoConnection] = useState(true);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [showOriginalDataModal, setShowOriginalDataModal] = useState(false);
  const [showOriginalData, setShowOriginalData] = useState(false);
  const [originalData, setOriginalData] = useState(null);
  const [currentCourseId, setCurrentCourseId] = useState(null);
  const [loadingOriginalData, setLoadingOriginalData] = useState(false);
  const [originalDataError, setOriginalDataError] = useState(null);
  const [downloadingData, setDownloadingData] = useState(false);
  const [downloadError, setDownloadError] = useState(null);
  const [showProcessModal, setShowProcessModal] = useState(false);
  const [processingData, setProcessingData] = useState(false);
  const [processMethod, setProcessMethod] = useState('update_prices');
  const [processResult, setProcessResult] = useState(null);
  const [selectedCourses, setSelectedCourses] = useState([]);
  const [processValue, setProcessValue] = useState('');
  const [processingPDFs, setProcessingPDFs] = useState(false);
  const [analyzingCourses, setAnalyzingCourses] = useState({});
  const [processingPDFCourses, setProcessingPDFCourses] = useState({});
  
  // H√†m ti·ªán √≠ch ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi b·∫£ng minicourse
  const syncToMiniCourse = async (courseData) => {
    try {
      console.log('üîÑ ƒêang ƒë·ªìng b·ªô v·ªõi minicourse...');
      const miniCourse = {
        kimvanId: courseData.kimvanId || null,
        name: courseData.name,
        description: courseData.description,
        price: courseData.price,
        status: courseData.status,
        courseId: courseData._id
      };
      
      // G·ªçi API ƒë·ªÉ th√™m/c·∫≠p nh·∫≠t minicourse
      const miniCourseResponse = await fetch('/api/minicourses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(miniCourse),
      });
      
      if (!miniCourseResponse.ok) {
        console.warn('‚ö†Ô∏è Th√™m/c·∫≠p nh·∫≠t minicourse kh√¥ng th√†nh c√¥ng');
        return false;
      } else {
        console.log('‚úÖ Th√™m/c·∫≠p nh·∫≠t minicourse th√†nh c√¥ng');
        return true;
      }
    } catch (miniErr) {
      console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô minicourse:', miniErr);
      return false;
    }
  };
  
  // Thi·∫øt l·∫≠p cookie admin_access khi trang ƒë∆∞·ª£c t·∫£i
  useEffect(() => {
    // Thi·∫øt l·∫≠p cookie admin_access=true (c√≥ th·ªÉ h·∫øt h·∫°n sau 1 ng√†y)
    document.cookie = "admin_access=true; path=/; max-age=86400; SameSite=Lax";
    console.log("‚úÖ ƒê√£ thi·∫øt l·∫≠p cookie admin_access=true");
    
    // Th√™m b·ªô l·ªçc console ƒë·ªÉ b·ªè qua l·ªói 404 /api/users/me
    const originalError = console.error;
    console.error = (...args) => {
      // B·ªè qua l·ªói 404 t·ª´ /api/users/me
      if (
        args[0] && 
        typeof args[0] === 'string' && 
        (args[0].includes('/api/users/me') || 
         args[0].includes('Failed to load resource: the server responded with a status of 404'))
      ) {
        // B·ªè qua l·ªói 404 t·ª´ /api/users/me
        return;
      }
      originalError(...args);
    };
    
    // Kh√¥i ph·ª•c console.error khi component unmount
    return () => {
      console.error = originalError;
    };
  }, []);

  // H√†m ƒë·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc t·ª´ API
  const fetchCourses = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log("üîç ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn /api/admin/courses...");
      const response = await fetch('/api/admin/courses');
      console.log("üìã Ph·∫£n h·ªìi:", response.status, response.statusText);
      
      // N·∫øu API tr·∫£ v·ªÅ l·ªói 403, th·ª≠ l√†m m·ªõi cookie v√† g·ªçi l·∫°i
      if (response.status === 403) {
        console.log("üîÑ Ph√°t hi·ªán l·ªói 403, thi·∫øt l·∫≠p l·∫°i cookie v√† th·ª≠ l·∫°i...");
        document.cookie = "admin_access=true; path=/; max-age=86400; SameSite=Lax";
        const retryResponse = await fetch('/api/admin/courses');
        
        if (!retryResponse.ok) {
          const retryData = await retryResponse.json();
          setHasMongoConnection(false);
          throw new Error(retryData.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc sau khi th·ª≠ l·∫°i');
        }
        
        const retryData = await retryResponse.json();
        setHasMongoConnection(true);
        // Ki·ªÉm tra xem retryData c√≥ thu·ªôc t√≠nh courses kh√¥ng
        if (retryData && retryData.courses && Array.isArray(retryData.courses)) {
          setCourses(retryData.courses);
        } else if (Array.isArray(retryData)) {
          setCourses(retryData);
        } else {
          console.warn('Format d·ªØ li·ªáu retry kh√¥ng nh∆∞ mong ƒë·ª£i:', retryData);
          setCourses([]);
        }
        setLoading(false);
        return;
      }
      
      const data = await response.json();
      
      if (!response.ok) {
        setHasMongoConnection(false);
        throw new Error(data.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc');
      }
      
      setHasMongoConnection(true);
      // Ki·ªÉm tra xem data c√≥ thu·ªôc t√≠nh courses kh√¥ng
      if (data && data.courses && Array.isArray(data.courses)) {
        setCourses(data.courses);
      } else if (Array.isArray(data)) {
        setCourses(data);
      } else {
        console.warn('Format d·ªØ li·ªáu kh√¥ng nh∆∞ mong ƒë·ª£i:', data);
        setCourses([]);
      }
    } catch (err) {
      console.error('L·ªói khi t·∫£i danh s√°ch kh√≥a h·ªçc:', err);
      setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.');
      setCourses([]);
      setHasMongoConnection(false);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCourses();
  }, []);

  const filteredCourses = courses.filter(course =>
    course.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    course.description?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleEdit = (course) => {
    setCurrentCourse({
      _id: course._id,
      name: course.name,
      description: course.description,
      price: course.price,
      status: course.status
    });
    setShowModal(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc n√†y?')) {
      try {
        setError(null);
        
        // L·∫•y th√¥ng tin kh√≥a h·ªçc tr∆∞·ªõc khi x√≥a ƒë·ªÉ c√≥ kimvanId
        const courseResponse = await fetch(`/api/admin/courses/${id}`);
        const courseData = await courseResponse.json();
        const kimvanId = courseData.kimvanId;
        
        // X√≥a kh√≥a h·ªçc
        const response = await fetch(`/api/admin/courses/${id}`, {
          method: 'DELETE',
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc');
        }
        
        // C·∫≠p nh·∫≠t danh s√°ch kh√≥a h·ªçc sau khi x√≥a
        setCourses(courses.filter(course => course._id !== id));
        
        // X√≥a minicourse t∆∞∆°ng ·ª©ng
        try {
          console.log('ƒêang x√≥a minicourse t∆∞∆°ng ·ª©ng...');
          const miniCourseResponse = await fetch('/api/minicourses', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              courseId: id,
              kimvanId: kimvanId
            }),
          });
          
          if (miniCourseResponse.ok) {
            console.log('‚úÖ ƒê√£ x√≥a minicourse th√†nh c√¥ng');
          } else {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a minicourse');
          }
        } catch (miniErr) {
          console.error('‚ùå L·ªói khi x√≥a minicourse:', miniErr);
        }
      } catch (err) {
        console.error('L·ªói khi x√≥a kh√≥a h·ªçc:', err);
        setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi x√≥a kh√≥a h·ªçc. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.');
      }
    }
  };

  // Handler removed: handleCreateFromSheets

  const handleSave = async (e) => {
    e.preventDefault();
    
    try {
      setError(null);
      let response;
      let savedCourse;
      
      // N·∫øu c√≥ _id, th√¨ c·∫≠p nh·∫≠t kh√≥a h·ªçc hi·ªán c√≥
      if (currentCourse._id) {
        response = await fetch(`/api/admin/courses/${currentCourse._id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(currentCourse),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√≥a h·ªçc');
        }
        
        // C·∫≠p nh·∫≠t danh s√°ch kh√≥a h·ªçc
        setCourses(courses.map(course => 
          course._id === currentCourse._id ? currentCourse : course
        ));
        
        savedCourse = currentCourse;
      } 
      // Ng∆∞·ª£c l·∫°i, t·∫°o kh√≥a h·ªçc m·ªõi
      else {
        response = await fetch('/api/admin/courses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(currentCourse),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'Kh√¥ng th·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi');
        }
        
        // Th√™m kh√≥a h·ªçc m·ªõi v√†o danh s√°ch
        setCourses([...courses, data.course]);
        savedCourse = data.course;
      }
      
      // ƒê·ªìng b·ªô v·ªõi b·∫£ng minicourse
      await syncToMiniCourse(savedCourse);
      
      // ƒê√≥ng modal v√† ƒë·∫∑t l·∫°i tr·∫°ng th√°i
      setShowModal(false);
      setCurrentCourse(null);
    } catch (err) {
      console.error('L·ªói khi l∆∞u kh√≥a h·ªçc:', err);
      setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi l∆∞u kh√≥a h·ªçc. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.');
    }
  };

  // Handler removed: handleShowSyncModal

  // H√†m tr√≠ch xu·∫•t ID YouTube t·ª´ URL
  const extractYoutubeId = (url) => {
    if (!url) return null;
    
    // H·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng URL YouTube
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    
    return (match && match[2].length === 11) ? match[2] : null;
  };
  
  // H√†m ki·ªÉm tra xem URL c√≥ ph·∫£i l√† YouTube link kh√¥ng
  const isYoutubeLink = (url) => {
    if (!url) return false;
    return url.includes('youtube.com') || url.includes('youtu.be');
  };
  
  // H√†m ki·ªÉm tra xem URL c√≥ ph·∫£i l√† PDF kh√¥ng
  const isPdfLink = (url) => {
    if (!url) return false;
    
    // Ki·ªÉm tra nhi·ªÅu tr∆∞·ªùng h·ª£p c·ªßa link PDF
    const urlLower = url.toLowerCase();
    
    // Ki·ªÉm tra ƒëu√¥i file l√† .pdf
    if (urlLower.endsWith('.pdf')) return true;
    
    // Ki·ªÉm tra URL c√≥ ch·ª©a 'pdf' trong ƒë∆∞·ªùng d·∫´n
    if (urlLower.includes('/pdf/')) return true;
    
    // Ki·ªÉm tra URL Google Drive c√≥ ƒë·ªãnh d·∫°ng PDF
    if (urlLower.includes('drive.google.com') && urlLower.includes('pdf')) return true;
    
    // Ki·ªÉm tra URL c√≥ tham s·ªë type=pdf
    if (urlLower.includes('type=pdf')) return true;
    
    // Ki·ªÉm tra URL c√≥ tham s·ªë format=pdf
    if (urlLower.includes('format=pdf')) return true;
    
    return false;
  };
  
  // H√†m ki·ªÉm tra xem URL c√≥ ph·∫£i l√† Google Drive link kh√¥ng
  const isGoogleDriveLink = (url) => {
    if (!url) return false;
    return url.includes('drive.google.com') || url.includes('docs.google.com');
  };

  // H√†m ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ Kimvan
  const analyzeKimvanData = (data) => {
    if (!data) return null;
    
    try {
      // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng ph√¢n t√≠ch
      const analysis = {
        youtubeLinks: 0,
        driveLinks: 0,
        pdfLinks: 0, // Th√™m ƒë·∫øm s·ªë l∆∞·ª£ng PDF
        totalLinks: 0,
        lessons: [],
        documents: [],
        attachments: []
      };
      
      // H√†m ƒë·ªá quy ƒë·ªÉ t√¨m link trong c·∫•u tr√∫c JSON ph·ª©c t·∫°p
      const findLinks = (obj) => {
        if (!obj || typeof obj !== 'object') return;
        
        // Ki·ªÉm tra n·∫øu ƒë·ªëi t∆∞·ª£ng c√≥ tr∆∞·ªùng link v√† uri
        if (obj.textFormat && obj.textFormat.link && obj.textFormat.link.uri) {
          const url = obj.textFormat.link.uri;
          analysis.totalLinks++;
          
          if (isYoutubeLink(url)) {
            analysis.youtubeLinks++;
            return { type: 'youtube', url, id: extractYoutubeId(url) };
          } else if (isGoogleDriveLink(url)) {
            analysis.driveLinks++;
            return { type: 'drive', url };
          } else if (isPdfLink(url)) {
            analysis.pdfLinks++;
            return { type: 'pdf', url };
          } else {
            return { type: 'other', url };
          }
        }
        
        // Ki·ªÉm tra tr∆∞·ªùng hyperlink (c√≥ th·ªÉ ch·ª©a URL)
        if (obj.hyperlink) {
          const url = obj.hyperlink;
          if (url.includes('http')) {
            analysis.totalLinks++;
            if (isYoutubeLink(url)) {
              analysis.youtubeLinks++;
              return { type: 'youtube', url, id: extractYoutubeId(url) };
            } else if (isGoogleDriveLink(url)) {
              analysis.driveLinks++;
              return { type: 'drive', url };
            } else if (isPdfLink(url)) {
              analysis.pdfLinks++;
              return { type: 'pdf', url };
            } else {
              return { type: 'other', url };
            }
          }
        }
        
        // Ki·ªÉm tra tr∆∞·ªùng formattedValue c√≥ ch·ª©a URL kh√¥ng
        if (obj.formattedValue && typeof obj.formattedValue === 'string') {
          const url = obj.formattedValue;
          if (url.startsWith('http')) {
            analysis.totalLinks++;
            if (isYoutubeLink(url)) {
              analysis.youtubeLinks++;
              return { type: 'youtube', url, id: extractYoutubeId(url) };
            } else if (isGoogleDriveLink(url)) {
              analysis.driveLinks++;
              return { type: 'drive', url };
            } else if (isPdfLink(url)) {
              analysis.pdfLinks++;
              return { type: 'pdf', url };
            }
          }
        }
        
        // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ sheets API
        if (obj.values && Array.isArray(obj.values)) {
          obj.values.forEach(val => {
            if (val.userEnteredFormat && val.userEnteredFormat.textFormat && 
                val.userEnteredFormat.textFormat.link && val.userEnteredFormat.textFormat.link.uri) {
              const url = val.userEnteredFormat.textFormat.link.uri;
              analysis.totalLinks++;
              
              if (isYoutubeLink(url)) {
                analysis.youtubeLinks++;
              } else if (isGoogleDriveLink(url)) {
                analysis.driveLinks++;
              } else if (isPdfLink(url)) {
                analysis.pdfLinks++;
              }
            }
            
            // Ki·ªÉm tra formattedValue c√≥ ch·ª©a URL kh√¥ng
            if (val.formattedValue && typeof val.formattedValue === 'string') {
              const text = val.formattedValue;
              if (text.startsWith('http')) {
                analysis.totalLinks++;
                if (isYoutubeLink(text)) {
                  analysis.youtubeLinks++;
                } else if (isGoogleDriveLink(text)) {
                  analysis.driveLinks++;
                } else if (isPdfLink(text)) {
                  analysis.pdfLinks++;
                }
              }
            }
          });
        }
        
        // Duy·ªát ƒë·ªá quy qua t·∫•t c·∫£ c√°c tr∆∞·ªùng
        for (const key in obj) {
          if (obj[key] && typeof obj[key] === 'object') {
            findLinks(obj[key]);
          }
        }
      };
      
      // X·ª≠ l√Ω d·ªØ li·ªáu b√†i h·ªçc
      if (data.chapters && Array.isArray(data.chapters)) {
        data.chapters.forEach(chapter => {
          if (chapter.lessons && Array.isArray(chapter.lessons)) {
            chapter.lessons.forEach(lesson => {
              // X√°c ƒë·ªãnh lo·∫°i video d·ª±a tr√™n URL
              let videoType = 'unknown';
              let videoUrl = lesson.videoUrl || '';
              let videoId = null;
              
              if (videoUrl) {
                if (isYoutubeLink(videoUrl)) {
                  videoType = 'youtube';
                  videoId = extractYoutubeId(videoUrl);
                } else if (isGoogleDriveLink(videoUrl)) {
                  videoType = 'drive';
                } else if (isPdfLink(videoUrl)) {
                  videoType = 'pdf';
                }
              }
              
              // Th√™m v√†o danh s√°ch b√†i h·ªçc
              analysis.lessons.push({
                id: lesson.id || '',
                title: lesson.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ',
                videoType: videoType,
                videoUrl: videoUrl,
                videoId: videoId,
                chapterTitle: chapter.title || 'Ch∆∞a ph√¢n lo·∫°i'
              });
            });
          }
        });
      }
      
      // Ph√¢n t√≠ch d·ªØ li·ªáu t√†i li·ªáu
      if (data.resources && Array.isArray(data.resources)) {
        data.resources.forEach(resource => {
          // X√°c ƒë·ªãnh lo·∫°i t√†i li·ªáu d·ª±a tr√™n URL
          let resourceType = resource.type || 'unknown';
          let resourceUrl = resource.url || '';
          let resourceId = null;
          
          if (resourceUrl) {
            if (isYoutubeLink(resourceUrl)) {
              resourceType = 'youtube';
              resourceId = extractYoutubeId(resourceUrl);
            } else if (isGoogleDriveLink(resourceUrl)) {
              resourceType = 'drive';
            } else if (isPdfLink(resourceUrl)) {
              resourceType = 'pdf';
            }
          }
          
          // Th√™m v√†o danh s√°ch t√†i li·ªáu
          analysis.documents.push({
            id: resource.id || '',
            title: resource.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ',
            type: resourceType,
            url: resourceUrl,
            resourceId: resourceId
          });
        });
      }
      
      // Ph√¢n t√≠ch d·ªØ li·ªáu ƒë√≠nh k√®m
      if (data.attachments && Array.isArray(data.attachments)) {
        data.attachments.forEach(attachment => {
          // X√°c ƒë·ªãnh lo·∫°i ƒë√≠nh k√®m d·ª±a tr√™n URL
          let attachmentType = attachment.type || 'unknown';
          let attachmentUrl = attachment.url || '';
          let attachmentId = null;
          
          if (attachmentUrl) {
            if (isYoutubeLink(attachmentUrl)) {
              attachmentType = 'youtube';
              attachmentId = extractYoutubeId(attachmentUrl);
            } else if (isGoogleDriveLink(attachmentUrl)) {
              attachmentType = 'drive';
            } else if (isPdfLink(attachmentUrl)) {
              attachmentType = 'pdf';
            }
          }
          
          // Th√™m v√†o danh s√°ch ƒë√≠nh k√®m
          analysis.attachments.push({
            id: attachment.id || '',
            title: attachment.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ',
            type: attachmentType,
            url: attachmentUrl,
            attachmentId: attachmentId
          });
        });
      }
      
      // Ph√¢n t√≠ch c·∫•u tr√∫c ph·ª©c t·∫°p t·ª´ Google Sheets
      if (data.sheets && Array.isArray(data.sheets)) {
        data.sheets.forEach(sheet => {
          // Ki·ªÉm tra ti√™u ƒë·ªÅ sheet
          if (sheet.properties && sheet.properties.title) {
            console.log(`üìä ƒêang ph√¢n t√≠ch sheet: ${sheet.properties.title}`);
          }
          
          if (sheet.data && Array.isArray(sheet.data)) {
            sheet.data.forEach(sheetData => {
              if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
                sheetData.rowData.forEach(row => {
                  findLinks(row);
                });
              }
            });
          }
        });
      }
      
      console.log('‚úÖ K·∫øt qu·∫£ ph√¢n t√≠ch:', analysis);
      return analysis;
    } catch (error) {
      console.error('L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu Kimvan:', error);
      return null;
    }
  };

  // Handler removed: handleConfirmSync

  // Handler removed: handleSyncSingleCourse

  // Handler removed: handleSync

  // Handler removed: handleInitDatabase

  // Th√™m h√†m x·ª≠ l√Ω khi ƒë√≥ng modal
  const handleCloseModal = () => {
    setShowModal(false);
  };

  // Handler removed: handleCloseSyncModal

  // H√†m hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc trong modal
  const handleViewOriginalData = async (courseId) => {
    setShowOriginalDataModal(true);
    setLoadingOriginalData(true);
    setCurrentCourseId(courseId);
    
    try {
      const courseResponse = await fetch(`/api/admin/courses/${courseId}`);
      if (!courseResponse.ok) {
        throw new Error(`L·ªói: ${courseResponse.status} ${courseResponse.statusText}`);
      }
      const data = await courseResponse.json();
      setOriginalData(data.originalData);
    } catch (error) {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu g·ªëc:', error);
      setOriginalData(null);
    } finally {
      setLoadingOriginalData(false);
    }
  }

  // H√†m ƒë·ªÉ t·∫£i xu·ªëng d·ªØ li·ªáu g·ªëc d∆∞·ªõi d·∫°ng file JSON
  const handleDownloadOriginalData = async () => {
    if (!currentCourseId) return;
    
    setDownloadingData(true);
    setDownloadError(null);
    
    try {
      const courseResponse = await fetch(`/api/admin/courses/${currentCourseId}`);
      if (!courseResponse.ok) {
        throw new Error(`L·ªói: ${courseResponse.status} ${courseResponse.statusText}`);
      }
      
      const courseData = await courseResponse.json();
      
      if (!courseData.originalData) {
        throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu g·ªëc cho kh√≥a h·ªçc n√†y');
      }
      
      // T·∫°o file JSON ƒë·ªÉ t·∫£i xu·ªëng
      const blob = new Blob([JSON.stringify(courseData.originalData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      // T·∫°o th·∫ª a v√† k√≠ch ho·∫°t s·ª± ki·ªán click ƒë·ªÉ t·∫£i xu·ªëng
      const a = document.createElement('a');
      a.href = url;
      a.download = `kimvan-course-${currentCourseId}.json`;
      document.body.appendChild(a);
      a.click();
      
      // D·ªçn d·∫πp
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);
    } catch (error) {
      console.error('L·ªói khi t·∫£i xu·ªëng d·ªØ li·ªáu g·ªëc:', error);
      setDownloadError(error.message);
    } finally {
      setDownloadingData(false);
    }
  };

  // Th√™m h√†m x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc
  const handleProcessData = async () => {
    if (selectedCourses.length === 0) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kh√≥a h·ªçc ƒë·ªÉ x·ª≠ l√Ω');
      return;
    }

    try {
      setProcessingData(true);
      setError(null);
      setProcessResult(null);
      
      const response = await fetch('/api/admin/courses/process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          courseIds: selectedCourses,
          method: processMethod,
          value: processValue
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc');
      }
      
      setProcessResult(data);
      
      // N·∫øu x·ª≠ l√Ω th√†nh c√¥ng, t·∫£i l·∫°i danh s√°ch kh√≥a h·ªçc
      if (data.success) {
        await fetchCourses();
        
        // ƒê·ªìng b·ªô v·ªõi minicourse cho t·ª´ng kh√≥a h·ªçc ƒë√£ x·ª≠ l√Ω
        if (data.updatedCourses && Array.isArray(data.updatedCourses)) {
          console.log('ƒê·ªìng b·ªô d·ªØ li·ªáu v·ªõi minicourse cho c√°c kh√≥a h·ªçc ƒë√£ x·ª≠ l√Ω');
          for (const course of data.updatedCourses) {
            await syncToMiniCourse(course);
          }
        } else {
          // N·∫øu API kh√¥ng tr·∫£ v·ªÅ danh s√°ch kh√≥a h·ªçc ƒë√£ c·∫≠p nh·∫≠t, t·∫£i l·∫°i t·ª´ng kh√≥a h·ªçc v√† ƒë·ªìng b·ªô
          for (const courseId of selectedCourses) {
            try {
              const courseResponse = await fetch(`/api/admin/courses/${courseId}`);
              if (courseResponse.ok) {
                const courseData = await courseResponse.json();
                await syncToMiniCourse(courseData);
              }
            } catch (err) {
              console.error(`L·ªói khi ƒë·ªìng b·ªô minicourse cho kh√≥a h·ªçc ${courseId}:`, err);
            }
          }
        }
        
        // Reset l·ª±a ch·ªçn sau khi x·ª≠ l√Ω th√†nh c√¥ng
        setSelectedCourses([]);
      }
    } catch (err) {
      console.error('L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc:', err);
      setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc');
    } finally {
      setProcessingData(false);
    }
  };

  // X·ª≠ l√Ω ch·ªçn t·∫•t c·∫£ kh√≥a h·ªçc
  const handleSelectAllCourses = (e) => {
    if (e.target.checked) {
      setSelectedCourses(courses.map(course => course._id));
    } else {
      setSelectedCourses([]);
    }
  };

  // X·ª≠ l√Ω ch·ªçn/b·ªè ch·ªçn m·ªôt kh√≥a h·ªçc
  const handleSelectCourse = (courseId, isChecked) => {
    if (isChecked) {
      setSelectedCourses([...selectedCourses, courseId]);
    } else {
      setSelectedCourses(selectedCourses.filter(id => id !== courseId));
    }
  };

  // H√†m x·ª≠ l√Ω t·∫•t c·∫£ file PDF
  const handleProcessAllPDFs = async () => {
    try {
      setProcessingPDFs(true);
      setError(null);
      
      // T·∫°o m·ªôt m·∫£ng ch·ª©a t·∫•t c·∫£ promise x·ª≠ l√Ω PDF
      const processPromises = courses.map(async (course) => {
        try {
          // ƒê√°nh d·∫•u ƒëang x·ª≠ l√Ω cho kh√≥a h·ªçc n√†y
          setProcessingPDFCourses(prev => ({ ...prev, [course._id]: true }));
          
          // G·ªçi API ƒë·ªÉ x·ª≠ l√Ω PDF cho kh√≥a h·ªçc c·ª• th·ªÉ
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 15 * 60 * 1000); // 15 ph√∫t
          
          try {
            // Th√™m retry logic
            let retryCount = 0;
            const maxRetries = 2;
            let response = null;
            
            while (retryCount <= maxRetries) {
              try {
                console.log(`Th·ª≠ g·ªçi API x·ª≠ l√Ω PDF l·∫ßn ${retryCount + 1} cho kh√≥a h·ªçc ${course._id}`);
                response = await fetch(`/api/courses/${course._id}/process-all-drive`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  signal: controller.signal,
                  timeout: 15 * 60 * 1000 // 15 ph√∫t
                });
                
                // N·∫øu fetch th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
                break;
              } catch (fetchError) {
                retryCount++;
                
                // N·∫øu ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i ho·∫∑c l·ªói kh√¥ng ph·∫£i timeout, throw l·ªói
                if (retryCount > maxRetries || 
                   (fetchError.name !== 'AbortError' && 
                    !fetchError.message.includes('timeout') && 
                    !fetchError.message.includes('Headers Timeout Error'))) {
                  throw fetchError;
                }
                
                // ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
                console.log(`L·ªói fetch: ${fetchError.message}. Th·ª≠ l·∫°i sau 5 gi√¢y...`);
                await new Promise(resolve => setTimeout(resolve, 5000));
              }
            }
            
            clearTimeout(timeoutId); // X√≥a timeout n·∫øu fetch ho√†n th√†nh
            
            if (!response) {
              throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API sau nhi·ªÅu l·∫ßn th·ª≠');
            }
          
            const data = await response.json();
          
            if (!response.ok) {
              throw new Error(data.message || data.error || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF');
            }
          
            // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω xong cho kh√≥a h·ªçc n√†y
            setProcessingPDFCourses(prev => ({ ...prev, [course._id]: false }));
            
            // ƒê·ªìng b·ªô v·ªõi minicourse sau khi x·ª≠ l√Ω PDF
            try {
              const courseResponse = await fetch(`/api/admin/courses/${course._id}`);
              if (courseResponse.ok) {
                const courseData = await courseResponse.json();
                await syncToMiniCourse(courseData);
                console.log(`ƒê√£ ƒë·ªìng b·ªô minicourse cho kh√≥a h·ªçc ${course._id} sau khi x·ª≠ l√Ω PDF`);
              }
            } catch (syncError) {
              console.error(`L·ªói khi ƒë·ªìng b·ªô minicourse cho kh√≥a h·ªçc ${course._id}:`, syncError);
            }
          
            return {
              courseId: course._id,
              courseName: course.name,
              success: true,
              summary: data.summary
            };
          } catch (fetchError) {
            throw fetchError;
          } finally {
            clearTimeout(timeoutId);
          }
          
        } catch (err) {
          console.error(`L·ªói khi x·ª≠ l√Ω PDF cho kh√≥a h·ªçc ${course.name}:`, err);
          
          // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω xong cho kh√≥a h·ªçc n√†y (d√π b·ªã l·ªói)
          setProcessingPDFCourses(prev => ({ ...prev, [course._id]: false }));
          
          return {
            courseId: course._id,
            courseName: course.name,
            success: false,
            error: err.message
          };
        }
      });
      
      // Ch·ªù t·∫•t c·∫£ c√°c promise ho√†n th√†nh
      const results = await Promise.all(processPromises);
      
      // T√≠nh to√°n t·ªïng k·∫øt qu·∫£
      const summary = results.reduce((acc, result) => {
        return {
          total: acc.total + 1,
          success: acc.success + (result.success ? 1 : 0),
          errors: acc.errors + (result.success ? 0 : 1)
        };
      }, { total: 0, success: 0, errors: 0 });
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω
      setProcessResult({
        success: summary.errors === 0,
        message: `ƒê√£ x·ª≠ l√Ω ${summary.total} kh√≥a h·ªçc: ${summary.success} th√†nh c√¥ng, ${summary.errors} l·ªói`,
        summary: summary,
        details: results
      });
      
      // T·∫£i l·∫°i danh s√°ch kh√≥a h·ªçc
      await fetchCourses();
      
    } catch (err) {
      console.error('L·ªói khi x·ª≠ l√Ω t·∫•t c·∫£ file PDF:', err);
      setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file PDF');
      setProcessResult({
        success: false,
        message: `L·ªói: ${err.message}`,
        summary: {
          total: 0,
          success: 0,
          errors: 1
        }
      });
    } finally {
      setProcessingPDFs(false);
    }
  };

  // H√†m x·ª≠ l√Ω PDF cho m·ªôt kh√≥a h·ªçc c·ª• th·ªÉ
  const handleProcessPDF = async (courseId) => {
    try {
      setProcessingPDFCourses(prev => ({ ...prev, [courseId]: true }));
      setError(null);
      
      // G·ªçi API ƒë·ªÉ x·ª≠ l√Ω PDF cho kh√≥a h·ªçc c·ª• th·ªÉ
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15 * 60 * 1000); // 15 ph√∫t
      
      try {
        // Th√™m retry logic
        let retryCount = 0;
        const maxRetries = 2;
        let response = null;
        
        while (retryCount <= maxRetries) {
          try {
            console.log(`Th·ª≠ g·ªçi API x·ª≠ l√Ω PDF l·∫ßn ${retryCount + 1} cho kh√≥a h·ªçc ${courseId}`);
            response = await fetch(`/api/courses/${courseId}/process-all-drive`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              signal: controller.signal,
              timeout: 15 * 60 * 1000 // 15 ph√∫t
            });
            
            // N·∫øu fetch th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
            break;
          } catch (fetchError) {
            retryCount++;
            
            // N·∫øu ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i ho·∫∑c l·ªói kh√¥ng ph·∫£i timeout, throw l·ªói
            if (retryCount > maxRetries || 
               (fetchError.name !== 'AbortError' && 
                !fetchError.message.includes('timeout') && 
                !fetchError.message.includes('Headers Timeout Error'))) {
              throw fetchError;
            }
            
            // ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
            console.log(`L·ªói fetch: ${fetchError.message}. Th·ª≠ l·∫°i sau 5 gi√¢y...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
          }
        }
        
        clearTimeout(timeoutId); // X√≥a timeout n·∫øu fetch ho√†n th√†nh
        
        if (!response) {
          throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API sau nhi·ªÅu l·∫ßn th·ª≠');
        }
      
        const data = await response.json();
      
        if (!response.ok) {
          throw new Error(data.message || data.error || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF');
        }
      
        // Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω
        setProcessResult({
          success: true,
          message: 'X·ª≠ l√Ω file PDF th√†nh c√¥ng',
          summary: data.summary
        });
      
        // T·∫£i l·∫°i danh s√°ch kh√≥a h·ªçc
        await fetchCourses();
        
        // ƒê·ªìng b·ªô v·ªõi minicourse sau khi x·ª≠ l√Ω PDF
        try {
          const courseResponse = await fetch(`/api/admin/courses/${courseId}`);
          if (courseResponse.ok) {
            const courseData = await courseResponse.json();
            await syncToMiniCourse(courseData);
            console.log(`ƒê√£ ƒë·ªìng b·ªô minicourse cho kh√≥a h·ªçc ${courseId} sau khi x·ª≠ l√Ω PDF`);
          }
        } catch (syncError) {
          console.error(`L·ªói khi ƒë·ªìng b·ªô minicourse cho kh√≥a h·ªçc ${courseId}:`, syncError);
        }
      } catch (fetchError) {
        throw fetchError;
      } finally {
        clearTimeout(timeoutId);
      }
      
    } catch (err) {
      console.error('L·ªói khi x·ª≠ l√Ω file PDF:', err);
      setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file PDF');
      setProcessResult({
        success: false,
        message: `L·ªói: ${err.message}`,
        summary: {
          total: 0,
          success: 0,
          errors: 1
        }
      });
    } finally {
      setProcessingPDFCourses(prev => ({ ...prev, [courseId]: false }));
    }
  };

  // Handler removed: handleAutoSyncAllCourses

  // Handler removed: handleStopAutoSync

  // H√†m x·ª≠ l√Ω t·∫•t c·∫£ kh√≥a h·ªçc tu·∫ßn t·ª±
  const handleProcessAllCourses = async () => {
    try {
      // L·ªçc ra c√°c kh√≥a h·ªçc c√≥ kimvanId
      const coursesWithKimvanId = courses.filter(course => course.kimvanId);
      
      if (coursesWithKimvanId.length === 0) {
        alert('Kh√¥ng c√≥ kh√≥a h·ªçc n√†o c√≥ ID Kimvan ƒë·ªÉ x·ª≠ l√Ω');
        return;
      }
      
      if (!window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x·ª≠ l√Ω t·∫•t c·∫£ ${coursesWithKimvanId.length} kh√≥a h·ªçc tu·∫ßn t·ª±? Qu√° tr√¨nh n√†y s·∫Ω m·∫•t nhi·ªÅu th·ªùi gian.`)) {
        return;
      }
      
      setProcessingData(true);
      // Kh·ªüi t·∫°o k·∫øt qu·∫£ x·ª≠ l√Ω
      const results = {
        inProgress: true,
        success: true,
        message: `ƒêang b·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${coursesWithKimvanId.length} kh√≥a h·ªçc...`,
        details: [],
        errors: []
      };
      setProcessResult(results);
      
      // H√†m ƒë·ªá quy ƒë·ªÉ x·ª≠ l√Ω t·ª´ng kh√≥a h·ªçc m·ªôt v·ªõi ƒë·ªô tr·ªÖ
      const processNextCourse = async (index) => {
        if (index >= coursesWithKimvanId.length) {
          // ƒê√£ ho√†n th√†nh t·∫•t c·∫£
          setProcessingData(false);
          setProcessResult({
            inProgress: false,
            success: results.errors.length === 0,
            message: `ƒê√£ ho√†n th√†nh x·ª≠ l√Ω ${results.details.length} kh√≥a h·ªçc, c√≥ ${results.errors.length} l·ªói`,
            details: results.details,
            errors: results.errors
          });
          return;
        }
        
        const currentCourse = coursesWithKimvanId[index];
        
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        setProcessResult({
          inProgress: true,
          success: true,
          message: `ƒêang x·ª≠ l√Ω kh√≥a h·ªçc ${index + 1}/${coursesWithKimvanId.length}: ${currentCourse.name}`,
          details: results.details,
          errors: results.errors
        });
        
        try {
          console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω kh√≥a h·ªçc ${index + 1}/${coursesWithKimvanId.length}: ${currentCourse.name}`);
          
          // G·ªçi API ƒë·ªÉ x·ª≠ l√Ω kh√≥a h·ªçc - s·ª≠ d·ª•ng URL tuy·ªát ƒë·ªëi
          const baseUrl = window.location.origin;
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 gi√¢y timeout
          
          try {
            const response = await fetch(`${baseUrl}/api/courses/${currentCourse._id}/process-all-sheets`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            const data = await response.json();
            
            if (!response.ok) {
              throw new Error(data.message || `Kh√¥ng th·ªÉ x·ª≠ l√Ω kh√≥a h·ªçc ${currentCourse.name}`);
            }
            
            console.log(`‚úÖ X·ª≠ l√Ω kh√≥a h·ªçc ${currentCourse.name} th√†nh c√¥ng`);
            
            // ƒê·ªìng b·ªô v·ªõi minicourse sau khi x·ª≠ l√Ω
            try {
              const courseResponse = await fetch(`${baseUrl}/api/admin/courses/${currentCourse._id}`);
              if (courseResponse.ok) {
                const courseData = await courseResponse.json();
                await syncToMiniCourse(courseData);
                console.log(`ƒê√£ ƒë·ªìng b·ªô minicourse cho kh√≥a h·ªçc ${currentCourse._id} sau khi x·ª≠ l√Ω`);
              }
            } catch (syncError) {
              console.error(`L·ªói khi ƒë·ªìng b·ªô minicourse cho kh√≥a h·ªçc ${currentCourse._id}:`, syncError);
            }
            
            // Th√™m k·∫øt qu·∫£ th√†nh c√¥ng
            results.details.push({
              courseId: currentCourse._id, 
              courseName: currentCourse.name,
              message: 'X·ª≠ l√Ω th√†nh c√¥ng',
              timestamp: new Date().toISOString()
            });
          } catch (apiErr) {
            console.error(`‚ùå L·ªói khi g·ªçi API x·ª≠ l√Ω kh√≥a h·ªçc ${currentCourse.name}:`, apiErr);
            
            // Th√™m k·∫øt qu·∫£ l·ªói
            const errorMessage = apiErr.name === 'AbortError' 
              ? 'Qu√° th·ªùi gian ch·ªù - y√™u c·∫ßu b·ªã h·ªßy sau 60 gi√¢y' 
              : (apiErr.message || 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω');
              
            results.errors.push({
              courseId: currentCourse._id, 
              courseName: currentCourse.name,
              message: errorMessage,
              timestamp: new Date().toISOString()
            });
          } finally {
            // ƒê·∫£m b·∫£o r·∫±ng timeout lu√¥n ƒë∆∞·ª£c x√≥a
            clearTimeout(timeoutId);
          }
          
        } catch (err) {
          console.error(`‚ùå L·ªói ngo·∫°i l·ªá khi x·ª≠ l√Ω kh√≥a h·ªçc ${currentCourse.name}:`, err);
          
          results.errors.push({
            courseId: currentCourse._id, 
            courseName: currentCourse.name,
            message: 'L·ªói kh√¥ng mong ƒë·ª£i: ' + (err.message || 'Kh√¥ng x√°c ƒë·ªãnh'),
            timestamp: new Date().toISOString()
          });
        } finally {
          // ƒê·ª£i 10 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω kh√≥a h·ªçc ti·∫øp theo
          console.log(`‚è±Ô∏è ƒê·ª£i 10 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω kh√≥a h·ªçc ti·∫øp theo...`);
          setTimeout(() => {
            processNextCourse(index + 1);
          }, 10000); // 10000ms = 10 gi√¢y
        }
      };
      
      // B·∫Øt ƒë·∫ßu quy tr√¨nh x·ª≠ l√Ω v·ªõi kh√≥a h·ªçc ƒë·∫ßu ti√™n
      processNextCourse(0);
      
    } catch (err) {
      console.error('L·ªói khi kh·ªüi t·∫°o x·ª≠ l√Ω t·ª± ƒë·ªông:', err);
      setProcessResult({
        inProgress: false,
        success: false,
        message: err.message || 'ƒê√£ x·∫£y ra l·ªói khi kh·ªüi t·∫°o x·ª≠ l√Ω t·ª± ƒë·ªông',
        details: [],
        errors: [{ message: err.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh' }]
      });
      setProcessingData(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-semibold text-gray-900">Qu·∫£n l√Ω kh√≥a h·ªçc</h1>
        <div className="flex space-x-4">
          
          <button
            onClick={handleProcessAllCourses}
            disabled={processingData || processingPDFs}
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 disabled:opacity-50"
          >
            <AdjustmentsHorizontalIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
            {processingData ? 'ƒêang x·ª≠ l√Ω...' : 'X·ª≠ l√Ω t·∫•t c·∫£ kh√≥a h·ªçc'}
          </button>
          
          <button
            onClick={handleProcessAllPDFs}
            disabled={processingPDFs}
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50"
          >
            <ArrowDownTrayIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
            {processingPDFs ? 'ƒêang x·ª≠ l√Ω PDF...' : 'X·ª≠ l√Ω t·∫•t c·∫£ PDF'}
          </button>
          {/* N√∫t x·ª≠ l√Ω d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a */}
          <button
            onClick={() => {
              setCurrentCourse({
                _id: null,
                name: '',
                description: '',
                price: 0,
                status: 'active',
              });
              setShowModal(true);
            }}
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <PlusIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
            Th√™m kh√≥a h·ªçc
          </button>
        </div>
      </div>

      {/* Notification area for initialization removed */}

      {/* Notification area for sync results removed */}

      {processResult && (
        <div className={`bg-${processResult.success ? 'blue' : 'red'}-50 p-4 rounded-md mb-4`}>
          <div className="flex">
            <div className="flex-shrink-0">
              {processResult.success ? (
                <CheckCircleIcon className="h-5 w-5 text-blue-400" aria-hidden="true" />
              ) : (
                <ExclamationCircleIcon className="h-5 w-5 text-red-400" aria-hidden="true" />
              )}
            </div>
            <div className="ml-3">
              <h3 className={`text-sm font-medium text-${processResult.success ? 'blue' : 'red'}-800`}>
                {processResult.success ? 'X·ª≠ l√Ω d·ªØ li·ªáu th√†nh c√¥ng' : 'X·ª≠ l√Ω d·ªØ li·ªáu th·∫•t b·∫°i'}
              </h3>
              <div className={`mt-2 text-sm text-${processResult.success ? 'blue' : 'red'}-700`}>
                <p>{processResult.message}</p>
                {processResult.success && processResult.summary && (
                  <>
                    <p>T·ªïng s·ªë kh√≥a h·ªçc ƒë√£ x·ª≠ l√Ω: {processResult.summary.total}</p>
                    <p>S·ªë kh√≥a h·ªçc c·∫≠p nh·∫≠t th√†nh c√¥ng: {processResult.summary.success}</p>
                    <p>S·ªë kh√≥a h·ªçc b·ªã l·ªói: {processResult.summary.errors}</p>
                  </>
                )}
              </div>
              <div className="mt-4">
                <div className="-mx-2 -my-1.5 flex">
                  <button
                    type="button"
                    onClick={() => setProcessResult(null)}
                    className={`bg-${processResult.success ? 'blue' : 'red'}-50 px-2 py-1.5 rounded-md text-sm font-medium text-${processResult.success ? 'blue' : 'red'}-800 hover:bg-${processResult.success ? 'blue' : 'red'}-100`}
                  >
                    ƒê√≥ng
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="bg-white shadow rounded-lg">
        <div className="px-4 py-5 sm:p-6">
          <div className="mb-4">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm kh√≥a h·ªçc..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>

          {error && (
            <div className="bg-red-50 p-4 mb-4 rounded-md">
              <div className="flex">
                <div className="flex-shrink-0">
                  <ExclamationCircleIcon className="h-5 w-5 text-red-400" aria-hidden="true" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">
                    ƒê√£ x·∫£y ra l·ªói
                  </h3>
                  <div className="mt-2 text-sm text-red-700">
                    <p>{error}</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {loading ? (
            <div className="text-center py-10">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-600 mb-2"></div>
              <p className="text-gray-500">ƒêang t·∫£i d·ªØ li·ªáu...</p>
            </div>
          ) : !hasMongoConnection ? (
            <div className="bg-gray-50 p-8 rounded-md text-center">
              <ExclamationCircleIcon className="h-12 w-12 text-red-400 mx-auto mb-4" aria-hidden="true" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu</h3>
              <p className="text-sm text-gray-500 mb-4">
                Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu MongoDB. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu.
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              {filteredCourses.length > 0 ? (
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        <input
                          type="checkbox"
                          onChange={handleSelectAllCourses}
                          checked={selectedCourses.length === courses.length && courses.length > 0}
                          className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                        />
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">T√™n kh√≥a h·ªçc</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ng√†y ch·ªânh s·ª≠a</th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredCourses.map((course) => (
                      <tr key={course._id}>
                        <td className="px-2 py-4 whitespace-nowrap">
                          <input
                            type="checkbox"
                            checked={selectedCourses.includes(course._id)}
                            onChange={(e) => handleSelectCourse(course._id, e.target.checked)}
                            className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                          />
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          <button 
                            onClick={() => router.push(`/admin/courses/${course._id}`)}
                            className="text-left hover:text-indigo-600 hover:underline cursor-pointer"
                          >
                            {course.name}
                          </button>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {course.updatedAt 
                            ? new Date(course.updatedAt).toLocaleDateString('vi-VN') + ' ' + new Date(course.updatedAt).toLocaleTimeString('vi-VN')
                            : new Date(course.createdAt).toLocaleDateString('vi-VN')}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={() => handleEdit(course)}
                            className="text-indigo-600 hover:text-indigo-900 mr-2"
                            title="Ch·ªânh s·ª≠a kh√≥a h·ªçc"
                          >
                            <PencilIcon className="h-5 w-5" />
                          </button>
                          {course.kimvanId && (
                            <>
                              <button
                                onClick={() => handleViewOriginalData(course._id)}
                                className="text-yellow-600 hover:text-yellow-900 mr-2"
                                title="Xem d·ªØ li·ªáu g·ªëc"
                              >
                                <CloudArrowDownIcon className="h-5 w-5" />
                              </button>
                              {/* Sync button removed */}
                            </>
                          )}
                          <button
                            onClick={() => handleDelete(course._id)}
                            className="text-red-600 hover:text-red-900"
                            title="X√≥a kh√≥a h·ªçc"
                          >
                            <TrashIcon className="h-5 w-5" />
                          </button>
                          <button
                            onClick={() => handleProcessPDF(course._id)}
                            disabled={processingPDFCourses[course._id]}
                            className={`text-purple-600 hover:text-purple-900 ml-2 ${processingPDFCourses[course._id] ? 'opacity-50 cursor-not-allowed' : ''}`}
                            title="X·ª≠ l√Ω PDF c·ªßa kh√≥a h·ªçc n√†y"
                          >
                            <ArrowDownTrayIcon className={`h-5 w-5 ${processingPDFCourses[course._id] ? 'animate-spin' : ''}`} />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="text-center py-10">
                  <p className="text-gray-500">Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc n√†o</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Modal Th√™m/Ch·ªânh s·ª≠a kh√≥a h·ªçc */}
      {showModal && (
        <>
          {/* L·ªõp ph·ªß */}
          <div 
            className="fixed inset-0 bg-gray-500 bg-opacity-75 z-40 cursor-pointer" 
            onClick={handleCloseModal}
          ></div>
          
          {/* N·ªôi dung modal */}
          <div className="fixed z-50 inset-0 overflow-y-auto">
            <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
              <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full" onClick={(e) => e.stopPropagation()}>
                <form onSubmit={handleSave}>
                  <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                      {currentCourse._id ? 'Ch·ªânh s·ª≠a kh√≥a h·ªçc' : 'Th√™m kh√≥a h·ªçc m·ªõi'}
                    </h3>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700">T√™n kh√≥a h·ªçc</label>
                        <input
                          type="text"
                          value={currentCourse.name}
                          onChange={(e) => setCurrentCourse({ ...currentCourse, name: e.target.value })}
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">M√¥ t·∫£</label>
                        <textarea
                          value={currentCourse.description}
                          onChange={(e) => setCurrentCourse({ ...currentCourse, description: e.target.value })}
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          rows="3"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Gi√°</label>
                        <input
                          type="number"
                          value={currentCourse.price}
                          onChange={(e) => setCurrentCourse({ ...currentCourse, price: parseInt(e.target.value) })}
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Tr·∫°ng th√°i</label>
                        <select
                          value={currentCourse.status}
                          onChange={(e) => setCurrentCourse({ ...currentCourse, status: e.target.value })}
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        >
                          <option value="active">ƒêang ho·∫°t ƒë·ªông</option>
                          <option value="inactive">Ng·ª´ng ho·∫°t ƒë·ªông</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button
                      type="submit"
                      className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm"
                    >
                      L∆∞u
                    </button>
                    <button
                      type="button"
                      onClick={handleCloseModal}
                      className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                    >
                      H·ªßy
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </>
      )}

      {/* Modal for sync removed */}

      {/* Modal hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc */}
      {showOriginalDataModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">D·ªØ li·ªáu g·ªëc c·ªßa kh√≥a h·ªçc</h3>
              <button
                onClick={() => setShowOriginalDataModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <XMarkIcon className="h-6 w-6" />
              </button>
            </div>
            
            <div className="mb-4">
              <button
                onClick={handleDownloadOriginalData}
                disabled={downloadingData || !originalData}
                className="bg-green-600 text-white px-4 py-2 rounded mr-2 hover:bg-green-700 disabled:opacity-50"
              >
                {downloadingData ? (
                  <span className="flex items-center">
                    <ArrowPathIcon className="h-4 w-4 animate-spin mr-2" />
                    ƒêang t·∫£i xu·ªëng...
                  </span>
                ) : (
                  <span className="flex items-center">
                    <ArrowDownTrayIcon className="h-4 w-4 mr-2" />
                    T·∫£i xu·ªëng d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
                  </span>
                )}
              </button>
              
              {downloadError && (
                <div className="text-red-500 mt-2">
                  <p>L·ªói khi t·∫£i xu·ªëng: {downloadError}</p>
                </div>
              )}
            </div>
            
            {loadingOriginalData ? (
              <div className="flex justify-center items-center py-20">
                <ArrowPathIcon className="h-8 w-8 animate-spin text-blue-500" />
                <span className="ml-2">ƒêang t·∫£i d·ªØ li·ªáu...</span>
              </div>
            ) : originalDataError ? (
              <div className="text-red-500 py-10 text-center">
                <p>ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu:</p>
                <p>{originalDataError}</p>
              </div>
            ) : originalData ? (
              <div className="bg-gray-100 p-4 rounded-md">
                <pre className="whitespace-pre-wrap overflow-auto max-h-[60vh]">
                  {JSON.stringify(originalData, null, 2)}
                </pre>
              </div>
            ) : (
              <div className="text-center py-10">
                <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Modal X·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a */}

      {/* Modal for sync confirmation with data analysis removed */}
    </div>
  );
} 