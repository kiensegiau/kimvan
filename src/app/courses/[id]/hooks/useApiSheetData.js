import { useState, useEffect } from 'react';

// Constants for cache
const CACHE_DURATION = 12 * 60 * 60 * 1000; // 12 gi·ªù 
const MAX_CACHE_ITEMS = 5; // Gi·ªØ t·ªëi ƒëa 5 cache items

export function useApiSheetData(courseId) {
  const [apiSheetData, setApiSheetData] = useState(null);
  const [loadingApiSheet, setLoadingApiSheet] = useState(false);
  const [apiSheetError, setApiSheetError] = useState(null);
  const [activeApiSheet, setActiveApiSheet] = useState(0);
  const [cacheStatus, setCacheStatus] = useState('');
  
  // H√†m l∆∞u d·ªØ li·ªáu v√†o cache
  const saveSheetListToCache = (data) => {
    try {
      // Check if running in browser environment
      if (typeof window === 'undefined') return;
      
      // T·∫°o ƒë·ªëi t∆∞·ª£ng cache v·ªõi d·ªØ li·ªáu v√† th·ªùi gian
      const cacheItem = {
        data: data,
        timestamp: Date.now()
      };
      
      // L∆∞u d·ªØ li·ªáu sheet v√†o cache
      const cacheKey = `sheet-list-${courseId}`;
      localStorage.setItem(cacheKey, JSON.stringify(cacheItem));
      
      // D·ªçn d·∫πp cache c≈©
      cleanupOldCaches();
      
      setCacheStatus('saved-list');
    } catch (error) {
      console.error('L·ªói khi l∆∞u cache sheet list:', error);
    }
  };
  
  // H√†m l∆∞u d·ªØ li·ªáu chi ti·∫øt sheet v√†o cache
  const saveSheetDetailToCache = (sheetId, data) => {
    try {
      // Check if running in browser environment
      if (typeof window === 'undefined') return;
      
      // T·∫°o ƒë·ªëi t∆∞·ª£ng cache v·ªõi d·ªØ li·ªáu v√† th·ªùi gian
      const cacheItem = {
        data: data,
        timestamp: Date.now()
      };
      
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u
      try {
        const jsonData = JSON.stringify(cacheItem);
        const dataSize = new Blob([jsonData]).size;
        
        // N·∫øu d·ªØ li·ªáu qu√° l·ªõn (> 1MB), kh√¥ng l∆∞u cache
        if (dataSize > 1024 * 1024) {
          return;
        }
        
        // L∆∞u d·ªØ li·ªáu chi ti·∫øt sheet v√†o cache n·∫øu ƒë·ªß nh·ªè
        const cacheKey = `sheet-detail-${sheetId}`;
        localStorage.setItem(cacheKey, jsonData);
        setCacheStatus(`saved-detail-${sheetId}`);
      } catch (storageError) {
        // N·∫øu g·∫∑p l·ªói storage, b·ªè qua vi·ªác l∆∞u cache
      }
    } catch (error) {
      console.error('L·ªói khi l∆∞u cache sheet detail:', error);
    }
  };
  
  // H√†m l·∫•y d·ªØ li·ªáu danh s√°ch sheet t·ª´ cache
  const getSheetListFromCache = () => {
    try {
      // Check if running in browser environment
      if (typeof window === 'undefined') return null;
      
      const cacheKey = `sheet-list-${courseId}`;
      const cachedData = localStorage.getItem(cacheKey);
      if (!cachedData) return null;
      
      const cacheItem = JSON.parse(cachedData);
      const now = Date.now();
      
      // Ki·ªÉm tra xem cache c√≥ c√≤n hi·ªáu l·ª±c kh√¥ng
      if (now - cacheItem.timestamp > CACHE_DURATION) {
        localStorage.removeItem(cacheKey);
        setCacheStatus('expired-list');
        return null;
      }
      
      setCacheStatus('hit-list');
      return cacheItem.data;
    } catch (error) {
      console.error('L·ªói khi ƒë·ªçc cache danh s√°ch sheet:', error);
      return null;
    }
  };
  
  // H√†m l·∫•y d·ªØ li·ªáu chi ti·∫øt sheet t·ª´ cache
  const getSheetDetailFromCache = (sheetId) => {
    try {
      // Check if running in browser environment
      if (typeof window === 'undefined') return null;
      
      const cacheKey = `sheet-detail-${sheetId}`;
      const cachedData = localStorage.getItem(cacheKey);
      if (!cachedData) return null;
      
      try {
        const cacheItem = JSON.parse(cachedData);
        const now = Date.now();
        
        // Ki·ªÉm tra xem cache c√≥ c√≤n hi·ªáu l·ª±c kh√¥ng
        if (now - cacheItem.timestamp > CACHE_DURATION) {
          localStorage.removeItem(cacheKey);
          setCacheStatus(`expired-detail-${sheetId}`);
          return null;
        }
        
        setCacheStatus(`hit-detail-${sheetId}`);
        return cacheItem.data;
      } catch (parseError) {
        // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, x√≥a cache l·ªói
        localStorage.removeItem(cacheKey);
        return null;
      }
    } catch (error) {
      console.error('L·ªói khi ƒë·ªçc cache chi ti·∫øt sheet:', error);
      return null;
    }
  };
  
  // H√†m d·ªçn d·∫πp c√°c cache c≈©
  const cleanupOldCaches = () => {
    try {
      // Check if running in browser environment
      if (typeof window === 'undefined') return;
      
      // L·∫•y t·∫•t c·∫£ keys trong localStorage
      const keys = Object.keys(localStorage);
      
      // L·ªçc c√°c key li√™n quan ƒë·∫øn cache sheet
      const sheetListCacheKeys = keys.filter(key => key.startsWith('sheet-list-'));
      const sheetDetailCacheKeys = keys.filter(key => key.startsWith('sheet-detail-'));
      
      // X·ª≠ l√Ω cache danh s√°ch sheet
      if (sheetListCacheKeys.length > MAX_CACHE_ITEMS) {
        const cacheItems = [];
        
        for (const key of sheetListCacheKeys) {
          try {
            const item = JSON.parse(localStorage.getItem(key));
            if (item && item.timestamp) {
              cacheItems.push({ key, timestamp: item.timestamp });
            }
          } catch (e) {
            localStorage.removeItem(key);
          }
        }
        
        cacheItems.sort((a, b) => a.timestamp - b.timestamp);
        
        for (let i = 0; i < cacheItems.length - MAX_CACHE_ITEMS; i++) {
          localStorage.removeItem(cacheItems[i].key);
        }
      }
      
      // X·ª≠ l√Ω cache chi ti·∫øt sheet
      if (sheetDetailCacheKeys.length > MAX_CACHE_ITEMS * 3) { // Cho ph√©p nhi·ªÅu cache chi ti·∫øt h∆°n
        const cacheItems = [];
        
        for (const key of sheetDetailCacheKeys) {
          try {
            const item = JSON.parse(localStorage.getItem(key));
            if (item && item.timestamp) {
              cacheItems.push({ key, timestamp: item.timestamp });
            }
          } catch (e) {
            localStorage.removeItem(key);
          }
        }
        
        cacheItems.sort((a, b) => a.timestamp - b.timestamp);
        
        for (let i = 0; i < cacheItems.length - (MAX_CACHE_ITEMS * 3); i++) {
          localStorage.removeItem(cacheItems[i].key);
        }
      }
    } catch (e) {
      // X·ª≠ l√Ω l·ªói im l·∫∑ng
    }
  };
  
  // H√†m x√≥a cache hi·ªán t·∫°i
  const clearCurrentCache = () => {
    try {
      // Check if running in browser environment
      if (typeof window === 'undefined') return;
      
      const listCacheKey = `sheet-list-${courseId}`;
      localStorage.removeItem(listCacheKey);
      
      // X√≥a chi ti·∫øt c·ªßa sheet ƒë√£ ƒë∆∞·ª£c t·∫£i
      if (apiSheetData && apiSheetData.sheets) {
        apiSheetData.sheets.forEach(sheet => {
          const detailCacheKey = `sheet-detail-${sheet._id}`;
          localStorage.removeItem(detailCacheKey);
        });
      }
      
      setCacheStatus('cleared');
    } catch (error) {
      console.error('L·ªói khi x√≥a cache:', error);
    }
  };
  
  // H√†m x√≥a t·∫•t c·∫£ cache li√™n quan ƒë·∫øn sheet
  const clearAllSheetCaches = () => {
    try {
      const keys = Object.keys(localStorage);
      keys.forEach(key => {
        if (key.startsWith('sheet-list-') || key.startsWith('sheet-detail-')) {
          localStorage.removeItem(key);
        }
      });
    } catch (e) {
      console.error('L·ªói khi x√≥a t·∫•t c·∫£ cache sheet:', e);
    }
  };
  
  // H√†m x·ª≠ l√Ω d·ªØ li·ªáu sheet v√†o database
  const processSheetToDb = async (sheetId) => {
    try {
      console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω sheet ${sheetId} v√†o database...`);
      
      const response = await fetch(`/api/sheets/${sheetId}/process-to-db`, {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ background: false })
      });
      
      if (!response.ok) {
        throw new Error(`L·ªói ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log(`‚úÖ K·∫øt qu·∫£ x·ª≠ l√Ω sheet ${sheetId}:`, result);
      return result.success;
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu sheet:', error);
      return false;
    }
  };

  // H√†m l·∫•y d·ªØ li·ªáu sheet t·ª´ database
  const fetchSheetFromDb = async (sheetId) => {
    try {
      console.log(`üîç ƒêang l·∫•y d·ªØ li·ªáu sheet ${sheetId} t·ª´ database...`);
      
      const response = await fetch(`/api/sheets/${sheetId}/from-db`, {
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`L·ªói ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log(`üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ database cho sheet ${sheetId}:`, result);
      
      if (result.success) {
        console.log(`‚úÖ D·ªØ li·ªáu sheet ${sheetId}:`, {
          totalRows: result.sheet.values?.length || 0,
          hasHtmlData: !!result.sheet.htmlData,
          hasOptimizedData: !!result.sheet.optimizedHtmlData,
          storageMode: result.sheet.storageMode
        });
        return result.sheet;
      } else if (result.needsFallback) {
        console.log(`‚ö†Ô∏è Sheet ${sheetId} c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω v√†o database`);
        // N·∫øu c·∫ßn x·ª≠ l√Ω d·ªØ li·ªáu
        const processed = await processSheetToDb(sheetId);
        if (processed) {
          console.log(`üîÑ Th·ª≠ l·∫•y l·∫°i d·ªØ li·ªáu sau khi x·ª≠ l√Ω cho sheet ${sheetId}`);
          // Th·ª≠ l·∫•y l·∫°i d·ªØ li·ªáu sau khi x·ª≠ l√Ω
          return await fetchSheetFromDb(sheetId);
        }
      }
      
      throw new Error(result.error || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu sheet');
    } catch (error) {
      console.error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu sheet ${sheetId}:`, error);
      throw error;
    }
  };

  // H√†m l·∫•y chi ti·∫øt c·ªßa m·ªôt sheet
  const fetchSheetDetail = async (sheetId) => {
    if (!sheetId) return;
    
    try {
      console.log(`üîç B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt sheet ${sheetId}...`);
      
      // Th·ª≠ l·∫•y t·ª´ cache tr∆∞·ªõc
      const cachedData = getSheetDetailFromCache(sheetId);
      if (cachedData) {
        console.log(`üì¶ S·ª≠ d·ª•ng d·ªØ li·ªáu cache cho sheet ${sheetId}`);
        return cachedData;
      }
      
      // L·∫•y d·ªØ li·ªáu t·ª´ database
      const sheetData = await fetchSheetFromDb(sheetId);
      
      // L∆∞u v√†o cache
      saveSheetDetailToCache(sheetId, sheetData);
      console.log(`üíæ ƒê√£ l∆∞u d·ªØ li·ªáu sheet ${sheetId} v√†o cache`);
      
      // C·∫≠p nh·∫≠t d·ªØ li·ªáu sheet trong state
      setApiSheetData(prevData => {
        if (!prevData || !prevData.sheets) return prevData;
        
        const updatedSheets = prevData.sheets.map(sheet => {
          if (sheet._id === sheetId) {
            return { ...sheet, detail: sheetData };
          }
          return sheet;
        });
        
        return { ...prevData, sheets: updatedSheets };
      });
      
      return sheetData;
    } catch (error) {
      console.error(`‚ùå L·ªói khi l·∫•y chi ti·∫øt sheet ${sheetId}:`, error);
      throw error;
    }
  };
  
  // H√†m l·∫•y d·ªØ li·ªáu sheet t·ª´ API
  const fetchApiSheetData = async () => {
    if (!courseId) return;
    
    setLoadingApiSheet(true);
    setApiSheetError(null);
    
    try {
      console.log(`üîç B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch sheets cho kh√≥a h·ªçc ${courseId}...`);
      
      // Th·ª≠ l·∫•y t·ª´ cache tr∆∞·ªõc
      const cachedData = getSheetListFromCache();
      if (cachedData) {
        console.log(`üì¶ S·ª≠ d·ª•ng danh s√°ch sheets t·ª´ cache`);
        setApiSheetData(cachedData);
        return;
      }
      
      // L·∫•y danh s√°ch sheets
      const response = await fetch(`/api/courses/${courseId}/sheets`, {
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`L·ªói ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      
      if (result.success) {
        console.log(`üì• Danh s√°ch sheets nh·∫≠n ƒë∆∞·ª£c:`, {
          totalSheets: result.sheets?.length || 0,
          sheets: result.sheets?.map(s => ({
            id: s._id,
            name: s.name
          }))
        });
        
        // L∆∞u v√†o cache
        saveSheetListToCache(result);
        console.log(`üíæ ƒê√£ l∆∞u danh s√°ch sheets v√†o cache`);
        
        // C·∫≠p nh·∫≠t state
        setApiSheetData(result);
        
        // N·∫øu c√≥ sheets, l·∫•y chi ti·∫øt c·ªßa sheet ƒë·∫ßu ti√™n
        if (result.sheets && result.sheets.length > 0) {
          console.log(`üîÑ L·∫•y chi ti·∫øt c·ªßa sheet ƒë·∫ßu ti√™n:`, result.sheets[0]._id);
          await fetchSheetDetail(result.sheets[0]._id);
        }
      } else {
        setApiSheetError(result.error || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu sheet');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu sheet:', error);
      setApiSheetError(error.message);
    } finally {
      setLoadingApiSheet(false);
    }
  };
  
  // H√†m chuy·ªÉn ƒë·ªïi sheet active
  const changeActiveSheet = async (index) => {
    setActiveApiSheet(index);
    
    // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu sheet
    if (apiSheetData && apiSheetData.sheets && apiSheetData.sheets[index]) {
      const sheet = apiSheetData.sheets[index];
      
      // N·∫øu ch∆∞a c√≥ chi ti·∫øt, l·∫•y chi ti·∫øt
      if (!sheet.detail) {
        await fetchSheetDetail(sheet._id);
      }
    } else {
      setApiSheetError("Kh√¥ng th·ªÉ chuy·ªÉn sheet: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu sheet ho·∫∑c index kh√¥ng h·ª£p l·ªá");
    }
  };
  
  // L·∫•y d·ªØ li·ªáu ban ƒë·∫ßu khi component mount
  useEffect(() => {
    if (courseId) {
      fetchApiSheetData();
    }
  }, [courseId]);
  
  return {
    apiSheetData,
    loadingApiSheet,
    apiSheetError,
    activeApiSheet,
    cacheStatus,
    setActiveApiSheet: changeActiveSheet,
    fetchApiSheetData,
    fetchSheetDetail,
    clearCache: clearCurrentCache,
    clearAllSheetCaches
  };
} 