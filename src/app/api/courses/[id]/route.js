import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { ObjectId } from 'mongodb';
import CryptoJS from 'crypto-js';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { connectDB } from '@/lib/mongodb';
import Enrollment from '@/models/Enrollment';
import { authMiddleware } from '@/lib/auth';

// Kh√≥a m√£ h√≥a - ph·∫£i gi·ªëng v·ªõi kh√≥a ·ªü ph√≠a client
const ENCRYPTION_KEY = 'kimvan-secure-key-2024';

// H√†m m√£ h√≥a d·ªØ li·ªáu v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
const encryptData = (data) => {
  try {
    if (!data) {
      throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√£ h√≥a");
    }
    
    const jsonString = JSON.stringify(data);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a d·ªØ li·ªáu: ${error.message}`);
  }
};

// H√†m m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng
const encryptEntireObject = (obj) => {
  try {
    const jsonString = JSON.stringify(obj);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a: ${error.message}`);
  }
};

// GET: L·∫•y m·ªôt kh√≥a h·ªçc theo ID
export async function GET(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const queryType = searchParams.get('type');
    const secure = searchParams.get('secure') === 'true';
    const responseType = queryType || 'full';
    
    let query = {};
    
    // Truy v·∫•n theo lo·∫°i ID - ∆∞u ti√™n kimvanId tr∆∞·ªõc
    if (queryType === '_id') {
      // Truy v·∫•n theo MongoDB _id 
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      query = { _id: new ObjectId(id) };
    } else {
      // Truy v·∫•n theo kimvanId
      query = { kimvanId: id };
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ t√¨m b·∫±ng _id
      const courseByKimvanId = await Course.findOne(query).lean().exec();
      if (!courseByKimvanId && mongoose.Types.ObjectId.isValid(id)) {
        query = { _id: new ObjectId(id) };
      }
    }
    
    // T√¨m kh√≥a h·ªçc theo query ƒë√£ x√°c ƒë·ªãnh
    const course = await Course.findOne(query).lean().exec();
    
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Bypass authentication check - always return full course data
    const isEnrolled = true;
    const canViewAllCourses = true;
    
    // T·∫°o d·ªØ li·ªáu tr·∫£ v·ªÅ
    const responseData = {
      _id: course._id,
      name: course.name,
      description: course.description,
      price: course.price,
      originalPrice: course.originalPrice,
      status: course.status,
      kimvanId: course.kimvanId,
      spreadsheetId: course.spreadsheetId,
      createdAt: course.createdAt,
      updatedAt: course.updatedAt,
      processedDriveFiles: course.processedDriveFiles || [],
      isEnrolled: isEnrolled,
      canViewAllCourses: canViewAllCourses,
      originalData: course.originalData
    };
    
    // M√£ h√≥a d·ªØ li·ªáu n·∫øu y√™u c·∫ßu
    if (secure) {
      try {
        const encryptedData = encryptData(responseData);
        return NextResponse.json({ _secureData: encryptedData });
      } catch (encryptError) {
        console.error("L·ªói khi m√£ h√≥a d·ªØ li·ªáu:", encryptError);
        return NextResponse.json({ 
          error: 'L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc',
          message: encryptError.message 
        }, { status: 500 });
      }
    }
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a
    return NextResponse.json(responseData);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
}

// PUT: C·∫≠p nh·∫≠t m·ªôt kh√≥a h·ªçc
export async function PUT(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    if (!id) {
      return NextResponse.json(
        { message: 'Thi·∫øu ID kh√≥a h·ªçc' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type');
    
    let query = {};
    
    // Truy v·∫•n theo lo·∫°i ID - ∆∞u ti√™n kimvanId tr∆∞·ªõc
    if (type === '_id') {
      // Truy v·∫•n theo MongoDB _id 
      try {
        query = { _id: new ObjectId(id) };
      } catch (err) {
        return NextResponse.json(
          { message: 'ID kh√¥ng h·ª£p l·ªá' },
          { status: 400 }
        );
      }
    } else {
      // Truy v·∫•n theo kimvanId
      query = { kimvanId: id };
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ t√¨m b·∫±ng _id
      const course = await Course.findOne(query).lean().exec();
      if (!course) {
        try {
          if (mongoose.Types.ObjectId.isValid(id)) {
            query = { _id: new ObjectId(id) };
          }
        } catch (err) {
          // N·∫øu kh√¥ng ph·∫£i ObjectId h·ª£p l·ªá, gi·ªØ nguy√™n query kimvanId
        }
      }
    }
    
    const course = await Course.findOne(query).lean().exec();
    if (!course) {
      return NextResponse.json(
        { message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' },
        { status: 404 }
      );
    }
    
    const data = await request.json();
    
    // Lo·∫°i b·ªè tr∆∞·ªùng _id ƒë·ªÉ tr√°nh l·ªói khi c·∫≠p nh·∫≠t
    delete data._id;
    
    // Gi·ªØ nguy√™n d·ªØ li·ªáu g·ªëc
    data.originalData = course.originalData;
    
    const result = await Course.updateOne(
      query,
      { $set: data }
    );
    
    if (result.modifiedCount === 0) {
      return NextResponse.json(
        { message: 'Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t' },
        { status: 400 }
      );
    }
    
    return NextResponse.json({ 
      message: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
      success: true
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:', error);
    return NextResponse.json(
      { 
        message: 'L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc',
        error: error.message 
      },
      { status: 500 }
    );
  }
}

// DELETE: X√≥a m·ªôt kh√≥a h·ªçc
export async function DELETE(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type');
    
    let query = {};
    let result;
    
    // Truy v·∫•n theo lo·∫°i ID
    if (type === '_id') {
      // X√≥a theo MongoDB _id
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      result = await Course.deleteOne({ _id: new ObjectId(id) });
    } else {
      // Th·ª≠ x√≥a theo kimvanId tr∆∞·ªõc
      result = await Course.deleteOne({ kimvanId: id });
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ x√≥a b·∫±ng _id
      if (result.deletedCount === 0 && mongoose.Types.ObjectId.isValid(id)) {
        result = await Course.deleteOne({ _id: new ObjectId(id) });
      }
    }
    
    if (result.deletedCount === 0) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    return NextResponse.json(
      { 
        success: true,
        message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' 
      }, 
      { status: 200 }
    );
  } catch (error) {
    console.error('L·ªói khi x√≥a kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x√≥a kh√≥a h·ªçc. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.',
      error: error.message
    }, { status: 500 });
  }
}

// PATCH: ƒê·ªìng b·ªô m·ªôt kh√≥a h·ªçc t·ª´ Kimvan
export async function PATCH(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    console.log('üîÑ [PATCH] B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô kh√≥a h·ªçc v·ªõi ID:', id);
    
    // L·∫•y body request n·∫øu c√≥
    let requestBody = {};
    try {
      requestBody = await request.json();
      console.log('üìù [PATCH] D·ªØ li·ªáu t·ª´ request body:', JSON.stringify(requestBody));
    } catch (e) {
      console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ request body ho·∫∑c l·ªói parse JSON:', e.message);
    }
    
    // Ki·ªÉm tra ch·∫ø ƒë·ªô xem tr∆∞·ªõc
    const previewMode = requestBody.preview === true;
    console.log(`üîç [PATCH] Ch·∫ø ƒë·ªô xem tr∆∞·ªõc: ${previewMode ? 'B·∫≠t' : 'T·∫Øt'}`);
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    if (!id) {
      return NextResponse.json(
        { message: 'Thi·∫øu ID kh√≥a h·ªçc' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra xem kh√≥a h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
    console.log('üîç [PATCH] T√¨m ki·∫øm kh√≥a h·ªçc trong database v·ªõi kimvanId:', id);
    const existingCourse = await Course.findOne({ kimvanId: id }).lean().exec();
    if (!existingCourse) {
      console.log('‚ùå [PATCH] Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc v·ªõi kimvanId:', id);
      return NextResponse.json(
        { 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ ƒë·ªìng b·ªô' 
        },
        { status: 404 }
      );
    }
    
    console.log('‚úÖ [PATCH] ƒê√£ t√¨m th·∫•y kh√≥a h·ªçc:', existingCourse._id.toString());
    
    // L∆∞u danh s√°ch c√°c file ƒë√£ x·ª≠ l√Ω t·ª´ kh√≥a h·ªçc hi·ªán t·∫°i
    const processedFiles = existingCourse.processedDriveFiles || [];
    console.log(`üìä [PATCH] S·ªë l∆∞·ª£ng file ƒë√£ x·ª≠ l√Ω t·ª´ d·ªØ li·ªáu c≈©: ${processedFiles.length}`);
    
    // T·∫°o map t·ª´ c√°c file ƒë√£ x·ª≠ l√Ω ƒë·ªÉ tra c·ª©u nhanh
    const processedUrlMap = new Map();
    processedFiles.forEach(file => {
      processedUrlMap.set(file.originalUrl, file);
      console.log(`üîó [PATCH] ƒê√£ l∆∞u link ƒë√£ x·ª≠ l√Ω: ${file.originalUrl.substring(0, 50)}...`);
    });
    
    // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi t·ª´ Kimvan
    console.log(`üîÑ [PATCH] ƒêang g·ªçi API kimvan v·ªõi ID: ${id}`);
    const kimvanUrl = new URL(request.url);
    const origin = kimvanUrl.origin;
    const kimvanApiUrl = `${origin}/api/spreadsheets/${id}`;
    console.log(`üåê [PATCH] URL ƒë√≠ch: ${kimvanApiUrl}`);
    
    const kimvanResponse = await fetch(kimvanApiUrl);
    
    if (!kimvanResponse.ok) {
      console.log(`‚ùå [PATCH] L·ªói khi g·ªçi API: ${kimvanResponse.status}`);
      return NextResponse.json(
        { 
          success: false,
          message: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Kimvan API',
          error: `L·ªói: ${kimvanResponse.status}` 
        },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ [PATCH] ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ kimvan API th√†nh c√¥ng!');
    const kimvanData = await kimvanResponse.json();
    
    // ƒê·∫øm s·ªë l∆∞·ª£ng link trong d·ªØ li·ªáu m·ªõi
    let totalLinks = 0;
    let processedLinksInNewData = 0;
    
    // Ghi ƒë√® link ƒë√£ x·ª≠ l√Ω v√†o d·ªØ li·ªáu m·ªõi
    if (kimvanData.sheets && Array.isArray(kimvanData.sheets)) {
      console.log(`üìä [PATCH] S·ªë l∆∞·ª£ng sheets trong d·ªØ li·ªáu m·ªõi: ${kimvanData.sheets.length}`);
      
      kimvanData.sheets.forEach((sheet, sheetIndex) => {
        console.log(`üìù [PATCH] X·ª≠ l√Ω sheet ${sheetIndex + 1}: ${sheet?.properties?.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'}`);
        
        if (sheet.data && Array.isArray(sheet.data)) {
          sheet.data.forEach((sheetData, dataIndex) => {
            if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
              console.log(`üìä [PATCH] Sheet ${sheetIndex + 1}, Data ${dataIndex + 1}: ${sheetData.rowData.length} h√†ng`);
              
              sheetData.rowData.forEach((row, rowIndex) => {
                if (row.values && Array.isArray(row.values)) {
                  row.values.forEach((cell, cellIndex) => {
                    // Ki·ªÉm tra n·∫øu cell c√≥ link
                    const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || cell.hyperlink;
                    if (originalUrl) {
                      totalLinks++;
                      
                      // Ki·ªÉm tra n·∫øu link n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
                      if (processedUrlMap.has(originalUrl)) {
                        const processedFile = processedUrlMap.get(originalUrl);
                        processedLinksInNewData++;
                        
                        // Th√™m th√¥ng tin v·ªÅ file ƒë√£ x·ª≠ l√Ω v√†o cell
                        cell.processedUrl = processedFile.processedUrl;
                        cell.processedAt = processedFile.processedAt;
                        
                        console.log(`‚úÖ [PATCH] Sheet ${sheetIndex + 1}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: ƒê√£ √°p d·ª•ng link ƒë√£ x·ª≠ l√Ω`);
                        console.log(`   - Link g·ªëc: ${originalUrl.substring(0, 50)}...`);
                        console.log(`   - Link ƒë√£ x·ª≠ l√Ω: ${processedFile.processedUrl.substring(0, 50)}...`);
                      } else {
                        console.log(`‚ÑπÔ∏è [PATCH] Sheet ${sheetIndex + 1}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: Link ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω`);
                        console.log(`   - Link: ${originalUrl.substring(0, 50)}...`);
                      }
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
    
    console.log(`üìä [PATCH] T·ªïng s·ªë link trong d·ªØ li·ªáu m·ªõi: ${totalLinks}`);
    console.log(`üìä [PATCH] S·ªë link ƒë√£ x·ª≠ l√Ω ƒë∆∞·ª£c √°p d·ª•ng: ${processedLinksInNewData}`);
    
    // X·ª≠ l√Ω d·ªØ li·ªáu d·ª±a v√†o c·∫•u tr√∫c th·ª±c t·∫ø t·ª´ API
    let courseName = '';
    
    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu v√† l·∫•y t√™n kh√≥a h·ªçc
    if (kimvanData && typeof kimvanData === 'object') {
      if (kimvanData.name) {
        courseName = kimvanData.name;
      } else if (kimvanData.data && kimvanData.data.name) {
        courseName = kimvanData.data.name;
      } else if (Array.isArray(kimvanData) && kimvanData.length > 0 && kimvanData[0].name) {
        courseName = kimvanData[0].name;
      }
    }
    
    console.log('üìù [PATCH] T√™n kh√≥a h·ªçc ƒë∆∞·ª£c x√°c ƒë·ªãnh:', courseName || 'Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n');
    
    // T·∫°o document m·ªõi ƒë·ªÉ thay th·∫ø d·ªØ li·ªáu c≈©
    const newCourseData = {
      _id: existingCourse._id,
      kimvanId: existingCourse.kimvanId,
      name: courseName || existingCourse.name,
      description: courseName 
        ? `Kh√≥a h·ªçc ${courseName}` 
        : existingCourse.description,
      price: existingCourse.price || 500000,
      status: existingCourse.status || 'active',
      createdAt: existingCourse.createdAt || new Date(),
      updatedAt: new Date(),
      processedDriveFiles: processedFiles, // Gi·ªØ nguy√™n danh s√°ch file ƒë√£ x·ª≠ l√Ω
      originalData: kimvanData // D·ªØ li·ªáu m·ªõi ƒë√£ ƒë∆∞·ª£c ghi ƒë√® th√¥ng tin x·ª≠ l√Ω
    };
    
    // T·∫°o d·ªØ li·ªáu xem tr∆∞·ªõc ƒë·ªÉ tr·∫£ v·ªÅ client
    const previewData = {
      courseInfo: {
        name: newCourseData.name,
        description: newCourseData.description,
        price: newCourseData.price,
        status: newCourseData.status
      },
      stats: {
        totalLinks,
        processedLinks: processedLinksInNewData,
        totalSheets: kimvanData.sheets?.length || 0,
        preservedProcessedFiles: processedFiles.length
      },
      sampleSheet: kimvanData.sheets && kimvanData.sheets.length > 0 
        ? {
            title: kimvanData.sheets[0]?.properties?.title || 'Sheet 1',
            rowCount: kimvanData.sheets[0]?.data?.[0]?.rowData?.length || 0,
            firstFewRows: kimvanData.sheets[0]?.data?.[0]?.rowData?.slice(0, 5) || []
          }
        : null
    };
    
    // N·∫øu ·ªü ch·∫ø ƒë·ªô xem tr∆∞·ªõc, ch·ªâ tr·∫£ v·ªÅ d·ªØ li·ªáu xem tr∆∞·ªõc
    if (previewMode || requestBody.preview === true) {
      console.log('üîç [PATCH] Tr·∫£ v·ªÅ d·ªØ li·ªáu xem tr∆∞·ªõc v√† kh√¥ng c·∫≠p nh·∫≠t database');
      return NextResponse.json({
        success: true,
        message: 'Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë·ªìng b·ªô - Database ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
        preview: true,
        previewData
      });
    }
    
    // N·∫øu kh√¥ng ph·∫£i ch·∫ø ƒë·ªô xem tr∆∞·ªõc, c·∫≠p nh·∫≠t database
    console.log('üíæ [PATCH] C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o database');
    const result = await Course.replaceOne(
      { kimvanId: id },
      newCourseData
    );
    
    if (result.modifiedCount === 0) {
      console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
      return NextResponse.json(
        { 
          success: false,
          message: 'Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t' 
        },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ [PATCH] ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng');
    return NextResponse.json({
      success: true,
      message: 'ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi ho√†n to√†n',
      stats: {
        totalLinks,
        processedLinks: processedLinksInNewData,
        preservedProcessedFiles: processedFiles.length
      },
      updatedFields: Object.keys(newCourseData)
    });
  } catch (error) {
    console.error('‚ùå [PATCH] L·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc:', error);
    return NextResponse.json(
      { 
        success: false,
        message: 'ƒê√£ x·∫£y ra l·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc',
        error: error.message 
      },
      { status: 500 }
    );
  }
} 