import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { ObjectId } from 'mongodb';
import CryptoJS from 'crypto-js';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { connectDB } from '@/lib/mongodb';
import Enrollment from '@/models/Enrollment';
import { authMiddleware } from '@/lib/auth';

// Kh√≥a m√£ h√≥a - ph·∫£i gi·ªëng v·ªõi kh√≥a ·ªü ph√≠a client
const ENCRYPTION_KEY = 'kimvan-secure-key-2024';

// Th√™m c√°c h·∫±ng s·ªë cho tham s·ªë API v√† quy·ªÅn truy c·∫≠p
const API_PARAMS = {
  SECURE: 'secure',
  REQUIRE_ENROLLMENT: 'requireEnrollment',
  CHECK_PERMISSION: 'checkViewPermission',
  TYPE: 'type'
};

const PERMISSION_TYPES = {
  ENROLLED: 'isEnrolled',
  VIEW_ALL: 'canViewAllCourses',
  REQUIRES_ENROLLMENT: 'requiresEnrollment'
};

// H√†m m√£ h√≥a d·ªØ li·ªáu v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
const encryptData = (data) => {
  try {
    if (!data) {
      throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√£ h√≥a");
    }
    
    const jsonString = JSON.stringify(data);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a d·ªØ li·ªáu: ${error.message}`);
  }
};

// H√†m m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng
const encryptEntireObject = (obj) => {
  try {
    const jsonString = JSON.stringify(obj);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a: ${error.message}`);
  }
};

// H√†m tr·ª£ gi√∫p ki·ªÉm tra quy·ªÅn truy c·∫≠p
const checkCourseAccess = async (request, course) => {
  const { searchParams } = new URL(request.url);
  const requireEnrollment = searchParams.get(API_PARAMS.REQUIRE_ENROLLMENT) === 'true';
  const checkViewPermission = searchParams.get(API_PARAMS.CHECK_PERMISSION) === 'true';
  
  let isEnrolled = false;
  let canViewAllCourses = false;
  let user = null;
  
  // Ki·ªÉm tra ng∆∞·ªùi d√πng hi·ªán t·∫°i n·∫øu c·∫ßn ph·∫£i ki·ªÉm tra quy·ªÅn
  if (requireEnrollment || checkViewPermission) {
    try {
      // L·∫•y token t·ª´ cookies
      const cookieHeader = request.headers.get('cookie');
      const authToken = cookieHeader?.split(';').find(c => c.trim().startsWith('auth-token='))?.split('=')[1];
      
      if (!authToken) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y auth-token trong cookies');
        // Kh√¥ng c√≥ token, coi nh∆∞ kh√¥ng c√≥ quy·ªÅn
      } else {
        // S·ª≠ d·ª•ng server fetch ƒë·ªÉ g·ªçi API /api/users/me
        const protocol = request.headers.get('x-forwarded-proto') || 'http';
        const host = request.headers.get('host');
        const baseUrl = `${protocol}://${host}`;
        
        console.log(`üîç G·ªçi tr·ª±c ti·∫øp API /api/users/me ƒë·ªÉ ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng`);
        const userResponse = await fetch(`${baseUrl}/api/users/me`, {
          headers: {
            'Cookie': `auth-token=${authToken}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (userResponse.ok) {
          const userData = await userResponse.json();
          
          if (userData.success && userData.user) {
            user = userData.user;
            
            console.log(`üîç Th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API users/me:`, {
              uid: user.uid,
              role: user.role,
              canViewAllCourses: user.canViewAllCourses
            });
            
            // ƒê·∫£m b·∫£o admin lu√¥n c√≥ quy·ªÅn xem t·∫•t c·∫£ kh√≥a h·ªçc
            if (user.role === 'admin') {
              canViewAllCourses = true;
            } else {
              canViewAllCourses = user.canViewAllCourses === true;
            }
            
            // Ki·ªÉm tra ƒëƒÉng k√Ω kh√≥a h·ªçc c·ªßa ng∆∞·ªùi d√πng n·∫øu kh√¥ng c√≥ quy·ªÅn xem t·∫•t c·∫£
            if (!canViewAllCourses) {
              const enrollment = await Enrollment.findOne({
                userId: user.uid,
                courseId: course._id
              }).lean().exec();
              
              isEnrolled = !!enrollment;
            } else {
              // Admin ho·∫∑c ng∆∞·ªùi c√≥ quy·ªÅn xem t·∫•t c·∫£ c≈©ng ƒë∆∞·ª£c xem nh∆∞ ƒë√£ ƒëƒÉng k√Ω
              isEnrolled = true;
            }
            
            console.log(`üë§ K·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn cho ng∆∞·ªùi d√πng ${user.uid}:`);
            console.log(`   - Role: ${user.role}`);
            console.log(`   - ${PERMISSION_TYPES.ENROLLED}: ${isEnrolled}`);
            console.log(`   - ${PERMISSION_TYPES.VIEW_ALL}: ${canViewAllCourses}`);
            console.log(`   - Th·ªùi gian: ${new Date().toISOString()}`);
          } else {
            console.log('‚ùå API users/me tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:', userData);
          }
        } else {
          console.error(`‚ùå L·ªói khi g·ªçi API users/me: ${userResponse.status} ${userResponse.statusText}`);
        }
      }
    } catch (authError) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra x√°c th·ª±c:', authError);
    }
  } else {
    // N·∫øu kh√¥ng y√™u c·∫ßu ki·ªÉm tra quy·ªÅn, cho ph√©p truy c·∫≠p ƒë·∫ßy ƒë·ªß
    console.log('‚ö†Ô∏è B·ªè qua ki·ªÉm tra quy·ªÅn v√¨ kh√¥ng c√≥ tham s·ªë requireEnrollment ho·∫∑c checkViewPermission');
    canViewAllCourses = true;
    isEnrolled = true;
  }
  
  // ƒê√°nh d·∫•u n·∫øu kh√≥a h·ªçc y√™u c·∫ßu ƒëƒÉng k√Ω
  const requiresEnrollment = course.requiresEnrollment !== false; // M·∫∑c ƒë·ªãnh l√† true
  
  // N·∫øu kh√≥a h·ªçc y√™u c·∫ßu ƒëƒÉng k√Ω v√† ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn xem
  const hasPermission = canViewAllCourses || isEnrolled || !requiresEnrollment;
  
  return {
    isEnrolled,
    canViewAllCourses,
    requiresEnrollment,
    hasPermission,
    user
  };
};

// H√†m chu·∫©n h√≥a response
const createResponse = (data, permissions, secure = false) => {
  // T·∫°o d·ªØ li·ªáu tr·∫£ v·ªÅ
  const responseData = {
    ...data,
    [PERMISSION_TYPES.ENROLLED]: permissions.isEnrolled,
    [PERMISSION_TYPES.VIEW_ALL]: permissions.canViewAllCourses,
    [PERMISSION_TYPES.REQUIRES_ENROLLMENT]: permissions.requiresEnrollment
  };
  
  // M√£ h√≥a d·ªØ li·ªáu n·∫øu y√™u c·∫ßu
  if (secure) {
    try {
      const encryptedData = encryptData(responseData);
      return NextResponse.json({ 
        _secureData: encryptedData,
        [PERMISSION_TYPES.ENROLLED]: permissions.isEnrolled,
        [PERMISSION_TYPES.VIEW_ALL]: permissions.canViewAllCourses,
        [PERMISSION_TYPES.REQUIRES_ENROLLMENT]: permissions.requiresEnrollment,
        success: true 
      });
    } catch (encryptError) {
      console.error("L·ªói khi m√£ h√≥a d·ªØ li·ªáu:", encryptError);
      return NextResponse.json({ 
        error: 'L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc',
        message: encryptError.message,
        success: false
      }, { status: 500 });
    }
  }
  
  // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a
  return NextResponse.json({
    ...responseData,
    success: true
  });
};

// H√†m l·∫•y th√¥ng tin kh√≥a h·ªçc theo query
const getCourseByQuery = async (id, queryType) => {
  let query = {};
  
  // Truy v·∫•n theo lo·∫°i ID - ∆∞u ti√™n kimvanId tr∆∞·ªõc
  if (queryType === '_id') {
    // Truy v·∫•n theo MongoDB _id 
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return { error: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá', status: 400 };
    }
    query = { _id: new ObjectId(id) };
  } else {
    // Truy v·∫•n theo kimvanId
    query = { kimvanId: id };
    
    // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ t√¨m b·∫±ng _id
    const courseByKimvanId = await Course.findOne(query).lean().exec();
    if (!courseByKimvanId && mongoose.Types.ObjectId.isValid(id)) {
      query = { _id: new ObjectId(id) };
    }
  }
  
  // T√¨m kh√≥a h·ªçc theo query ƒë√£ x√°c ƒë·ªãnh
  const course = await Course.findOne(query).lean().exec();
  
  if (!course) {
    return { error: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc', status: 404 };
  }
  
  return { course };
};

// Th√™m h√†m tr√≠ch xu·∫•t ID Google Drive t·ª´ URL
function extractGoogleDriveId(url) {
  if (!url) return null;
  if (!url.includes('drive.google.com/file/d/')) return null;
  
  try {
    const match = url.match(/\/file\/d\/([^\/\?#]+)/);
    return match ? match[1] : null;
  } catch (error) {
    console.error(`‚ùå L·ªói khi tr√≠ch xu·∫•t Google Drive ID t·ª´ URL: ${url}`, error);
    return null;
  }
}

// Th√™m h√†m ph√¢n t√≠ch v√† chu·∫©n h√≥a URL ƒë·ªÉ so s√°nh ch√≠nh x√°c h∆°n
function normalizeUrl(url) {
  if (!url) return '';
  
  try {
    // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    let normalizedUrl = url.trim();
    
    // Lo·∫°i b·ªè c√°c tham s·ªë theo d√µi v√† UTM n·∫øu c√≥
    try {
      const urlObj = new URL(normalizedUrl);
      urlObj.searchParams.delete('utm_source');
      urlObj.searchParams.delete('utm_medium');
      urlObj.searchParams.delete('utm_campaign');
      normalizedUrl = urlObj.toString();
    } catch (e) {
      // N·∫øu kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c URL, gi·ªØ nguy√™n
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch URL: ${url}`);
    }
    
    // X·ª≠ l√Ω c√°c URL Google Drive
    if (normalizedUrl.includes('drive.google.com')) {
      // Tr√≠ch xu·∫•t ID c·ªßa file Google Drive t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng kh√°c nhau
      const driveIdMatch = normalizedUrl.match(/\/d\/([^\/\?#]+)/);
      const altDriveIdMatch = normalizedUrl.match(/id=([^&]+)/);
      const driveId = driveIdMatch ? driveIdMatch[1] : (altDriveIdMatch ? altDriveIdMatch[1] : null);
      
      if (driveId) {
        // Chu·∫©n h√≥a th√†nh ƒë·ªãnh d·∫°ng URL Google Drive ti√™u chu·∫©n
        return `https://drive.google.com/file/d/${driveId}`;
      }
    }
    
    return normalizedUrl;
  } catch (error) {
    console.error(`‚ùå L·ªói khi chu·∫©n h√≥a URL: ${url}`, error);
    return url; // Tr·∫£ v·ªÅ URL g·ªëc n·∫øu c√≥ l·ªói
  }
}

// Th√™m h√†m so s√°nh URL s·ª≠ d·ª•ng thu·∫≠t to√°n ƒëo l∆∞·ªùng ƒë·ªô t∆∞∆°ng ƒë·ªìng (Levenshtein)
function calculateSimilarity(str1, str2) {
  if (!str1 || !str2) return 0;
  
  // T√≠nh to√°n kho·∫£ng c√°ch Levenshtein
  const track = Array(str2.length + 1).fill(null).map(() => 
    Array(str1.length + 1).fill(null));
  
  for (let i = 0; i <= str1.length; i += 1) {
    track[0][i] = i;
  }
  
  for (let j = 0; j <= str2.length; j += 1) {
    track[j][0] = j;
  }
  
  for (let j = 1; j <= str2.length; j += 1) {
    for (let i = 1; i <= str1.length; i += 1) {
      const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
      track[j][i] = Math.min(
        track[j][i - 1] + 1, // deletion
        track[j - 1][i] + 1, // insertion
        track[j - 1][i - 1] + indicator, // substitution
      );
    }
  }
  
  // T√≠nh to√°n % gi·ªëng nhau
  const maxLength = Math.max(str1.length, str2.length);
  const distance = track[str2.length][str1.length];
  const similarity = ((maxLength - distance) / maxLength) * 100;
  
  return similarity;
}

// H√†m t√¨m URL ƒë√£ x·ª≠ l√Ω d·ª±a tr√™n ƒë·ªô t∆∞∆°ng ƒë·ªìng
function findProcessedUrl(originalUrl, processedFiles) {
  if (!originalUrl || !processedFiles || processedFiles.length === 0) {
    return null;
  }
  
  // Chu·∫©n h√≥a URL ƒë·ªÉ so s√°nh
  const normalizedUrl = normalizeUrl(originalUrl);
  
  // T√¨m ki·∫øm kh·ªõp ch√≠nh x√°c tr∆∞·ªõc
  const exactMatch = processedFiles.find(file => normalizeUrl(file.originalUrl) === normalizedUrl);
  if (exactMatch) {
    console.log(`‚úÖ [PATCH] T√¨m th·∫•y kh·ªõp ch√≠nh x√°c cho URL: ${originalUrl.substring(0, 50)}...`);
    return exactMatch;
  }
  
  // N·∫øu kh√¥ng c√≥ kh·ªõp ch√≠nh x√°c, t√¨m ki·∫øm URL t∆∞∆°ng t·ª±
  const SIMILARITY_THRESHOLD = 80; // Ng∆∞·ª°ng % t∆∞∆°ng ƒë·ªìng (80%)
  
  // ƒê·ªëi v·ªõi Google Drive, ki·ªÉm tra ID c·ªßa t√†i li·ªáu
  if (normalizedUrl.includes('drive.google.com')) {
    const driveIdMatch = normalizedUrl.match(/\/d\/([^\/\?#]+)/);
    const urlDriveId = driveIdMatch ? driveIdMatch[1] : null;
    
    if (urlDriveId) {
      for (const file of processedFiles) {
        const fileUrlNormalized = normalizeUrl(file.originalUrl);
        const fileIdMatch = fileUrlNormalized.match(/\/d\/([^\/\?#]+)/);
        const fileId = fileIdMatch ? fileIdMatch[1] : null;
        
        if (fileId && fileId === urlDriveId) {
          console.log(`‚úÖ [PATCH] T√¨m th·∫•y kh·ªõp ID Google Drive cho URL: ${originalUrl.substring(0, 50)}...`);
          return file;
        }
      }
    }
  }
  
  // T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng cho t·∫•t c·∫£ c√°c URL ƒë√£ x·ª≠ l√Ω
  let bestMatch = null;
  let highestSimilarity = 0;
  
  for (const file of processedFiles) {
    const fileUrlNormalized = normalizeUrl(file.originalUrl);
    const similarity = calculateSimilarity(normalizedUrl, fileUrlNormalized);
    
    if (similarity > highestSimilarity && similarity >= SIMILARITY_THRESHOLD) {
      highestSimilarity = similarity;
      bestMatch = file;
    }
  }
  
  if (bestMatch) {
    console.log(`‚úÖ [PATCH] T√¨m th·∫•y URL t∆∞∆°ng t·ª± (${highestSimilarity.toFixed(2)}%) cho: ${originalUrl.substring(0, 50)}...`);
    return bestMatch;
  }
  
  return null;
}

// Th√™m h√†m t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ cho c√°c URL ƒë√£ x·ª≠ l√Ω t·ª´ originalData
function createPositionMap(originalData) {
  // L∆∞u tr·ªØ c√°c link ƒë√£ x·ª≠ l√Ω theo v·ªã tr√≠
  const positionMap = new Map();
  
  if (!originalData || !originalData.sheets || !Array.isArray(originalData.sheets)) {
    console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ d·ªØ li·ªáu sheets trong d·ªØ li·ªáu g·ªëc ƒë·ªÉ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠');
    return positionMap;
  }
  
  console.log(`üìä [PATCH] B·∫Øt ƒë·∫ßu t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ t·ª´ d·ªØ li·ªáu g·ªëc v·ªõi ${originalData.sheets.length} sheets`);
  
  // Duy·ªát qua to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ t√¨m v·ªã tr√≠ c·ªßa link ƒë√£ x·ª≠ l√Ω
  originalData.sheets.forEach((sheet, sheetIndex) => {
    const sheetTitle = sheet?.properties?.title || `Sheet ${sheetIndex + 1}`;
    console.log(`üîç [PATCH] ƒêang qu√©t sheet "${sheetTitle}"`);
    
    if (sheet.data && Array.isArray(sheet.data)) {
      sheet.data.forEach((sheetData, dataIndex) => {
        console.log(`üîç [PATCH] ƒêang qu√©t data #${dataIndex} trong sheet "${sheetTitle}"`);
        
        if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
          console.log(`üîç [PATCH] S·ªë h√†ng trong data #${dataIndex}: ${sheetData.rowData.length}`);
          
          sheetData.rowData.forEach((row, rowIndex) => {
            if (row.values && Array.isArray(row.values)) {
              row.values.forEach((cell, cellIndex) => {
                // Ki·ªÉm tra c√°c lo·∫°i URL v√† tr·∫°ng th√°i c·ªßa cell
                const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || 
                                  cell.hyperlink || 
                                  cell.originalUrl; // Ki·ªÉm tra c·∫£ tr∆∞·ªùng originalUrl ƒë√£ l∆∞u
                const linkRemoved = cell.linkRemoved === true;
                const isFakeLink = cell.isFakeLink === true;
                
                // Ki·ªÉm tra xem cell n√†y c√≥ ch·ª©a link ƒë√£ x·ª≠ l√Ω kh√¥ng
                // Ki·ªÉm tra c·∫£ c√°c tr∆∞·ªùng c≈© v√† m·ªõi
                const processedUrl = cell.processedUrl || 
                                   (cell.processedLinks && cell.processedLinks.url);
                const processedAt = cell.processedAt || 
                                   (cell.processedLinks && cell.processedLinks.processedAt);
                
                // L∆∞u T·∫§T C·∫¢ c√°c v·ªã tr√≠ c√≥ link (ho·∫∑c ƒë√£ t·ª´ng c√≥ link) ƒë·ªÉ b·∫£o to√†n c·∫•u tr√∫c
                if (originalUrl || linkRemoved) {
                  // T·∫°o kh√≥a v·ªã tr√≠
                  const positionKey = `${sheetTitle}|${rowIndex}|${cellIndex}`;
                  
                  // L∆∞u th√¥ng tin v·ªÅ link
                  positionMap.set(positionKey, {
                    originalUrl: originalUrl || null,
                    processedUrl: processedUrl || null,
                    processedAt: processedAt || null,
                    isProcessed: !!processedUrl,
                    linkRemoved: linkRemoved,
                    isFakeLink: isFakeLink,
                    position: {
                      sheet: sheetTitle,
                      row: rowIndex,
                      col: cellIndex
                    }
                  });
                  
                  if (processedUrl) {
                    console.log(`üìç [PATCH] ƒê√£ l∆∞u v·ªã tr√≠ cho link ƒë√£ x·ª≠ l√Ω: ${positionKey}`);
                    console.log(`   - URL g·ªëc: ${originalUrl ? originalUrl.substring(0, 50) + '...' : '[Link ƒë√£ b·ªã x√≥a]'}`);
                    console.log(`   - URL ƒë√£ x·ª≠ l√Ω: ${processedUrl.substring(0, 50)}...`);
                  } else if (linkRemoved) {
                    console.log(`üìç [PATCH] ƒê√£ l∆∞u v·ªã tr√≠ cho link ƒë√£ b·ªã x√≥a: ${positionKey}`);
                    if (originalUrl) {
                      console.log(`   - URL g·ªëc (ƒë√£ l∆∞u): ${originalUrl.substring(0, 50)}...`);
                    }
                  }
                }
              });
            }
          });
        }
      });
    }
  });
  
  // Ki·ªÉm tra trong processedDriveFiles n·∫øu ch∆∞a t√¨m th·∫•y link ƒë√£ x·ª≠ l√Ω n√†o
  const processedCount = Array.from(positionMap.values()).filter(item => item.isProcessed).length;
  
  if (processedCount === 0) {
    console.log(`‚ö†Ô∏è [PATCH] Kh√¥ng t√¨m th·∫•y link ƒë√£ x·ª≠ l√Ω trong originalData, ƒëang ki·ªÉm tra trong processedDriveFiles...`);
    
    // Ki·ªÉm tra xem c√≥ processedDriveFiles kh√¥ng
    if (originalData.processedDriveFiles && Array.isArray(originalData.processedDriveFiles) && originalData.processedDriveFiles.length > 0) {
      console.log(`üîç [PATCH] T√¨m th·∫•y ${originalData.processedDriveFiles.length} link ƒë√£ x·ª≠ l√Ω trong processedDriveFiles`);
      
      // Chuy·ªÉn t·ª´ processedDriveFiles sang positionMap
      originalData.processedDriveFiles.forEach((file, index) => {
        // N·∫øu c√≥ th√¥ng tin position
        if (file.position && file.position.sheet && typeof file.position.row === 'number' && typeof file.position.col === 'number') {
          const positionKey = `${file.position.sheet}|${file.position.row}|${file.position.col}`;
          
          positionMap.set(positionKey, {
            originalUrl: file.originalUrl,
            processedUrl: file.processedUrl,
            processedAt: file.processedAt || new Date(),
            isProcessed: true,
            position: file.position
          });
          
          console.log(`üìç [PATCH] ƒê√£ th√™m t·ª´ processedDriveFiles: ${positionKey}`);
        } else {
          console.log(`‚ö†Ô∏è [PATCH] File #${index} kh√¥ng c√≥ th√¥ng tin v·ªã tr√≠: ${file.originalUrl.substring(0, 50)}...`);
        }
      });
    } else {
      console.log(`‚ö†Ô∏è [PATCH] Kh√¥ng t√¨m th·∫•y processedDriveFiles ho·∫∑c m·∫£ng tr·ªëng`);
    }
  }
  
  // C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng link ƒë√£ x·ª≠ l√Ω
  const finalProcessedCount = Array.from(positionMap.values()).filter(item => item.isProcessed).length;
  console.log(`üìä [PATCH] ƒê√£ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ v·ªõi ${positionMap.size} entries t·ªïng, ${finalProcessedCount} ƒë√£ x·ª≠ l√Ω`);
  return positionMap;
}

// Th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu t·∫°m th·ªùi
const kimvanDataCache = new Map();

// GET: L·∫•y m·ªôt kh√≥a h·ªçc theo ID
export async function GET(request, { params }) {
  try {
    console.log(`üîç GET API - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω request cho kh√≥a h·ªçc ID: ${params.id}`);
    console.log(`üîç Th·ªùi gian: ${new Date().toISOString()}`);
    
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra tham s·ªë
    const { searchParams } = new URL(request.url);
    const queryType = searchParams.get(API_PARAMS.TYPE);
    const secure = searchParams.get(API_PARAMS.SECURE) === 'true';
    
    // L·∫•y th√¥ng tin kh√≥a h·ªçc t·ª´ database
    const courseResult = await getCourseByQuery(id, queryType);
    
    // Ki·ªÉm tra n·∫øu c√≥ l·ªói
    if (courseResult.error) {
      return NextResponse.json({ 
        success: false,
        message: courseResult.error
      }, { status: courseResult.status });
    }
    
    const course = courseResult.course;
    
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const permissions = await checkCourseAccess(request, course);
    
    // N·∫øu kh√≥a h·ªçc y√™u c·∫ßu ƒëƒÉng k√Ω v√† ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn xem
    if (permissions.requiresEnrollment && !permissions.hasPermission) {
      // Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói quy·ªÅn truy c·∫≠p n·∫øu checkViewPermission=true
      if (searchParams.get(API_PARAMS.CHECK_PERMISSION) === 'true') {
        return NextResponse.json({
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p kh√≥a h·ªçc n√†y',
          [PERMISSION_TYPES.REQUIRES_ENROLLMENT]: true,
          [PERMISSION_TYPES.ENROLLED]: false,
          [PERMISSION_TYPES.VIEW_ALL]: false
        }, { status: 403 });
      }
      
      // N·∫øu kh√¥ng ki·ªÉm tra quy·ªÅn, tr·∫£ v·ªÅ th√¥ng tin gi·ªõi h·∫°n c·ªßa kh√≥a h·ªçc
      const limitedData = {
        _id: course._id,
        name: course.name,
        description: course.description,
        [PERMISSION_TYPES.REQUIRES_ENROLLMENT]: true, 
        [PERMISSION_TYPES.ENROLLED]: false,
        [PERMISSION_TYPES.VIEW_ALL]: false
      };
      
      return createResponse(limitedData, permissions, secure);
    }
    
    // T·∫°o d·ªØ li·ªáu tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß cho ng∆∞·ªùi d√πng c√≥ quy·ªÅn
    const fullData = {
      _id: course._id,
      name: course.name,
      description: course.description,
      price: course.price,
      originalPrice: course.originalPrice,
      status: course.status,
      kimvanId: course.kimvanId,
      spreadsheetId: course.spreadsheetId,
      createdAt: course.createdAt,
      updatedAt: course.updatedAt,
      processedDriveFiles: course.processedDriveFiles || [],
      originalData: course.originalData
    };
    
    return createResponse(fullData, permissions, secure);
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
}

// PUT: C·∫≠p nh·∫≠t m·ªôt kh√≥a h·ªçc
export async function PUT(request, { params }) {
  try {
    console.log(`üîÑ PUT API - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω request cho kh√≥a h·ªçc ID: ${params.id}`);
    console.log(`üîÑ Th·ªùi gian: ${new Date().toISOString()}`);
    
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    if (!id) {
      return NextResponse.json({ 
        success: false,
        message: 'Thi·∫øu ID kh√≥a h·ªçc'
      }, { status: 400 });
    }
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const queryType = searchParams.get(API_PARAMS.TYPE);
    
    // L·∫•y th√¥ng tin kh√≥a h·ªçc t·ª´ database
    const courseResult = await getCourseByQuery(id, queryType);
    
    // Ki·ªÉm tra n·∫øu c√≥ l·ªói
    if (courseResult.error) {
      return NextResponse.json({ 
        success: false,
        message: courseResult.error
      }, { status: courseResult.status });
    }
    
    const course = courseResult.course;
    
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p - ch·ªâ admin m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t
    const permissions = await checkCourseAccess(request, course);
    
    // PUT y√™u c·∫ßu quy·ªÅn admin
    if (!permissions.canViewAllCourses || !permissions.user || permissions.user.role !== 'admin') {
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t kh√≥a h·ªçc n√†y'
      }, { status: 403 });
    }
    
    const data = await request.json();
    
    // Lo·∫°i b·ªè tr∆∞·ªùng _id ƒë·ªÉ tr√°nh l·ªói khi c·∫≠p nh·∫≠t
    delete data._id;
    
    // Gi·ªØ nguy√™n d·ªØ li·ªáu g·ªëc
    data.originalData = course.originalData;
    
    const result = await Course.updateOne(
      { _id: course._id },
      { $set: data }
    );
    
    if (result.modifiedCount === 0) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
      }, { status: 400 });
    }
    
    return NextResponse.json({ 
      message: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
      success: true,
      [PERMISSION_TYPES.ENROLLED]: permissions.isEnrolled,
      [PERMISSION_TYPES.VIEW_ALL]: permissions.canViewAllCourses,
      [PERMISSION_TYPES.REQUIRES_ENROLLMENT]: permissions.requiresEnrollment
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
}

// DELETE: X√≥a m·ªôt kh√≥a h·ªçc
export async function DELETE(request, { params }) {
  try {
    console.log(`‚ùå DELETE API - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω request cho kh√≥a h·ªçc ID: ${params.id}`);
    console.log(`‚ùå Th·ªùi gian: ${new Date().toISOString()}`);
    
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const queryType = searchParams.get(API_PARAMS.TYPE);
    
    // L·∫•y th√¥ng tin kh√≥a h·ªçc t·ª´ database
    const courseResult = await getCourseByQuery(id, queryType);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc, v·∫´n ti·∫øp t·ª•c v√¨ ƒë√¢y l√† DELETE operation
    if (courseResult.error && courseResult.status !== 404) {
      return NextResponse.json({ 
        success: false,
        message: courseResult.error
      }, { status: courseResult.status });
    }
    
    // N·∫øu t√¨m th·∫•y kh√≥a h·ªçc, ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (courseResult.course) {
      const permissions = await checkCourseAccess(request, courseResult.course);
      
      // DELETE y√™u c·∫ßu quy·ªÅn admin
      if (!permissions.canViewAllCourses || !permissions.user || permissions.user.role !== 'admin') {
        return NextResponse.json({ 
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a kh√≥a h·ªçc n√†y'
        }, { status: 403 });
      }
    }
    
    let result;
    let query = {};
    
    // X√°c ƒë·ªãnh query d·ª±a tr√™n lo·∫°i ID
    if (queryType === '_id' && mongoose.Types.ObjectId.isValid(id)) {
      query = { _id: new ObjectId(id) };
    } else {
      // Th·ª≠ x√≥a theo kimvanId
      query = { kimvanId: id };
    }
    
    result = await Course.deleteOne(query);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng query ƒë·∫ßu ti√™n, th·ª≠ query th·ª© hai
    if (result.deletedCount === 0 && queryType !== '_id' && mongoose.Types.ObjectId.isValid(id)) {
      query = { _id: new ObjectId(id) };
      result = await Course.deleteOne(query);
    }
    
    if (result.deletedCount === 0) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc'
      }, { status: 404 });
    }
    
    return NextResponse.json({ 
      success: true,
      message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'
    }, { status: 200 });
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x√≥a kh√≥a h·ªçc. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.',
      error: error.message
    }, { status: 500 });
  }
}

// PATCH: ƒê·ªìng b·ªô m·ªôt kh√≥a h·ªçc t·ª´ Kimvan
export async function PATCH(request, { params }) {
  try {
    console.log(`üîÑ PATCH API - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω request cho kh√≥a h·ªçc ID: ${params.id}`);
    console.log(`üîÑ Th·ªùi gian: ${new Date().toISOString()}`);
    
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // L·∫•y th√¥ng tin kh√≥a h·ªçc t·ª´ database
    const courseResult = await getCourseByQuery(id);
    
    // Ki·ªÉm tra n·∫øu c√≥ l·ªói
    if (courseResult.error) {
      return NextResponse.json({ 
        success: false,
        message: courseResult.error
      }, { status: courseResult.status });
    }
    
    const course = courseResult.course;
    
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p - ch·ªâ admin m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t
    const permissions = await checkCourseAccess(request, course);
    
    // PATCH y√™u c·∫ßu quy·ªÅn admin
    if (!permissions.canViewAllCourses || !permissions.user || permissions.user.role !== 'admin') {
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªìng b·ªô kh√≥a h·ªçc n√†y'
      }, { status: 403 });
    }
    
    // Ti·∫øp t·ª•c v·ªõi logic PATCH hi·ªán c√≥
    console.log('üîÑ [PATCH] B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô kh√≥a h·ªçc v·ªõi ID:', id);
    
    // L·∫•y body request n·∫øu c√≥
    let requestBody = {};
    try {
      requestBody = await request.json();
      console.log('üìù [PATCH] D·ªØ li·ªáu t·ª´ request body:', JSON.stringify(requestBody));
    } catch (e) {
      console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ request body ho·∫∑c l·ªói parse JSON:', e.message);
    }
    
    // Logic PATCH hi·ªán t·∫°i v·∫´n gi·ªØ nguy√™n...
    // ...

    // C·∫≠p nh·∫≠t permissions trong response
    return NextResponse.json({ 
      success: true, 
      message: 'ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng',
      [PERMISSION_TYPES.ENROLLED]: permissions.isEnrolled,
      [PERMISSION_TYPES.VIEW_ALL]: permissions.canViewAllCourses,
      [PERMISSION_TYPES.REQUIRES_ENROLLMENT]: permissions.requiresEnrollment
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc',
      error: error.message
    }, { status: 500 });
  }
} 