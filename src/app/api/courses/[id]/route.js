import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { ObjectId } from 'mongodb';
import CryptoJS from 'crypto-js';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { connectDB } from '@/lib/mongodb';
import Enrollment from '@/models/Enrollment';
import { authMiddleware } from '@/lib/auth';

// Kh√≥a m√£ h√≥a - ph·∫£i gi·ªëng v·ªõi kh√≥a ·ªü ph√≠a client
const ENCRYPTION_KEY = 'kimvan-secure-key-2024';

// H√†m m√£ h√≥a d·ªØ li·ªáu v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
const encryptData = (data) => {
  try {
    if (!data) {
      throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√£ h√≥a");
    }
    
    const jsonString = JSON.stringify(data);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a d·ªØ li·ªáu: ${error.message}`);
  }
};

// H√†m m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng
const encryptEntireObject = (obj) => {
  try {
    const jsonString = JSON.stringify(obj);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a: ${error.message}`);
  }
};

// Th√™m h√†m ph√¢n t√≠ch v√† chu·∫©n h√≥a URL ƒë·ªÉ so s√°nh ch√≠nh x√°c h∆°n
function normalizeUrl(url) {
  if (!url) return '';
  
  try {
    // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    let normalizedUrl = url.trim();
    
    // Lo·∫°i b·ªè c√°c tham s·ªë theo d√µi v√† UTM n·∫øu c√≥
    try {
      const urlObj = new URL(normalizedUrl);
      urlObj.searchParams.delete('utm_source');
      urlObj.searchParams.delete('utm_medium');
      urlObj.searchParams.delete('utm_campaign');
      normalizedUrl = urlObj.toString();
    } catch (e) {
      // N·∫øu kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c URL, gi·ªØ nguy√™n
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch URL: ${url}`);
    }
    
    // X·ª≠ l√Ω c√°c URL Google Drive
    if (normalizedUrl.includes('drive.google.com')) {
      // Tr√≠ch xu·∫•t ID c·ªßa file Google Drive t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng kh√°c nhau
      const driveIdMatch = normalizedUrl.match(/\/d\/([^\/\?#]+)/);
      const altDriveIdMatch = normalizedUrl.match(/id=([^&]+)/);
      const driveId = driveIdMatch ? driveIdMatch[1] : (altDriveIdMatch ? altDriveIdMatch[1] : null);
      
      if (driveId) {
        // Chu·∫©n h√≥a th√†nh ƒë·ªãnh d·∫°ng URL Google Drive ti√™u chu·∫©n
        return `https://drive.google.com/file/d/${driveId}`;
      }
    }
    
    return normalizedUrl;
  } catch (error) {
    console.error(`‚ùå L·ªói khi chu·∫©n h√≥a URL: ${url}`, error);
    return url; // Tr·∫£ v·ªÅ URL g·ªëc n·∫øu c√≥ l·ªói
  }
}

// Th√™m h√†m so s√°nh URL s·ª≠ d·ª•ng thu·∫≠t to√°n ƒëo l∆∞·ªùng ƒë·ªô t∆∞∆°ng ƒë·ªìng (Levenshtein)
function calculateSimilarity(str1, str2) {
  if (!str1 || !str2) return 0;
  
  // T√≠nh to√°n kho·∫£ng c√°ch Levenshtein
  const track = Array(str2.length + 1).fill(null).map(() => 
    Array(str1.length + 1).fill(null));
  
  for (let i = 0; i <= str1.length; i += 1) {
    track[0][i] = i;
  }
  
  for (let j = 0; j <= str2.length; j += 1) {
    track[j][0] = j;
  }
  
  for (let j = 1; j <= str2.length; j += 1) {
    for (let i = 1; i <= str1.length; i += 1) {
      const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
      track[j][i] = Math.min(
        track[j][i - 1] + 1, // deletion
        track[j - 1][i] + 1, // insertion
        track[j - 1][i - 1] + indicator, // substitution
      );
    }
  }
  
  // T√≠nh to√°n % gi·ªëng nhau
  const maxLength = Math.max(str1.length, str2.length);
  const distance = track[str2.length][str1.length];
  const similarity = ((maxLength - distance) / maxLength) * 100;
  
  return similarity;
}

// H√†m t√¨m URL ƒë√£ x·ª≠ l√Ω d·ª±a tr√™n ƒë·ªô t∆∞∆°ng ƒë·ªìng
function findProcessedUrl(originalUrl, processedFiles) {
  if (!originalUrl || !processedFiles || processedFiles.length === 0) {
    return null;
  }
  
  // Chu·∫©n h√≥a URL ƒë·ªÉ so s√°nh
  const normalizedUrl = normalizeUrl(originalUrl);
  
  // T√¨m ki·∫øm kh·ªõp ch√≠nh x√°c tr∆∞·ªõc
  const exactMatch = processedFiles.find(file => normalizeUrl(file.originalUrl) === normalizedUrl);
  if (exactMatch) {
    console.log(`‚úÖ [PATCH] T√¨m th·∫•y kh·ªõp ch√≠nh x√°c cho URL: ${originalUrl.substring(0, 50)}...`);
    return exactMatch;
  }
  
  // N·∫øu kh√¥ng c√≥ kh·ªõp ch√≠nh x√°c, t√¨m ki·∫øm URL t∆∞∆°ng t·ª±
  const SIMILARITY_THRESHOLD = 80; // Ng∆∞·ª°ng % t∆∞∆°ng ƒë·ªìng (80%)
  
  // ƒê·ªëi v·ªõi Google Drive, ki·ªÉm tra ID c·ªßa t√†i li·ªáu
  if (normalizedUrl.includes('drive.google.com')) {
    const driveIdMatch = normalizedUrl.match(/\/d\/([^\/\?#]+)/);
    const urlDriveId = driveIdMatch ? driveIdMatch[1] : null;
    
    if (urlDriveId) {
      for (const file of processedFiles) {
        const fileUrlNormalized = normalizeUrl(file.originalUrl);
        const fileIdMatch = fileUrlNormalized.match(/\/d\/([^\/\?#]+)/);
        const fileId = fileIdMatch ? fileIdMatch[1] : null;
        
        if (fileId && fileId === urlDriveId) {
          console.log(`‚úÖ [PATCH] T√¨m th·∫•y kh·ªõp ID Google Drive cho URL: ${originalUrl.substring(0, 50)}...`);
          return file;
        }
      }
    }
  }
  
  // T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng cho t·∫•t c·∫£ c√°c URL ƒë√£ x·ª≠ l√Ω
  let bestMatch = null;
  let highestSimilarity = 0;
  
  for (const file of processedFiles) {
    const fileUrlNormalized = normalizeUrl(file.originalUrl);
    const similarity = calculateSimilarity(normalizedUrl, fileUrlNormalized);
    
    if (similarity > highestSimilarity && similarity >= SIMILARITY_THRESHOLD) {
      highestSimilarity = similarity;
      bestMatch = file;
    }
  }
  
  if (bestMatch) {
    console.log(`‚úÖ [PATCH] T√¨m th·∫•y URL t∆∞∆°ng t·ª± (${highestSimilarity.toFixed(2)}%) cho: ${originalUrl.substring(0, 50)}...`);
    return bestMatch;
  }
  
  return null;
}

// Th√™m h√†m t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ cho c√°c URL ƒë√£ x·ª≠ l√Ω
function createPositionMap(originalData, processedFiles) {
  // L∆∞u tr·ªØ c√°c link ƒë√£ x·ª≠ l√Ω theo v·ªã tr√≠
  const positionMap = new Map();
  
  if (!originalData || !originalData.sheets || !Array.isArray(originalData.sheets)) {
    console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ d·ªØ li·ªáu sheets trong d·ªØ li·ªáu g·ªëc ƒë·ªÉ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠');
    return positionMap;
  }
  
  console.log(`üìä [PATCH] B·∫Øt ƒë·∫ßu t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ t·ª´ d·ªØ li·ªáu g·ªëc v·ªõi ${originalData.sheets.length} sheets`);
  
  // Duy·ªát qua to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ t√¨m v·ªã tr√≠ c·ªßa link ƒë√£ x·ª≠ l√Ω
  originalData.sheets.forEach((sheet, sheetIndex) => {
    const sheetTitle = sheet?.properties?.title || `Sheet ${sheetIndex + 1}`;
    
    if (sheet.data && Array.isArray(sheet.data)) {
      sheet.data.forEach((sheetData) => {
        if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
          sheetData.rowData.forEach((row, rowIndex) => {
            if (row.values && Array.isArray(row.values)) {
              row.values.forEach((cell, cellIndex) => {
                const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || cell.hyperlink;
                
                if (originalUrl) {
                  // T√¨m trong danh s√°ch processedFiles
                  const processedFile = processedFiles.find(file => file.originalUrl === originalUrl);
                  
                  if (processedFile) {
                    // T·∫°o kh√≥a v·ªã tr√≠
                    const positionKey = `${sheetTitle}|${rowIndex}|${cellIndex}`;
                    positionMap.set(positionKey, processedFile);
                    console.log(`üìç [PATCH] ƒê√£ l∆∞u v·ªã tr√≠ cho link ƒë√£ x·ª≠ l√Ω: ${positionKey}`);
                  }
                }
              });
            }
          });
        }
      });
    }
  });
  
  console.log(`üìä [PATCH] ƒê√£ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ v·ªõi ${positionMap.size} entries`);
  return positionMap;
}

// Th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu t·∫°m th·ªùi
const kimvanDataCache = new Map();

// GET: L·∫•y m·ªôt kh√≥a h·ªçc theo ID
export async function GET(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const queryType = searchParams.get('type');
    const secure = searchParams.get('secure') === 'true';
    const responseType = queryType || 'full';
    
    let query = {};
    
    // Truy v·∫•n theo lo·∫°i ID - ∆∞u ti√™n kimvanId tr∆∞·ªõc
    if (queryType === '_id') {
      // Truy v·∫•n theo MongoDB _id 
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      query = { _id: new ObjectId(id) };
    } else {
      // Truy v·∫•n theo kimvanId
      query = { kimvanId: id };
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ t√¨m b·∫±ng _id
      const courseByKimvanId = await Course.findOne(query).lean().exec();
      if (!courseByKimvanId && mongoose.Types.ObjectId.isValid(id)) {
        query = { _id: new ObjectId(id) };
      }
    }
    
    // T√¨m kh√≥a h·ªçc theo query ƒë√£ x√°c ƒë·ªãnh
    const course = await Course.findOne(query).lean().exec();
    
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Bypass authentication check - always return full course data
    const isEnrolled = true;
    const canViewAllCourses = true;
    
    // T·∫°o d·ªØ li·ªáu tr·∫£ v·ªÅ
    const responseData = {
      _id: course._id,
      name: course.name,
      description: course.description,
      price: course.price,
      originalPrice: course.originalPrice,
      status: course.status,
      kimvanId: course.kimvanId,
      spreadsheetId: course.spreadsheetId,
      createdAt: course.createdAt,
      updatedAt: course.updatedAt,
      processedDriveFiles: course.processedDriveFiles || [],
      isEnrolled: isEnrolled,
      canViewAllCourses: canViewAllCourses,
      originalData: course.originalData
    };
    
    // M√£ h√≥a d·ªØ li·ªáu n·∫øu y√™u c·∫ßu
    if (secure) {
      try {
        const encryptedData = encryptData(responseData);
        return NextResponse.json({ _secureData: encryptedData });
      } catch (encryptError) {
        console.error("L·ªói khi m√£ h√≥a d·ªØ li·ªáu:", encryptError);
        return NextResponse.json({ 
          error: 'L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc',
          message: encryptError.message 
        }, { status: 500 });
      }
    }
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a
    return NextResponse.json(responseData);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
}

// PUT: C·∫≠p nh·∫≠t m·ªôt kh√≥a h·ªçc
export async function PUT(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    if (!id) {
      return NextResponse.json(
        { message: 'Thi·∫øu ID kh√≥a h·ªçc' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type');
    
    let query = {};
    
    // Truy v·∫•n theo lo·∫°i ID - ∆∞u ti√™n kimvanId tr∆∞·ªõc
    if (type === '_id') {
      // Truy v·∫•n theo MongoDB _id 
      try {
        query = { _id: new ObjectId(id) };
      } catch (err) {
        return NextResponse.json(
          { message: 'ID kh√¥ng h·ª£p l·ªá' },
          { status: 400 }
        );
      }
    } else {
      // Truy v·∫•n theo kimvanId
      query = { kimvanId: id };
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ t√¨m b·∫±ng _id
      const course = await Course.findOne(query).lean().exec();
      if (!course) {
        try {
          if (mongoose.Types.ObjectId.isValid(id)) {
            query = { _id: new ObjectId(id) };
          }
        } catch (err) {
          // N·∫øu kh√¥ng ph·∫£i ObjectId h·ª£p l·ªá, gi·ªØ nguy√™n query kimvanId
        }
      }
    }
    
    const course = await Course.findOne(query).lean().exec();
    if (!course) {
      return NextResponse.json(
        { message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' },
        { status: 404 }
      );
    }
    
    const data = await request.json();
    
    // Lo·∫°i b·ªè tr∆∞·ªùng _id ƒë·ªÉ tr√°nh l·ªói khi c·∫≠p nh·∫≠t
    delete data._id;
    
    // Gi·ªØ nguy√™n d·ªØ li·ªáu g·ªëc
    data.originalData = course.originalData;
    
    const result = await Course.updateOne(
      query,
      { $set: data }
    );
    
    if (result.modifiedCount === 0) {
      return NextResponse.json(
        { message: 'Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t' },
        { status: 400 }
      );
    }
    
    return NextResponse.json({ 
      message: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
      success: true
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:', error);
    return NextResponse.json(
      { 
        message: 'L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc',
        error: error.message 
      },
      { status: 500 }
    );
  }
}

// DELETE: X√≥a m·ªôt kh√≥a h·ªçc
export async function DELETE(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type');
    
    let query = {};
    let result;
    
    // Truy v·∫•n theo lo·∫°i ID
    if (type === '_id') {
      // X√≥a theo MongoDB _id
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      result = await Course.deleteOne({ _id: new ObjectId(id) });
    } else {
      // Th·ª≠ x√≥a theo kimvanId tr∆∞·ªõc
      result = await Course.deleteOne({ kimvanId: id });
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ x√≥a b·∫±ng _id
      if (result.deletedCount === 0 && mongoose.Types.ObjectId.isValid(id)) {
        result = await Course.deleteOne({ _id: new ObjectId(id) });
      }
    }
    
    if (result.deletedCount === 0) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    return NextResponse.json(
      { 
        success: true,
        message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' 
      }, 
      { status: 200 }
    );
  } catch (error) {
    console.error('L·ªói khi x√≥a kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x√≥a kh√≥a h·ªçc. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.',
      error: error.message
    }, { status: 500 });
  }
}

// PATCH: ƒê·ªìng b·ªô m·ªôt kh√≥a h·ªçc t·ª´ Kimvan
export async function PATCH(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    console.log('üîÑ [PATCH] B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô kh√≥a h·ªçc v·ªõi ID:', id);
    
    // L·∫•y body request n·∫øu c√≥
    let requestBody = {};
    try {
      requestBody = await request.json();
      console.log('üìù [PATCH] D·ªØ li·ªáu t·ª´ request body:', JSON.stringify(requestBody));
    } catch (e) {
      console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ request body ho·∫∑c l·ªói parse JSON:', e.message);
    }
    
    // Ki·ªÉm tra ch·∫ø ƒë·ªô xem tr∆∞·ªõc v√† c√°c tham s·ªë kh√°c
    const previewMode = requestBody.preview === true;
    const applyProcessedLinks = requestBody.applyProcessedLinks === true;
    const useCache = requestBody.useCache === true || applyProcessedLinks === true;
    
    console.log(`üîç [PATCH] Ch·∫ø ƒë·ªô xem tr∆∞·ªõc: ${previewMode ? 'B·∫≠t' : 'T·∫Øt'}`);
    console.log(`üîó [PATCH] √Åp d·ª•ng link ƒë√£ x·ª≠ l√Ω: ${applyProcessedLinks ? 'B·∫≠t' : 'T·∫Øt'}`);
    console.log(`üíæ [PATCH] S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l∆∞u t·∫°m: ${useCache ? 'B·∫≠t' : 'T·∫Øt'}`);
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    if (!id) {
      return NextResponse.json(
        { message: 'Thi·∫øu ID kh√≥a h·ªçc' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra xem kh√≥a h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
    console.log('üîç [PATCH] T√¨m ki·∫øm kh√≥a h·ªçc trong database v·ªõi kimvanId:', id);
    const existingCourse = await Course.findOne({ kimvanId: id }).lean().exec();
    if (!existingCourse) {
      console.log('‚ùå [PATCH] Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc v·ªõi kimvanId:', id);
      return NextResponse.json(
        { 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ ƒë·ªìng b·ªô' 
        },
        { status: 404 }
      );
    }
    
    console.log('‚úÖ [PATCH] ƒê√£ t√¨m th·∫•y kh√≥a h·ªçc:', existingCourse._id.toString());
    
    // L∆∞u danh s√°ch c√°c file ƒë√£ x·ª≠ l√Ω t·ª´ kh√≥a h·ªçc hi·ªán t·∫°i
    const processedFiles = existingCourse.processedDriveFiles || [];
    console.log(`üìä [PATCH] S·ªë l∆∞·ª£ng file ƒë√£ x·ª≠ l√Ω t·ª´ d·ªØ li·ªáu c≈©: ${processedFiles.length}`);
    
    // Thay ƒë·ªïi: T·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ thay v√¨ b·∫£n ƒë·ªì URL
    const positionMap = createPositionMap(existingCourse.originalData, processedFiles);
    console.log(`üìä [PATCH] ƒê√£ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ v·ªõi ${positionMap.size} v·ªã tr√≠ ƒë√£ x·ª≠ l√Ω`);
    
    // Khai b√°o bi·∫øn ƒë·ªÉ l∆∞u d·ªØ li·ªáu Kimvan
    let kimvanData;
    
    // Ki·ªÉm tra n·∫øu s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ b·ªô nh·ªõ t·∫°m
    if (useCache && kimvanDataCache.has(id)) {
      console.log('üíæ [PATCH] S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l∆∞u trong b·ªô nh·ªõ t·∫°m');
      kimvanData = kimvanDataCache.get(id);
    } else {
      // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi t·ª´ Kimvan
      console.log(`üîÑ [PATCH] ƒêang g·ªçi API kimvan v·ªõi ID: ${id}`);
      const kimvanUrl = new URL(request.url);
      const origin = kimvanUrl.origin;
      const kimvanApiUrl = `${origin}/api/spreadsheets/${id}`;
      console.log(`üåê [PATCH] URL ƒë√≠ch: ${kimvanApiUrl}`);
      
      const kimvanResponse = await fetch(kimvanApiUrl);
      
      if (!kimvanResponse.ok) {
        console.log(`‚ùå [PATCH] L·ªói khi g·ªçi API: ${kimvanResponse.status}`);
        return NextResponse.json(
          { 
            success: false,
            message: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Kimvan API',
            error: `L·ªói: ${kimvanResponse.status}` 
          },
          { status: 500 }
        );
      }
      
      console.log('‚úÖ [PATCH] ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ kimvan API th√†nh c√¥ng!');
      kimvanData = await kimvanResponse.json();
      
      // L∆∞u d·ªØ li·ªáu v√†o b·ªô nh·ªõ t·∫°m n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô xem tr∆∞·ªõc
      if (previewMode) {
        console.log('üíæ [PATCH] L∆∞u d·ªØ li·ªáu v√†o b·ªô nh·ªõ t·∫°m');
        kimvanDataCache.set(id, kimvanData);
        
        // Thi·∫øt l·∫≠p x√≥a cache sau 30 ph√∫t
        setTimeout(() => {
          console.log(`üóëÔ∏è [PATCH] X√≥a d·ªØ li·ªáu t·∫°m cho kh√≥a h·ªçc ${id}`);
          kimvanDataCache.delete(id);
        }, 30 * 60 * 1000);
      }
    }
    
    // Th√™m log ƒë·ªÉ ki·ªÉm tra xem kimvanData c√≥ ch·ª©a th√¥ng tin ƒë√£ x·ª≠ l√Ω kh√¥ng
    console.log(`üîç [PATCH] Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u:`);
    let processedUrlCount = 0;
    if (kimvanData.sheets && Array.isArray(kimvanData.sheets)) {
      kimvanData.sheets.forEach(sheet => {
        if (sheet.data && Array.isArray(sheet.data)) {
          sheet.data.forEach(sheetData => {
            if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
              sheetData.rowData.forEach(row => {
                if (row.values && Array.isArray(row.values)) {
                  row.values.forEach(cell => {
                    if (cell.processedLinks && cell.processedLinks.url) {
                      processedUrlCount++;
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
    console.log(`üî¢ [PATCH] S·ªë link ƒë√£ x·ª≠ l√Ω trong d·ªØ li·ªáu s·∫Ω l∆∞u: ${processedUrlCount}`);

    // ƒê·∫øm s·ªë l∆∞·ª£ng link trong d·ªØ li·ªáu m·ªõi
    let totalLinks = 0;
    let processedLinksInNewData = 0;
    
    // S·ª≠a ph·∫ßn x·ª≠ l√Ω link trong d·ªØ li·ªáu m·ªõi
    if (kimvanData.sheets && Array.isArray(kimvanData.sheets)) {
      console.log(`üìä [PATCH] S·ªë l∆∞·ª£ng sheets trong d·ªØ li·ªáu m·ªõi: ${kimvanData.sheets.length}`);
      
      kimvanData.sheets.forEach((sheet, sheetIndex) => {
        const sheetTitle = sheet?.properties?.title || `Sheet ${sheetIndex + 1}`;
        console.log(`üìù [PATCH] X·ª≠ l√Ω sheet ${sheetIndex + 1}: ${sheetTitle}`);
        
        if (sheet.data && Array.isArray(sheet.data)) {
          sheet.data.forEach((sheetData, dataIndex) => {
            if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
              console.log(`üìä [PATCH] Sheet ${sheetIndex + 1}, Data ${dataIndex + 1}: ${sheetData.rowData.length} h√†ng`);
              
              sheetData.rowData.forEach((row, rowIndex) => {
                if (row.values && Array.isArray(row.values)) {
                  row.values.forEach((cell, cellIndex) => {
                    // Ki·ªÉm tra n·∫øu cell c√≥ link
                    const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || cell.hyperlink;
                    if (originalUrl) {
                      totalLinks++;
                      
                      // T·∫°o kh√≥a v·ªã tr√≠ t∆∞∆°ng ·ª©ng
                      const positionKey = `${sheetTitle}|${rowIndex}|${cellIndex}`;
                      
                      // T√¨m ki·∫øm URL ƒë√£ x·ª≠ l√Ω d·ª±a tr√™n v·ªã tr√≠
                      if (positionMap.has(positionKey)) {
                        const processedFile = positionMap.get(positionKey);
                        processedLinksInNewData++;
                        
                        // Th√™m th√¥ng tin v·ªÅ file ƒë√£ x·ª≠ l√Ω v√†o cell - ƒê·∫¢M B·∫¢O L∆ØU V√ÄO MONGODB
                        // C·∫ßn ƒë·∫£m b·∫£o thu·ªôc t√≠nh n√†y ƒë∆∞·ª£c l∆∞u v√†o schema MongoDB
                        if (!cell.processedLinks) {
                          cell.processedLinks = {};
                        }
                        cell.processedLinks.url = processedFile.processedUrl;
                        cell.processedLinks.processedAt = processedFile.processedAt;
                        
                        // C√°ch c≈© - c√≥ th·ªÉ b·ªã MongoDB b·ªè qua
                        cell.processedUrl = processedFile.processedUrl;
                        cell.processedAt = processedFile.processedAt;
                        
                        console.log(`‚úÖ [PATCH] Sheet ${sheetTitle}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: ƒê√£ √°p d·ª•ng link ƒë√£ x·ª≠ l√Ω`);
                        console.log(`   - Link g·ªëc (m·ªõi): ${originalUrl.substring(0, 50)}...`);
                        console.log(`   - Link g·ªëc (c≈©): ${processedFile.originalUrl.substring(0, 50)}...`);
                        console.log(`   - Link ƒë√£ x·ª≠ l√Ω: ${processedFile.processedUrl.substring(0, 50)}...`);
                      } else {
                        console.log(`‚ÑπÔ∏è [PATCH] Sheet ${sheetTitle}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: Kh√¥ng t√¨m th·∫•y link ƒë√£ x·ª≠ l√Ω cho v·ªã tr√≠ n√†y`);
                        console.log(`   - Link: ${originalUrl.substring(0, 50)}...`);
                      }
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
    
    console.log(`üìä [PATCH] T·ªïng s·ªë link trong d·ªØ li·ªáu m·ªõi: ${totalLinks}`);
    console.log(`üìä [PATCH] S·ªë link ƒë√£ x·ª≠ l√Ω ƒë∆∞·ª£c √°p d·ª•ng: ${processedLinksInNewData}`);
    
    // X·ª≠ l√Ω d·ªØ li·ªáu d·ª±a v√†o c·∫•u tr√∫c th·ª±c t·∫ø t·ª´ API
    let courseName = '';
    
    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu v√† l·∫•y t√™n kh√≥a h·ªçc
    if (kimvanData && typeof kimvanData === 'object') {
      if (kimvanData.name) {
        courseName = kimvanData.name;
      } else if (kimvanData.data && kimvanData.data.name) {
        courseName = kimvanData.data.name;
      } else if (Array.isArray(kimvanData) && kimvanData.length > 0 && kimvanData[0].name) {
        courseName = kimvanData[0].name;
      }
    }
    
    console.log('üìù [PATCH] T√™n kh√≥a h·ªçc ƒë∆∞·ª£c x√°c ƒë·ªãnh:', courseName || 'Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n');
    
    // T·∫°o document m·ªõi ƒë·ªÉ thay th·∫ø d·ªØ li·ªáu c≈©
    const newCourseData = {
      _id: existingCourse._id,
      kimvanId: existingCourse.kimvanId,
      name: courseName || existingCourse.name,
      description: courseName 
        ? `Kh√≥a h·ªçc ${courseName}` 
        : existingCourse.description,
      price: existingCourse.price || 500000,
      status: existingCourse.status || 'active',
      createdAt: existingCourse.createdAt || new Date(),
      updatedAt: new Date(),
      processedDriveFiles: processedFiles, // Gi·ªØ nguy√™n danh s√°ch file ƒë√£ x·ª≠ l√Ω
      originalData: kimvanData // D·ªØ li·ªáu m·ªõi ƒë√£ ƒë∆∞·ª£c ghi ƒë√® th√¥ng tin x·ª≠ l√Ω
    };
    
    // Th√™m log ƒë·ªÉ ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω ƒë√∫ng ch∆∞a
    console.log(`üíæ [PATCH] L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v·ªõi ${processedLinksInNewData} link ƒë√£ √°p d·ª•ng`);

    // T·∫°o d·ªØ li·ªáu xem tr∆∞·ªõc ƒë·ªÉ tr·∫£ v·ªÅ client
    const previewData = {
      courseInfo: {
        name: newCourseData.name,
        description: newCourseData.description,
        price: newCourseData.price,
        status: newCourseData.status
      },
      stats: {
        totalLinks,
        processedLinks: processedLinksInNewData,
        totalSheets: kimvanData.sheets?.length || 0,
        preservedProcessedFiles: processedFiles.length
      },
      sampleSheet: kimvanData.sheets && kimvanData.sheets.length > 0 
        ? {
            title: kimvanData.sheets[0]?.properties?.title || 'Sheet 1',
            rowCount: kimvanData.sheets[0]?.data?.[0]?.rowData?.length || 0,
            firstFewRows: kimvanData.sheets[0]?.data?.[0]?.rowData?.slice(0, 5) || []
          }
        : null,
      // Th√™m danh s√°ch ƒë·∫ßy ƒë·ªß c√°c link
      allLinks: {
        processed: [],
        unprocessed: []
      }
    };
    
    // Thu th·∫≠p t·∫•t c·∫£ c√°c link
    if (kimvanData.sheets && Array.isArray(kimvanData.sheets)) {
      kimvanData.sheets.forEach((sheet, sheetIndex) => {
        const sheetTitle = sheet?.properties?.title || `Sheet ${sheetIndex + 1}`;
        
        if (sheet.data && Array.isArray(sheet.data)) {
          sheet.data.forEach((sheetData) => {
            if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
              sheetData.rowData.forEach((row, rowIndex) => {
                if (row.values && Array.isArray(row.values)) {
                  row.values.forEach((cell, cellIndex) => {
                    const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || cell.hyperlink;
                    if (originalUrl) {
                      const displayText = cell.formattedValue || originalUrl;
                      const position = {
                        sheet: sheetTitle,
                        row: rowIndex,
                        col: cellIndex
                      };
                      
                      // S·ª≠a ƒëo·∫°n n√†y ƒë·ªÉ ki·ªÉm tra c·∫£ hai thu·ªôc t√≠nh
                      if (cell.processedUrl || (cell.processedLinks && cell.processedLinks.url)) {
                        // Link ƒë√£ x·ª≠ l√Ω
                        previewData.allLinks.processed.push({
                          originalUrl,
                          processedUrl: cell.processedUrl || cell.processedLinks.url,
                          processedAt: cell.processedAt || cell.processedLinks.processedAt,
                          displayText,
                          position
                        });
                      } else {
                        // Link ch∆∞a x·ª≠ l√Ω
                        previewData.allLinks.unprocessed.push({
                          originalUrl,
                          displayText,
                          position
                        });
                      }
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
    
    console.log(`üìä [PATCH] S·ªë link ƒë√£ x·ª≠ l√Ω trong danh s√°ch: ${previewData.allLinks.processed.length}`);
    console.log(`üìä [PATCH] S·ªë link ch∆∞a x·ª≠ l√Ω trong danh s√°ch: ${previewData.allLinks.unprocessed.length}`);
    
    // N·∫øu ·ªü ch·∫ø ƒë·ªô xem tr∆∞·ªõc, ch·ªâ tr·∫£ v·ªÅ d·ªØ li·ªáu xem tr∆∞·ªõc
    if (previewMode || requestBody.preview === true) {
      console.log('üîç [PATCH] Tr·∫£ v·ªÅ d·ªØ li·ªáu xem tr∆∞·ªõc v√† kh√¥ng c·∫≠p nh·∫≠t database');
      return NextResponse.json({
        success: true,
        message: 'Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë·ªìng b·ªô - Database ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
        preview: true,
        previewData
      });
    }
    
    // N·∫øu kh√¥ng ph·∫£i ch·∫ø ƒë·ªô xem tr∆∞·ªõc, c·∫≠p nh·∫≠t database
    console.log('üíæ [PATCH] C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o database');
    
    // ƒê·∫£m b·∫£o d·ªØ li·ªáu processed links ƒë∆∞·ª£c l∆∞u ƒë√∫ng c√°ch
    // Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng sang chu·ªói JSON v√† ng∆∞·ª£c l·∫°i ƒë·ªÉ b·∫£o to√†n t·∫•t c·∫£ thu·ªôc t√≠nh
    const serializedData = JSON.stringify(kimvanData);
    const deserializedData = JSON.parse(serializedData);
    newCourseData.originalData = deserializedData;
    
    console.log(`üîß [PATCH] D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c serialize ƒë·ªÉ ƒë·∫£m b·∫£o l∆∞u ƒë√∫ng c√°c link ƒë√£ x·ª≠ l√Ω`);
    
    const result = await Course.replaceOne(
      { kimvanId: id },
      newCourseData
    );
    
    if (result.modifiedCount === 0) {
      console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
      return NextResponse.json(
        { 
          success: false,
          message: 'Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t' 
        },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ [PATCH] ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng');
    return NextResponse.json({
      success: true,
      message: 'ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi ho√†n to√†n',
      stats: {
        totalLinks,
        processedLinks: processedLinksInNewData,
        preservedProcessedFiles: processedFiles.length
      },
      updatedFields: Object.keys(newCourseData)
    });
  } catch (error) {
    console.error('‚ùå [PATCH] L·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc:', error);
    return NextResponse.json(
      { 
        success: false,
        message: 'ƒê√£ x·∫£y ra l·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc',
        error: error.message 
      },
      { status: 500 }
    );
  }
} 