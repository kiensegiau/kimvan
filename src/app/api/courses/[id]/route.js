import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { ObjectId } from 'mongodb';
import CryptoJS from 'crypto-js';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { connectDB } from '@/lib/mongodb';
import Enrollment from '@/models/Enrollment';
import { authMiddleware } from '@/lib/auth';

// Kh√≥a m√£ h√≥a - ph·∫£i gi·ªëng v·ªõi kh√≥a ·ªü ph√≠a client
const ENCRYPTION_KEY = 'kimvan-secure-key-2024';

// H√†m m√£ h√≥a d·ªØ li·ªáu v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
const encryptData = (data) => {
  try {
    if (!data) {
      throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√£ h√≥a");
    }
    
    const jsonString = JSON.stringify(data);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a d·ªØ li·ªáu: ${error.message}`);
  }
};

// H√†m m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng
const encryptEntireObject = (obj) => {
  try {
    const jsonString = JSON.stringify(obj);
    return CryptoJS.AES.encrypt(jsonString, ENCRYPTION_KEY).toString();
  } catch (error) {
    console.error("L·ªói m√£ h√≥a to√†n b·ªô ƒë·ªëi t∆∞·ª£ng:", error);
    throw new Error(`Kh√¥ng th·ªÉ m√£ h√≥a: ${error.message}`);
  }
};

// Th√™m h√†m ph√¢n t√≠ch v√† chu·∫©n h√≥a URL ƒë·ªÉ so s√°nh ch√≠nh x√°c h∆°n
function normalizeUrl(url) {
  if (!url) return '';
  
  try {
    // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    let normalizedUrl = url.trim();
    
    // Lo·∫°i b·ªè c√°c tham s·ªë theo d√µi v√† UTM n·∫øu c√≥
    try {
      const urlObj = new URL(normalizedUrl);
      urlObj.searchParams.delete('utm_source');
      urlObj.searchParams.delete('utm_medium');
      urlObj.searchParams.delete('utm_campaign');
      normalizedUrl = urlObj.toString();
    } catch (e) {
      // N·∫øu kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c URL, gi·ªØ nguy√™n
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch URL: ${url}`);
    }
    
    // X·ª≠ l√Ω c√°c URL Google Drive
    if (normalizedUrl.includes('drive.google.com')) {
      // Tr√≠ch xu·∫•t ID c·ªßa file Google Drive t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng kh√°c nhau
      const driveIdMatch = normalizedUrl.match(/\/d\/([^\/\?#]+)/);
      const altDriveIdMatch = normalizedUrl.match(/id=([^&]+)/);
      const driveId = driveIdMatch ? driveIdMatch[1] : (altDriveIdMatch ? altDriveIdMatch[1] : null);
      
      if (driveId) {
        // Chu·∫©n h√≥a th√†nh ƒë·ªãnh d·∫°ng URL Google Drive ti√™u chu·∫©n
        return `https://drive.google.com/file/d/${driveId}`;
      }
    }
    
    return normalizedUrl;
  } catch (error) {
    console.error(`‚ùå L·ªói khi chu·∫©n h√≥a URL: ${url}`, error);
    return url; // Tr·∫£ v·ªÅ URL g·ªëc n·∫øu c√≥ l·ªói
  }
}

// Th√™m h√†m so s√°nh URL s·ª≠ d·ª•ng thu·∫≠t to√°n ƒëo l∆∞·ªùng ƒë·ªô t∆∞∆°ng ƒë·ªìng (Levenshtein)
function calculateSimilarity(str1, str2) {
  if (!str1 || !str2) return 0;
  
  // T√≠nh to√°n kho·∫£ng c√°ch Levenshtein
  const track = Array(str2.length + 1).fill(null).map(() => 
    Array(str1.length + 1).fill(null));
  
  for (let i = 0; i <= str1.length; i += 1) {
    track[0][i] = i;
  }
  
  for (let j = 0; j <= str2.length; j += 1) {
    track[j][0] = j;
  }
  
  for (let j = 1; j <= str2.length; j += 1) {
    for (let i = 1; i <= str1.length; i += 1) {
      const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
      track[j][i] = Math.min(
        track[j][i - 1] + 1, // deletion
        track[j - 1][i] + 1, // insertion
        track[j - 1][i - 1] + indicator, // substitution
      );
    }
  }
  
  // T√≠nh to√°n % gi·ªëng nhau
  const maxLength = Math.max(str1.length, str2.length);
  const distance = track[str2.length][str1.length];
  const similarity = ((maxLength - distance) / maxLength) * 100;
  
  return similarity;
}

// H√†m t√¨m URL ƒë√£ x·ª≠ l√Ω d·ª±a tr√™n ƒë·ªô t∆∞∆°ng ƒë·ªìng
function findProcessedUrl(originalUrl, processedFiles) {
  if (!originalUrl || !processedFiles || processedFiles.length === 0) {
    return null;
  }
  
  // Chu·∫©n h√≥a URL ƒë·ªÉ so s√°nh
  const normalizedUrl = normalizeUrl(originalUrl);
  
  // T√¨m ki·∫øm kh·ªõp ch√≠nh x√°c tr∆∞·ªõc
  const exactMatch = processedFiles.find(file => normalizeUrl(file.originalUrl) === normalizedUrl);
  if (exactMatch) {
    console.log(`‚úÖ [PATCH] T√¨m th·∫•y kh·ªõp ch√≠nh x√°c cho URL: ${originalUrl.substring(0, 50)}...`);
    return exactMatch;
  }
  
  // N·∫øu kh√¥ng c√≥ kh·ªõp ch√≠nh x√°c, t√¨m ki·∫øm URL t∆∞∆°ng t·ª±
  const SIMILARITY_THRESHOLD = 80; // Ng∆∞·ª°ng % t∆∞∆°ng ƒë·ªìng (80%)
  
  // ƒê·ªëi v·ªõi Google Drive, ki·ªÉm tra ID c·ªßa t√†i li·ªáu
  if (normalizedUrl.includes('drive.google.com')) {
    const driveIdMatch = normalizedUrl.match(/\/d\/([^\/\?#]+)/);
    const urlDriveId = driveIdMatch ? driveIdMatch[1] : null;
    
    if (urlDriveId) {
      for (const file of processedFiles) {
        const fileUrlNormalized = normalizeUrl(file.originalUrl);
        const fileIdMatch = fileUrlNormalized.match(/\/d\/([^\/\?#]+)/);
        const fileId = fileIdMatch ? fileIdMatch[1] : null;
        
        if (fileId && fileId === urlDriveId) {
          console.log(`‚úÖ [PATCH] T√¨m th·∫•y kh·ªõp ID Google Drive cho URL: ${originalUrl.substring(0, 50)}...`);
          return file;
        }
      }
    }
  }
  
  // T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng cho t·∫•t c·∫£ c√°c URL ƒë√£ x·ª≠ l√Ω
  let bestMatch = null;
  let highestSimilarity = 0;
  
  for (const file of processedFiles) {
    const fileUrlNormalized = normalizeUrl(file.originalUrl);
    const similarity = calculateSimilarity(normalizedUrl, fileUrlNormalized);
    
    if (similarity > highestSimilarity && similarity >= SIMILARITY_THRESHOLD) {
      highestSimilarity = similarity;
      bestMatch = file;
    }
  }
  
  if (bestMatch) {
    console.log(`‚úÖ [PATCH] T√¨m th·∫•y URL t∆∞∆°ng t·ª± (${highestSimilarity.toFixed(2)}%) cho: ${originalUrl.substring(0, 50)}...`);
    return bestMatch;
  }
  
  return null;
}

// Th√™m h√†m tr√≠ch xu·∫•t ID Google Drive t·ª´ URL
function extractGoogleDriveId(url) {
  if (!url) return null;
  if (!url.includes('drive.google.com/file/d/')) return null;
  
  try {
    const match = url.match(/\/file\/d\/([^\/\?#]+)/);
    return match ? match[1] : null;
  } catch (error) {
    console.error(`‚ùå L·ªói khi tr√≠ch xu·∫•t Google Drive ID t·ª´ URL: ${url}`, error);
    return null;
  }
}

// Th√™m h√†m t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ cho c√°c URL ƒë√£ x·ª≠ l√Ω t·ª´ originalData
function createPositionMap(originalData) {
  // L∆∞u tr·ªØ c√°c link ƒë√£ x·ª≠ l√Ω theo v·ªã tr√≠
  const positionMap = new Map();
  
  if (!originalData || !originalData.sheets || !Array.isArray(originalData.sheets)) {
    console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ d·ªØ li·ªáu sheets trong d·ªØ li·ªáu g·ªëc ƒë·ªÉ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠');
    return positionMap;
  }
  
  console.log(`üìä [PATCH] B·∫Øt ƒë·∫ßu t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ t·ª´ d·ªØ li·ªáu g·ªëc v·ªõi ${originalData.sheets.length} sheets`);
  
  // Duy·ªát qua to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ t√¨m v·ªã tr√≠ c·ªßa link ƒë√£ x·ª≠ l√Ω
  originalData.sheets.forEach((sheet, sheetIndex) => {
    const sheetTitle = sheet?.properties?.title || `Sheet ${sheetIndex + 1}`;
    console.log(`üîç [PATCH] ƒêang qu√©t sheet "${sheetTitle}"`);
    
    if (sheet.data && Array.isArray(sheet.data)) {
      sheet.data.forEach((sheetData, dataIndex) => {
        console.log(`üîç [PATCH] ƒêang qu√©t data #${dataIndex} trong sheet "${sheetTitle}"`);
        
        if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
          console.log(`üîç [PATCH] S·ªë h√†ng trong data #${dataIndex}: ${sheetData.rowData.length}`);
          
          sheetData.rowData.forEach((row, rowIndex) => {
            if (row.values && Array.isArray(row.values)) {
              row.values.forEach((cell, cellIndex) => {
                // Ki·ªÉm tra c√°c lo·∫°i URL v√† tr·∫°ng th√°i c·ªßa cell
                const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || 
                                  cell.hyperlink || 
                                  cell.originalUrl; // Ki·ªÉm tra c·∫£ tr∆∞·ªùng originalUrl ƒë√£ l∆∞u
                const linkRemoved = cell.linkRemoved === true;
                const isFakeLink = cell.isFakeLink === true;
                
                // Ki·ªÉm tra xem cell n√†y c√≥ ch·ª©a link ƒë√£ x·ª≠ l√Ω kh√¥ng
                // Ki·ªÉm tra c·∫£ c√°c tr∆∞·ªùng c≈© v√† m·ªõi
                const processedUrl = cell.processedUrl || 
                                   (cell.processedLinks && cell.processedLinks.url);
                const processedAt = cell.processedAt || 
                                   (cell.processedLinks && cell.processedLinks.processedAt);
                
                // L∆∞u T·∫§T C·∫¢ c√°c v·ªã tr√≠ c√≥ link (ho·∫∑c ƒë√£ t·ª´ng c√≥ link) ƒë·ªÉ b·∫£o to√†n c·∫•u tr√∫c
                if (originalUrl || linkRemoved) {
                  // T·∫°o kh√≥a v·ªã tr√≠
                  const positionKey = `${sheetTitle}|${rowIndex}|${cellIndex}`;
                  
                  // L∆∞u th√¥ng tin v·ªÅ link
                  positionMap.set(positionKey, {
                    originalUrl: originalUrl || null,
                    processedUrl: processedUrl || null,
                    processedAt: processedAt || null,
                    isProcessed: !!processedUrl,
                    linkRemoved: linkRemoved,
                    isFakeLink: isFakeLink,
                    position: {
                      sheet: sheetTitle,
                      row: rowIndex,
                      col: cellIndex
                    }
                  });
                  
                  if (processedUrl) {
                    console.log(`üìç [PATCH] ƒê√£ l∆∞u v·ªã tr√≠ cho link ƒë√£ x·ª≠ l√Ω: ${positionKey}`);
                    console.log(`   - URL g·ªëc: ${originalUrl ? originalUrl.substring(0, 50) + '...' : '[Link ƒë√£ b·ªã x√≥a]'}`);
                    console.log(`   - URL ƒë√£ x·ª≠ l√Ω: ${processedUrl.substring(0, 50)}...`);
                  } else if (linkRemoved) {
                    console.log(`üìç [PATCH] ƒê√£ l∆∞u v·ªã tr√≠ cho link ƒë√£ b·ªã x√≥a: ${positionKey}`);
                    if (originalUrl) {
                      console.log(`   - URL g·ªëc (ƒë√£ l∆∞u): ${originalUrl.substring(0, 50)}...`);
                    }
                  }
                }
              });
            }
          });
        }
      });
    }
  });
  
  // Ki·ªÉm tra trong processedDriveFiles n·∫øu ch∆∞a t√¨m th·∫•y link ƒë√£ x·ª≠ l√Ω n√†o
  const processedCount = Array.from(positionMap.values()).filter(item => item.isProcessed).length;
  
  if (processedCount === 0) {
    console.log(`‚ö†Ô∏è [PATCH] Kh√¥ng t√¨m th·∫•y link ƒë√£ x·ª≠ l√Ω trong originalData, ƒëang ki·ªÉm tra trong processedDriveFiles...`);
    
    // Ki·ªÉm tra xem c√≥ processedDriveFiles kh√¥ng
    if (originalData.processedDriveFiles && Array.isArray(originalData.processedDriveFiles) && originalData.processedDriveFiles.length > 0) {
      console.log(`üîç [PATCH] T√¨m th·∫•y ${originalData.processedDriveFiles.length} link ƒë√£ x·ª≠ l√Ω trong processedDriveFiles`);
      
      // Chuy·ªÉn t·ª´ processedDriveFiles sang positionMap
      originalData.processedDriveFiles.forEach((file, index) => {
        // N·∫øu c√≥ th√¥ng tin position
        if (file.position && file.position.sheet && typeof file.position.row === 'number' && typeof file.position.col === 'number') {
          const positionKey = `${file.position.sheet}|${file.position.row}|${file.position.col}`;
          
          positionMap.set(positionKey, {
            originalUrl: file.originalUrl,
            processedUrl: file.processedUrl,
            processedAt: file.processedAt || new Date(),
            isProcessed: true,
            position: file.position
          });
          
          console.log(`üìç [PATCH] ƒê√£ th√™m t·ª´ processedDriveFiles: ${positionKey}`);
        } else {
          console.log(`‚ö†Ô∏è [PATCH] File #${index} kh√¥ng c√≥ th√¥ng tin v·ªã tr√≠: ${file.originalUrl.substring(0, 50)}...`);
        }
      });
    } else {
      console.log(`‚ö†Ô∏è [PATCH] Kh√¥ng t√¨m th·∫•y processedDriveFiles ho·∫∑c m·∫£ng tr·ªëng`);
    }
  }
  
  // C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng link ƒë√£ x·ª≠ l√Ω
  const finalProcessedCount = Array.from(positionMap.values()).filter(item => item.isProcessed).length;
  console.log(`üìä [PATCH] ƒê√£ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ v·ªõi ${positionMap.size} entries t·ªïng, ${finalProcessedCount} ƒë√£ x·ª≠ l√Ω`);
  return positionMap;
}

// Th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu t·∫°m th·ªùi
const kimvanDataCache = new Map();

// GET: L·∫•y m·ªôt kh√≥a h·ªçc theo ID
export async function GET(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const queryType = searchParams.get('type');
    const secure = searchParams.get('secure') === 'true';
    const responseType = queryType || 'full';
    
    let query = {};
    
    // Truy v·∫•n theo lo·∫°i ID - ∆∞u ti√™n kimvanId tr∆∞·ªõc
    if (queryType === '_id') {
      // Truy v·∫•n theo MongoDB _id 
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      query = { _id: new ObjectId(id) };
    } else {
      // Truy v·∫•n theo kimvanId
      query = { kimvanId: id };
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ t√¨m b·∫±ng _id
      const courseByKimvanId = await Course.findOne(query).lean().exec();
      if (!courseByKimvanId && mongoose.Types.ObjectId.isValid(id)) {
        query = { _id: new ObjectId(id) };
      }
    }
    
    // T√¨m kh√≥a h·ªçc theo query ƒë√£ x√°c ƒë·ªãnh
    const course = await Course.findOne(query).lean().exec();
    
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Bypass authentication check - always return full course data
    const isEnrolled = true;
    const canViewAllCourses = true;
    
    // T·∫°o d·ªØ li·ªáu tr·∫£ v·ªÅ
    const responseData = {
      _id: course._id,
      name: course.name,
      description: course.description,
      price: course.price,
      originalPrice: course.originalPrice,
      status: course.status,
      kimvanId: course.kimvanId,
      spreadsheetId: course.spreadsheetId,
      createdAt: course.createdAt,
      updatedAt: course.updatedAt,
      processedDriveFiles: course.processedDriveFiles || [],
      isEnrolled: isEnrolled,
      canViewAllCourses: canViewAllCourses,
      originalData: course.originalData
    };
    
    // M√£ h√≥a d·ªØ li·ªáu n·∫øu y√™u c·∫ßu
    if (secure) {
      try {
        const encryptedData = encryptData(responseData);
        return NextResponse.json({ _secureData: encryptedData });
      } catch (encryptError) {
        console.error("L·ªói khi m√£ h√≥a d·ªØ li·ªáu:", encryptError);
        return NextResponse.json({ 
          error: 'L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu kh√≥a h·ªçc',
          message: encryptError.message 
        }, { status: 500 });
      }
    }
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a
    return NextResponse.json(responseData);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
}

// PUT: C·∫≠p nh·∫≠t m·ªôt kh√≥a h·ªçc
export async function PUT(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    if (!id) {
      return NextResponse.json(
        { message: 'Thi·∫øu ID kh√≥a h·ªçc' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type');
    
    let query = {};
    
    // Truy v·∫•n theo lo·∫°i ID - ∆∞u ti√™n kimvanId tr∆∞·ªõc
    if (type === '_id') {
      // Truy v·∫•n theo MongoDB _id 
      try {
        query = { _id: new ObjectId(id) };
      } catch (err) {
        return NextResponse.json(
          { message: 'ID kh√¥ng h·ª£p l·ªá' },
          { status: 400 }
        );
      }
    } else {
      // Truy v·∫•n theo kimvanId
      query = { kimvanId: id };
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ t√¨m b·∫±ng _id
      const course = await Course.findOne(query).lean().exec();
      if (!course) {
        try {
          if (mongoose.Types.ObjectId.isValid(id)) {
            query = { _id: new ObjectId(id) };
          }
        } catch (err) {
          // N·∫øu kh√¥ng ph·∫£i ObjectId h·ª£p l·ªá, gi·ªØ nguy√™n query kimvanId
        }
      }
    }
    
    const course = await Course.findOne(query).lean().exec();
    if (!course) {
      return NextResponse.json(
        { message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' },
        { status: 404 }
      );
    }
    
    const data = await request.json();
    
    // Lo·∫°i b·ªè tr∆∞·ªùng _id ƒë·ªÉ tr√°nh l·ªói khi c·∫≠p nh·∫≠t
    delete data._id;
    
    // Gi·ªØ nguy√™n d·ªØ li·ªáu g·ªëc
    data.originalData = course.originalData;
    
    const result = await Course.updateOne(
      query,
      { $set: data }
    );
    
    if (result.modifiedCount === 0) {
      return NextResponse.json(
        { message: 'Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t' },
        { status: 400 }
      );
    }
    
    return NextResponse.json({ 
      message: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
      success: true
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:', error);
    return NextResponse.json(
      { 
        message: 'L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc',
        error: error.message 
      },
      { status: 500 }
    );
  }
}

// DELETE: X√≥a m·ªôt kh√≥a h·ªçc
export async function DELETE(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra xem c√≥ tham s·ªë type=_id kh√¥ng
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type');
    
    let query = {};
    let result;
    
    // Truy v·∫•n theo lo·∫°i ID
    if (type === '_id') {
      // X√≥a theo MongoDB _id
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      result = await Course.deleteOne({ _id: new ObjectId(id) });
    } else {
      // Th·ª≠ x√≥a theo kimvanId tr∆∞·ªõc
      result = await Course.deleteOne({ kimvanId: id });
      
      // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng kimvanId, th·ª≠ x√≥a b·∫±ng _id
      if (result.deletedCount === 0 && mongoose.Types.ObjectId.isValid(id)) {
        result = await Course.deleteOne({ _id: new ObjectId(id) });
      }
    }
    
    if (result.deletedCount === 0) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    return NextResponse.json(
      { 
        success: true,
        message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' 
      }, 
      { status: 200 }
    );
  } catch (error) {
    console.error('L·ªói khi x√≥a kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x√≥a kh√≥a h·ªçc. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.',
      error: error.message
    }, { status: 500 });
  }
}

// PATCH: ƒê·ªìng b·ªô m·ªôt kh√≥a h·ªçc t·ª´ Kimvan
export async function PATCH(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    console.log('üîÑ [PATCH] B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô kh√≥a h·ªçc v·ªõi ID:', id);
    
    // L·∫•y body request n·∫øu c√≥
    let requestBody = {};
    try {
      requestBody = await request.json();
      console.log('üìù [PATCH] D·ªØ li·ªáu t·ª´ request body:', JSON.stringify(requestBody));
    } catch (e) {
      console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ request body ho·∫∑c l·ªói parse JSON:', e.message);
    }
    
    // Ki·ªÉm tra ch·∫ø ƒë·ªô xem tr∆∞·ªõc v√† c√°c tham s·ªë kh√°c
    const previewMode = requestBody.preview === true;
    const applyProcessedLinks = requestBody.applyProcessedLinks === true;
    const useCache = requestBody.useCache === true || applyProcessedLinks === true;
    
    console.log(`üîç [PATCH] Ch·∫ø ƒë·ªô xem tr∆∞·ªõc: ${previewMode ? 'B·∫≠t' : 'T·∫Øt'}`);
    console.log(`üîó [PATCH] √Åp d·ª•ng link ƒë√£ x·ª≠ l√Ω: ${applyProcessedLinks ? 'B·∫≠t' : 'T·∫Øt'}`);
    console.log(`üíæ [PATCH] S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l∆∞u t·∫°m: ${useCache ? 'B·∫≠t' : 'T·∫Øt'}`);
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    if (!id) {
      return NextResponse.json(
        { message: 'Thi·∫øu ID kh√≥a h·ªçc' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra xem kh√≥a h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
    console.log('üîç [PATCH] T√¨m ki·∫øm kh√≥a h·ªçc trong database v·ªõi kimvanId:', id);
    const existingCourse = await Course.findOne({ kimvanId: id }).lean().exec();
    if (!existingCourse) {
      console.log('‚ùå [PATCH] Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc v·ªõi kimvanId:', id);
      return NextResponse.json(
        { 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ ƒë·ªìng b·ªô' 
        },
        { status: 404 }
      );
    }
    
    console.log('‚úÖ [PATCH] ƒê√£ t√¨m th·∫•y kh√≥a h·ªçc:', existingCourse._id.toString());
    
    // Ki·ªÉm tra d·ªØ li·ªáu originalData
    console.log('=== TH√îNG TIN D·ªÆ LI·ªÜU G·ªêC ===');
    const hasOriginalData = !!existingCourse.originalData;
    console.log('1. C√≥ d·ªØ li·ªáu g·ªëc:', hasOriginalData);
    
    if (hasOriginalData) {
      const sheetCount = existingCourse.originalData.sheets?.length || 0;
      console.log('2. S·ªë l∆∞·ª£ng sheets trong d·ªØ li·ªáu g·ªëc:', sheetCount);
      
      if (sheetCount > 0) {
        const sampleSheet = existingCourse.originalData.sheets[0];
        const rowCount = sampleSheet?.data?.[0]?.rowData?.length || 0;
        console.log('3. S·ªë l∆∞·ª£ng h√†ng trong sheet ƒë·∫ßu ti√™n:', rowCount);
        
        // Ki·ªÉm tra xem c√≥ link ƒë√£ x·ª≠ l√Ω trong d·ªØ li·ªáu g·ªëc kh√¥ng
        let processedLinkCount = 0;
        if (sampleSheet?.data?.[0]?.rowData) {
          sampleSheet.data[0].rowData.forEach(row => {
            if (row.values) {
              row.values.forEach(cell => {
                const processedUrl = cell.processedUrl || (cell.processedLinks && cell.processedLinks.url);
                if (processedUrl) processedLinkCount++;
              });
            }
          });
        }
        console.log('4. S·ªë l∆∞·ª£ng link ƒë√£ x·ª≠ l√Ω t√¨m th·∫•y trong sheet ƒë·∫ßu ti√™n:', processedLinkCount);
      }
    }
    
    // T·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ t·ª´ d·ªØ li·ªáu g·ªëc (ch·ª©a c·∫£ link ƒë√£ x·ª≠ l√Ω)
    const positionMap = createPositionMap(existingCourse.originalData);
    console.log(`üìä [PATCH] ƒê√£ t·∫°o b·∫£n ƒë·ªì v·ªã tr√≠ v·ªõi ${positionMap.size} v·ªã tr√≠ ƒë√£ x·ª≠ l√Ω`);
    
    // Log chi ti·∫øt v·ªÅ positionMap ƒë·ªÉ debug
    console.log('=== TH√îNG TIN CHI TI·∫æT POSITION MAP ===');
    const positionKeys = Array.from(positionMap.keys());
    console.log('1. S·ªë l∆∞·ª£ng v·ªã tr√≠ trong map:', positionKeys.length);
    
    if (positionKeys.length > 0) {
      console.log('2. M·∫´u v√†i v·ªã tr√≠ ƒë·∫ßu ti√™n:', positionKeys.slice(0, 5));
      
      // Ph√¢n t√≠ch ƒë·ªãnh d·∫°ng key
      const keySample = positionKeys[0];
      const keyParts = keySample.split('|');
      console.log('3. ƒê·ªãnh d·∫°ng key:', {
        sheet: keyParts[0],
        row: keyParts[1],
        col: keyParts[2],
        full: keySample
      });
      
      // L·∫•y m·∫´u gi√° tr·ªã c·ªßa position ƒë·∫ßu ti√™n
      const firstPositionValue = positionMap.get(positionKeys[0]);
      console.log('4. M·∫´u d·ªØ li·ªáu t·∫°i v·ªã tr√≠ ƒë·∫ßu ti√™n:', firstPositionValue);
    }
    
    // Khai b√°o bi·∫øn ƒë·ªÉ l∆∞u d·ªØ li·ªáu Kimvan
    let kimvanData;
    
    // Ki·ªÉm tra n·∫øu s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ b·ªô nh·ªõ t·∫°m
    if (useCache && kimvanDataCache.has(id)) {
      console.log('üíæ [PATCH] S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l∆∞u trong b·ªô nh·ªõ t·∫°m');
      kimvanData = kimvanDataCache.get(id);
    } else {
      // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi t·ª´ Kimvan
      console.log(`üîÑ [PATCH] ƒêang g·ªçi API kimvan v·ªõi ID: ${id}`);
      const kimvanUrl = new URL(request.url);
      const origin = kimvanUrl.origin;
      const kimvanApiUrl = `${origin}/api/spreadsheets/${id}`;
      console.log(`üåê [PATCH] URL ƒë√≠ch: ${kimvanApiUrl}`);
      
      // Chu·∫©n b·ªã options cho fetch request
      const fetchOptions = {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      };
      
      // N·∫øu c√≥ originalId, th√™m v√†o body c·ªßa request
      if (requestBody.originalId) {
        console.log(`üìé [PATCH] Th√™m originalId: ${requestBody.originalId} v√†o request`);
        fetchOptions.method = 'POST';
        fetchOptions.body = JSON.stringify({
          originalId: requestBody.originalId
        });
      }
      
      const kimvanResponse = await fetch(kimvanApiUrl, fetchOptions);
      
      if (!kimvanResponse.ok) {
        console.log(`‚ùå [PATCH] L·ªói khi g·ªçi API: ${kimvanResponse.status}`);
        return NextResponse.json(
          { 
            success: false,
            message: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Kimvan API',
            error: `L·ªói: ${kimvanResponse.status}` 
          },
          { status: 500 }
        );
      }
      
      console.log('‚úÖ [PATCH] ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ kimvan API th√†nh c√¥ng!');
      kimvanData = await kimvanResponse.json();
      
      // L∆∞u d·ªØ li·ªáu v√†o b·ªô nh·ªõ t·∫°m n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô xem tr∆∞·ªõc
      if (previewMode) {
        console.log('üíæ [PATCH] L∆∞u d·ªØ li·ªáu v√†o b·ªô nh·ªõ t·∫°m');
        kimvanDataCache.set(id, kimvanData);
        
        // Thi·∫øt l·∫≠p x√≥a cache sau 30 ph√∫t
        setTimeout(() => {
          console.log(`üóëÔ∏è [PATCH] X√≥a d·ªØ li·ªáu t·∫°m cho kh√≥a h·ªçc ${id}`);
          kimvanDataCache.delete(id);
        }, 30 * 60 * 1000);
      }
    }
    
    // Th√™m log ƒë·ªÉ ki·ªÉm tra xem kimvanData c√≥ ch·ª©a th√¥ng tin ƒë√£ x·ª≠ l√Ω kh√¥ng
    console.log(`üîç [PATCH] Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u:`);
    let processedUrlCount = 0;
    if (kimvanData.sheets && Array.isArray(kimvanData.sheets)) {
      kimvanData.sheets.forEach(sheet => {
        if (sheet.data && Array.isArray(sheet.data)) {
          sheet.data.forEach(sheetData => {
            if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
              sheetData.rowData.forEach(row => {
                if (row.values && Array.isArray(row.values)) {
                  row.values.forEach(cell => {
                    if (cell.processedLinks && cell.processedLinks.url) {
                      processedUrlCount++;
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
    console.log(`üî¢ [PATCH] S·ªë link ƒë√£ x·ª≠ l√Ω trong d·ªØ li·ªáu s·∫Ω l∆∞u: ${processedUrlCount}`);

    // ƒê·∫øm s·ªë l∆∞·ª£ng link trong d·ªØ li·ªáu m·ªõi
    let processedLinksInNewData = 0;
    let totalLinks = 0;
    
    console.log(`üîÑ [PATCH] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ KimVan, ki·ªÉm tra kh·ªõp v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω...`);
    
    if (kimvanData.sheets && Array.isArray(kimvanData.sheets)) {
      kimvanData.sheets.forEach((sheet, sheetIndex) => {
        const sheetTitle = sheet?.properties?.title || `Sheet ${sheetIndex + 1}`;
        console.log(`üîç [PATCH] ƒêang x·ª≠ l√Ω sheet "${sheetTitle}"`);
        
        if (sheet.data && Array.isArray(sheet.data)) {
          sheet.data.forEach((sheetData, dataIndex) => {
            if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
              sheetData.rowData.forEach((row, rowIndex) => {
                if (row.values && Array.isArray(row.values)) {
                  row.values.forEach((cell, cellIndex) => {
                    // Ki·ªÉm tra n·∫øu cell c√≥ link ho·∫∑c ƒë√£ b·ªã x√≥a link
                    const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || cell.hyperlink || cell.originalUrl;
                    const wasLinkRemoved = cell.linkRemoved === true;
                    
                    if (originalUrl || wasLinkRemoved) {
                      totalLinks++;
                      
                      // Ki·ªÉm tra xem link c√≥ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† gi·∫£ kh√¥ng t·ª´ API spreadsheets
                      const isFakeLink = cell.isFakeLink === true;
                      
                      if (isFakeLink || wasLinkRemoved) {
                        console.log(`üö´ [PATCH] ${wasLinkRemoved ? 'Link gi·∫£ m·∫°o ƒë√£ b·ªã x√≥a' : 'Ph√°t hi·ªán link gi·∫£ m·∫°o'} t·∫°i Sheet ${sheetTitle}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}`);
                      }
                      
                      // CH·ªà s·ª≠ d·ª•ng v·ªã tr√≠ ƒë·ªÉ t√¨m ki·∫øm, b·ªè qua n·ªôi dung URL
                      const positionKey = `${sheetTitle}|${rowIndex}|${cellIndex}`;
                      
                      // T√¨m ki·∫øm d·ª±a tr√™n v·ªã tr√≠
                      if (positionMap.has(positionKey)) {
                        const processedInfo = positionMap.get(positionKey);
                        
                        // Ki·ªÉm tra xem c√≥ originalUrl hay processedUrl kh√¥ng
                        // ∆Øu ti√™n s·ª≠ d·ª•ng processedUrl n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng originalUrl
                        const urlToUse = processedInfo.processedUrl || processedInfo.originalUrl;
                        
                        if (urlToUse) {
                          processedLinksInNewData++;
                          
                          // Th√™m th√¥ng tin v·ªÅ file ƒë√£ x·ª≠ l√Ω v√†o cell - ƒê·∫¢M B·∫¢O L∆ØU V√ÄO MONGODB
                          if (!cell.processedLinks) {
                            cell.processedLinks = {};
                          }
                          
                          // L∆∞u c·∫£ processedUrl v√† originalUrl ƒë·ªÉ tham chi·∫øu
                          cell.processedLinks.url = processedInfo.processedUrl || null;
                          cell.processedLinks.originalUrl = processedInfo.originalUrl;
                          cell.processedLinks.processedAt = processedInfo.processedAt;
                          cell.processedLinks.usedOriginalUrl = !processedInfo.processedUrl; // ƒê√°nh d·∫•u ƒë√£ s·ª≠ d·ª•ng URL g·ªëc
                          
                          // Th√™m th√¥ng tin v·ªã tr√≠ ƒë·ªÉ d·ªÖ truy xu·∫•t sau n√†y
                          cell.processedLinks.position = {
                            sheet: sheetTitle,
                            row: rowIndex,
                            col: cellIndex
                          };
                          
                          // C√°ch c≈© - c√≥ th·ªÉ b·ªã MongoDB b·ªè qua
                          cell.processedUrl = processedInfo.processedUrl;
                          cell.processedAt = processedInfo.processedAt;
                          
                          // QUAN TR·ªåNG: ƒê·∫£m b·∫£o URL ƒë∆∞·ª£c th√™m v√†o c·∫•u tr√∫c cell ƒë·ªÉ hi·ªÉn th·ªã trong UI
                          // T·∫°o l·∫°i c·∫•u tr√∫c link trong cell
                          if (!cell.userEnteredFormat) {
                            cell.userEnteredFormat = {};
                          }
                          if (!cell.userEnteredFormat.textFormat) {
                            cell.userEnteredFormat.textFormat = {};
                          }
                          if (!cell.userEnteredFormat.textFormat.link) {
                            cell.userEnteredFormat.textFormat.link = {};
                          }
                          
                          // Th√™m URL v√†o c·∫£ hai v·ªã tr√≠ ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã
                          cell.userEnteredFormat.textFormat.link.uri = urlToUse;
                          cell.hyperlink = urlToUse;
                          
                          // N·∫øu kh√¥ng c√≥ text hi·ªÉn th·ªã, th√™m m·ªôt text m·∫∑c ƒë·ªãnh
                          if (!cell.formattedValue) {
                            cell.formattedValue = processedInfo.processedUrl ? "T√†i li·ªáu ƒë√£ x·ª≠ l√Ω" : "T√†i li·ªáu g·ªëc";
                          }
                          
                          console.log(`‚úÖ [PATCH] Sheet ${sheetTitle}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: ƒê√£ √°p d·ª•ng link theo v·ªã tr√≠`);
                          if (wasLinkRemoved) {
                            console.log(`   - Link g·ªëc: [ƒê√£ x√≥a link gi·∫£ m·∫°o]`);
                          } else {
                            console.log(`   - Link g·ªëc: ${originalUrl ? originalUrl.substring(0, 50) + '...' : '[Unknown]'}`);
                          }
                          
                          if (processedInfo.processedUrl) {
                            console.log(`   - Link ƒë√£ x·ª≠ l√Ω: ${processedInfo.processedUrl.substring(0, 50)}...`);
                          } else {
                            console.log(`   - S·ª≠ d·ª•ng link g·ªëc (ch∆∞a x·ª≠ l√Ω): ${processedInfo.originalUrl.substring(0, 50)}...`);
                          }
                          
                          console.log(`   - ƒê√£ th√™m link v√†o c·∫•u tr√∫c cell ƒë·ªÉ hi·ªÉn th·ªã trong UI`);
                        } else if (isFakeLink || wasLinkRemoved) {
                          // N·∫øu l√† link gi·∫£ ƒë√£ b·ªã x√≥a, nh∆∞ng kh√¥ng c√≥ b·∫£n ƒë√£ x·ª≠ l√Ω
                          console.log(`‚ÑπÔ∏è [PATCH] Sheet ${sheetTitle}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: Link gi·∫£ m·∫°o ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω`);
                        }
                      } else {
                        // Kh√¥ng t√¨m th·∫•y trong positionMap
                        console.log(`‚ÑπÔ∏è [PATCH] Sheet ${sheetTitle}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: Kh√¥ng t√¨m th·∫•y link trong b·∫£n ƒë·ªì v·ªã tr√≠`);
                        
                        // N·∫øu l√† link gi·∫£ m·∫°o, s·ª≠ d·ª•ng hyperlink thay v√¨ URL gi·∫£
                        if (isFakeLink && cell.hyperlink) {
                          console.log(`üîÑ [PATCH] S·ª≠ d·ª•ng hyperlink l√†m d·ª± ph√≤ng: ${cell.hyperlink}`);
                          
                          // Th√™m th√¥ng tin v·ªÅ file v√†o cell
                          if (!cell.processedLinks) {
                            cell.processedLinks = {};
                          }
                          
                          cell.processedLinks.url = cell.hyperlink;
                          cell.processedLinks.originalUrl = originalUrl;
                          cell.processedLinks.processedAt = new Date();
                          cell.processedLinks.usedHyperlink = true; // ƒê√°nh d·∫•u ƒë√£ s·ª≠ d·ª•ng hyperlink
                          
                          // Th√™m th√¥ng tin v·ªã tr√≠ ƒë·ªÉ d·ªÖ truy xu·∫•t sau n√†y
                          cell.processedLinks.position = {
                            sheet: sheetTitle,
                            row: rowIndex,
                            col: cellIndex
                          };
                          
                          // ƒê·∫£m b·∫£o URL ƒë∆∞·ª£c th√™m v√†o c·∫•u tr√∫c cell ƒë·ªÉ hi·ªÉn th·ªã trong UI
                          if (!cell.userEnteredFormat) {
                            cell.userEnteredFormat = {};
                          }
                          if (!cell.userEnteredFormat.textFormat) {
                            cell.userEnteredFormat.textFormat = {};
                          }
                          if (!cell.userEnteredFormat.textFormat.link) {
                            cell.userEnteredFormat.textFormat.link = {};
                          }
                          
                          // Th√™m hyperlink v√†o c√°c v·ªã tr√≠ ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã
                          cell.userEnteredFormat.textFormat.link.uri = cell.hyperlink;
                          
                          // ƒê√°nh d·∫•u ƒë√£ s·ª≠ d·ª•ng hyperlink
                          processedLinksInNewData++;
                          
                          console.log(`‚úÖ [PATCH] Sheet ${sheetTitle}, H√†ng ${rowIndex + 1}, C·ªôt ${cellIndex + 1}: ƒê√£ s·ª≠ d·ª•ng hyperlink l√†m d·ª± ph√≤ng`);
                        }
                      }
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
    
    console.log(`üìä [PATCH] T·ªïng s·ªë link trong d·ªØ li·ªáu m·ªõi: ${totalLinks}`);
    console.log(`üìä [PATCH] S·ªë link ƒë√£ x·ª≠ l√Ω ƒë∆∞·ª£c √°p d·ª•ng: ${processedLinksInNewData}`);
    
    // X·ª≠ l√Ω d·ªØ li·ªáu d·ª±a v√†o c·∫•u tr√∫c th·ª±c t·∫ø t·ª´ API
    let courseName = '';
    
    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu v√† l·∫•y t√™n kh√≥a h·ªçc
    if (kimvanData && typeof kimvanData === 'object') {
      if (kimvanData.name) {
        courseName = kimvanData.name;
      } else if (kimvanData.data && kimvanData.data.name) {
        courseName = kimvanData.data.name;
      } else if (Array.isArray(kimvanData) && kimvanData.length > 0 && kimvanData[0].name) {
        courseName = kimvanData[0].name;
      }
    }
    
    console.log('üìù [PATCH] T√™n kh√≥a h·ªçc ƒë∆∞·ª£c x√°c ƒë·ªãnh:', courseName || 'Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n');
    
    // T·∫°o document m·ªõi ƒë·ªÉ thay th·∫ø d·ªØ li·ªáu c≈©
    const newCourseData = {
      _id: existingCourse._id,
      kimvanId: existingCourse.kimvanId,
      name: courseName || existingCourse.name,
      description: courseName 
        ? `Kh√≥a h·ªçc ${courseName}` 
        : existingCourse.description,
      price: existingCourse.price || 500000,
      status: existingCourse.status || 'active',
      createdAt: existingCourse.createdAt || new Date(),
      updatedAt: new Date(),
      processedDriveFiles: existingCourse.processedDriveFiles || [],
      originalData: kimvanData
    };
    
    // Th√™m log ƒë·ªÉ ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω ƒë√∫ng ch∆∞a
    console.log(`üíæ [PATCH] L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v·ªõi ${processedLinksInNewData} link ƒë√£ √°p d·ª•ng`);

    // T·∫°o d·ªØ li·ªáu xem tr∆∞·ªõc ƒë·ªÉ tr·∫£ v·ªÅ client
    const previewData = {
      courseInfo: {
        name: newCourseData.name,
        description: newCourseData.description,
        price: newCourseData.price,
        status: newCourseData.status
      },
      stats: {
        totalLinks,
        processedLinks: processedLinksInNewData,
        totalSheets: kimvanData.sheets?.length || 0,
        preservedProcessedFiles: positionMap.size
      },
      sampleSheet: kimvanData.sheets && kimvanData.sheets.length > 0 
        ? {
            title: kimvanData.sheets[0]?.properties?.title || 'Sheet 1',
            rowCount: kimvanData.sheets[0]?.data?.[0]?.rowData?.length || 0,
            firstFewRows: kimvanData.sheets[0]?.data?.[0]?.rowData?.slice(0, 5) || []
          }
        : null,
      // Th√™m danh s√°ch ƒë·∫ßy ƒë·ªß c√°c link
      allLinks: {
        processed: [],
        unprocessed: []
      },
      // Th√™m danh s√°ch processedLinks ƒë·ªÉ c√≥ th·ªÉ ph√¢n t√≠ch
      processedLinks: Array.from(positionMap.entries()).map(([key, value]) => {
        const parts = key.split('|');
        return {
          position: {
            key,
            sheet: parts[0],
            row: parseInt(parts[1]),
            col: parseInt(parts[2])
          },
          originalUrl: value.originalUrl,
          processedUrl: value.processedUrl,
          processedAt: value.processedAt
        };
      }),
      // Th√™m th√¥ng tin v·ªÅ link gi·∫£ m·∫°o
      fakeLinksInfo: {
        detectionEnabled: true,
        removalEnabled: true,
        message: "API KimVan tr·∫£ v·ªÅ c√°c link gi·∫£ m·∫°o. C√°c link gi·∫£ m·∫°o ƒë√£ b·ªã x√≥a ho√†n to√†n kh·ªèi d·ªØ li·ªáu."
      }
    };
    
    // Thu th·∫≠p t·∫•t c·∫£ c√°c link
    if (kimvanData.sheets && Array.isArray(kimvanData.sheets)) {
      kimvanData.sheets.forEach((sheet, sheetIndex) => {
        const sheetTitle = sheet?.properties?.title || `Sheet ${sheetIndex + 1}`;
        
        if (sheet.data && Array.isArray(sheet.data)) {
          sheet.data.forEach((sheetData) => {
            if (sheetData.rowData && Array.isArray(sheetData.rowData)) {
              sheetData.rowData.forEach((row, rowIndex) => {
                if (row.values && Array.isArray(row.values)) {
                  row.values.forEach((cell, cellIndex) => {
                    const originalUrl = cell.userEnteredFormat?.textFormat?.link?.uri || cell.hyperlink || cell.originalUrl;
                    const wasLinkRemoved = cell.linkRemoved === true;
                    const isFakeLink = cell.isFakeLink === true;
                    const processedUrl = cell.processedUrl || (cell.processedLinks && cell.processedLinks.url);
                    
                    if (originalUrl || wasLinkRemoved) {
                      const displayText = cell.formattedValue || "Link ƒë√£ b·ªã x√≥a";
                      const position = {
                        sheet: sheetTitle,
                        row: rowIndex,
                        col: cellIndex
                      };
                      
                      // Chu·∫©n b·ªã th√¥ng tin link
                      const linkInfo = {
                        originalUrl: originalUrl || "Link ƒë√£ b·ªã x√≥a",
                        displayText,
                        position,
                        wasLinkRemoved,
                        isFakeLink
                      };
                      
                      // Ph√¢n lo·∫°i link
                      if (processedUrl) {
                        linkInfo.processedUrl = processedUrl;
                        linkInfo.processedAt = cell.processedAt || (cell.processedLinks && cell.processedLinks.processedAt);
                        previewData.allLinks.processed.push(linkInfo);
                      } else {
                        previewData.allLinks.unprocessed.push(linkInfo);
                      }
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
    
    console.log(`üìä [PATCH] S·ªë link ƒë√£ x·ª≠ l√Ω trong danh s√°ch: ${previewData.allLinks.processed.length}`);
    console.log(`üìä [PATCH] S·ªë link ch∆∞a x·ª≠ l√Ω trong danh s√°ch: ${previewData.allLinks.unprocessed.length}`);
    
    // N·∫øu ·ªü ch·∫ø ƒë·ªô xem tr∆∞·ªõc, ch·ªâ tr·∫£ v·ªÅ d·ªØ li·ªáu xem tr∆∞·ªõc
    if (previewMode || requestBody.preview === true) {
      console.log('üîç [PATCH] Tr·∫£ v·ªÅ d·ªØ li·ªáu xem tr∆∞·ªõc v√† kh√¥ng c·∫≠p nh·∫≠t database');
      return NextResponse.json({
        success: true,
        message: 'Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë·ªìng b·ªô - Database ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
        preview: true,
        previewData
      });
    }
    
    // N·∫øu kh√¥ng ph·∫£i ch·∫ø ƒë·ªô xem tr∆∞·ªõc, c·∫≠p nh·∫≠t database
    console.log('üíæ [PATCH] C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o database');
    
    // Tr∆∞·ªõc khi c·∫≠p nh·∫≠t d·ªØ li·ªáu, ƒë·∫£m b·∫£o gi·ªØ l·∫°i th√¥ng tin processedDriveFiles hi·ªán c√≥
    newCourseData.processedDriveFiles = existingCourse.processedDriveFiles || [];
    
    // Th√™m th√¥ng tin t·ª´ positionMap v√†o processedDriveFiles n·∫øu ch∆∞a c√≥
    // Vi·ªác n√†y gi√∫p l∆∞u tr·ªØ th√¥ng tin v·ªã tr√≠ cho c√°c l·∫ßn ƒë·ªìng b·ªô sau
    if (positionMap.size > 0) {
      console.log(`üìù [PATCH] C·∫≠p nh·∫≠t th√¥ng tin v·ªã tr√≠ v√†o processedDriveFiles`);
      
      // L·∫•y t·∫•t c·∫£ c√°c entry t·ª´ positionMap, k·ªÉ c·∫£ ch∆∞a x·ª≠ l√Ω
      // Ch·ªâ c·∫ßn ƒë·∫£m b·∫£o c√≥ th√¥ng tin v·ªã tr√≠
      const allEntries = Array.from(positionMap.entries())
        .map(([key, value]) => {
          const parts = key.split('|');
          return {
            originalUrl: value.originalUrl,
            processedUrl: value.processedUrl, // C√≥ th·ªÉ null
            processedAt: value.processedAt, // C√≥ th·ªÉ null
            position: {
              sheet: parts[0],
              row: parseInt(parts[1]),
              col: parseInt(parts[2])
            }
          };
        });
      
      // T·∫°o Map cho c√°c processedDriveFiles hi·ªán c√≥ ƒë·ªÉ d·ªÖ d√†ng t√¨m ki·∫øm
      const existingFilesByPosition = {};
      newCourseData.processedDriveFiles.forEach(file => {
        if (file.position) {
          const posKey = `${file.position.sheet}|${file.position.row}|${file.position.col}`;
          existingFilesByPosition[posKey] = file;
        }
      });
      
      // Th√™m ho·∫∑c c·∫≠p nh·∫≠t c√°c entries
      allEntries.forEach(entry => {
        const posKey = `${entry.position.sheet}|${entry.position.row}|${entry.position.col}`;
        
        if (existingFilesByPosition[posKey]) {
          // V·ªã tr√≠ ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra xem c√≥ c·∫ßn c·∫≠p nh·∫≠t kh√¥ng
          const existingFile = existingFilesByPosition[posKey];
          
          // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu c√≥ d·ªØ li·ªáu m·ªõi
          if (entry.processedUrl && entry.processedUrl !== existingFile.processedUrl) {
            existingFile.processedUrl = entry.processedUrl;
            existingFile.processedAt = entry.processedAt || new Date();
            console.log(`üîÑ [PATCH] ƒê√£ c·∫≠p nh·∫≠t link ƒë√£ x·ª≠ l√Ω cho v·ªã tr√≠ ${posKey}`);
          }
          
          // Lu√¥n c·∫≠p nh·∫≠t originalUrl m·ªõi (URL t·ª´ API)
          existingFile.originalUrl = entry.originalUrl;
        } 
        else if (!existingFilesByPosition[posKey]) {
          // V·ªã tr√≠ ch∆∞a t·ªìn t·∫°i, th√™m m·ªõi v√†o processedDriveFiles
          newCourseData.processedDriveFiles.push(entry);
          console.log(`‚ûï [PATCH] ƒê√£ th√™m v·ªã tr√≠ m·ªõi v√†o processedDriveFiles: ${posKey}`);
        }
      });
      
      console.log(`üìä [PATCH] processedDriveFiles sau khi c·∫≠p nh·∫≠t: ${newCourseData.processedDriveFiles.length} entries`);
    }
    
    // ƒê·∫£m b·∫£o d·ªØ li·ªáu processed links ƒë∆∞·ª£c l∆∞u ƒë√∫ng c√°ch
    // Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng sang chu·ªói JSON v√† ng∆∞·ª£c l·∫°i ƒë·ªÉ b·∫£o to√†n t·∫•t c·∫£ thu·ªôc t√≠nh
    const serializedData = JSON.stringify(kimvanData);
    const deserializedData = JSON.parse(serializedData);
    newCourseData.originalData = deserializedData;
    
    console.log(`üîß [PATCH] D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c serialize ƒë·ªÉ ƒë·∫£m b·∫£o l∆∞u ƒë√∫ng c√°c link ƒë√£ x·ª≠ l√Ω`);
    
    // C·∫≠p nh·∫≠t th√¥ng tin v·ªÅ processedLinks cho previewData
    if (previewMode) {
      // Th·ªëng k√™ s·ªë l∆∞·ª£ng link gi·∫£ m·∫°o
      let fakeLinksCount = 0;
      let removedLinksCount = 0;
      let totalProcessedFakeLinks = 0;
      let totalProcessedRemovedLinks = 0;
      
      // ƒê·∫øm trong processed links
      if (previewData.allLinks && previewData.allLinks.processed) {
        totalProcessedFakeLinks = previewData.allLinks.processed.filter(link => link.isFakeLink).length;
        totalProcessedRemovedLinks = previewData.allLinks.processed.filter(link => link.wasLinkRemoved).length;
        fakeLinksCount += totalProcessedFakeLinks;
        removedLinksCount += totalProcessedRemovedLinks;
      }
      
      // ƒê·∫øm trong unprocessed links
      let totalUnprocessedFakeLinks = 0;
      let totalUnprocessedRemovedLinks = 0;
      if (previewData.allLinks && previewData.allLinks.unprocessed) {
        totalUnprocessedFakeLinks = previewData.allLinks.unprocessed.filter(link => link.isFakeLink).length;
        totalUnprocessedRemovedLinks = previewData.allLinks.unprocessed.filter(link => link.wasLinkRemoved).length;
        fakeLinksCount += totalUnprocessedFakeLinks;
        removedLinksCount += totalUnprocessedRemovedLinks;
      }
      
      // Th√™m debug info
      previewData.debug = {
        positionMapInfo: {
          totalEntries: positionMap.size,
          processedEntries: Array.from(positionMap.values()).filter(v => v.isProcessed).length,
          sampleEntries: Array.from(positionMap.entries()).slice(0, 5).map(([key, value]) => ({
            key,
            originalUrl: value.originalUrl ? value.originalUrl.substring(0, 50) + '...' : null,
            processedUrl: value.processedUrl ? value.processedUrl.substring(0, 50) + '...' : null,
            isProcessed: value.isProcessed
          }))
        },
        matchingStats: {
          totalLinks,
          processedMatches: processedLinksInNewData,
          totalFakeLinks: fakeLinksCount,
          totalRemovedLinks: removedLinksCount,
          processedFakeLinks: totalProcessedFakeLinks,
          processedRemovedLinks: totalProcessedRemovedLinks,
          unprocessedFakeLinks: totalUnprocessedFakeLinks,
          unprocessedRemovedLinks: totalUnprocessedRemovedLinks
        }
      };
      
      // Th√™m th√¥ng tin t·ª´ processedDriveFiles n·∫øu c√≥
      if (existingCourse.processedDriveFiles && Array.isArray(existingCourse.processedDriveFiles)) {
        console.log(`üîç [PATCH] ƒêang th√™m th√¥ng tin t·ª´ ${existingCourse.processedDriveFiles.length} processedDriveFiles v√†o previewData`);
        
        // Th√™m debug info v·ªÅ processedDriveFiles
        previewData.debug.processedDriveFilesInfo = {
          totalFiles: existingCourse.processedDriveFiles.length,
          filesWithPosition: existingCourse.processedDriveFiles.filter(f => f.position).length,
          sampleFiles: existingCourse.processedDriveFiles.slice(0, 5).map(f => ({
            originalUrl: f.originalUrl ? f.originalUrl.substring(0, 50) + '...' : null,
            processedUrl: f.processedUrl ? f.processedUrl.substring(0, 50) + '...' : null,
            hasPosition: !!f.position,
            position: f.position ? `${f.position.sheet}|${f.position.row}|${f.position.col}` : null
          }))
        };
        
        // Chuy·ªÉn ƒë·ªïi processedDriveFiles th√†nh d·∫°ng ph√π h·ª£p v·ªõi previewData.processedLinks
        const additionalLinks = existingCourse.processedDriveFiles
          .filter(file => file.position && file.position.sheet && typeof file.position.row === 'number' && typeof file.position.col === 'number')
          .map(file => ({
            position: {
              key: `${file.position.sheet}|${file.position.row}|${file.position.col}`,
              sheet: file.position.sheet,
              row: file.position.row,
              col: file.position.col
            },
            originalUrl: file.originalUrl,
            processedUrl: file.processedUrl,
            processedAt: file.processedAt || new Date(),
            fromProcessedDriveFiles: true
          }));
        
        console.log(`‚úÖ [PATCH] ƒê√£ t√¨m th·∫•y ${additionalLinks.length} link c√≥ th√¥ng tin v·ªã tr√≠ trong processedDriveFiles`);
        
        // Th√™m v√†o previewData.processedLinks n·∫øu ch∆∞a c√≥
        if (additionalLinks.length > 0) {
          // T·∫°o Map t·ª´ processedLinks hi·ªán c√≥ ƒë·ªÉ d·ªÖ d√†ng ki·ªÉm tra tr√πng l·∫∑p
          const existingPositionKeys = new Set(
            previewData.processedLinks.map(link => `${link.position.sheet}|${link.position.row}|${link.position.col}`)
          );
          
          // Th√™m c√°c link kh√¥ng tr√πng l·∫∑p
          additionalLinks.forEach(link => {
            const posKey = `${link.position.sheet}|${link.position.row}|${link.position.col}`;
            if (!existingPositionKeys.has(posKey)) {
              previewData.processedLinks.push(link);
              console.log(`‚ûï [PATCH] ƒê√£ th√™m link t·ª´ processedDriveFiles v√†o previewData.processedLinks: ${posKey}`);
            }
          });
          
          console.log(`üìä [PATCH] T·ªïng s·ªë link trong previewData.processedLinks sau khi c·∫≠p nh·∫≠t: ${previewData.processedLinks.length}`);
        }
      }
    }
    
    const result = await Course.replaceOne(
      { kimvanId: id },
      newCourseData
    );
    
    if (result.modifiedCount === 0) {
      console.log('‚ö†Ô∏è [PATCH] Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
      return NextResponse.json(
        { 
          success: false,
          message: 'Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t' 
        },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ [PATCH] ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng');
    return NextResponse.json({
      success: true,
      message: 'ƒê·ªìng b·ªô kh√≥a h·ªçc th√†nh c√¥ng - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi ho√†n to√†n',
      stats: {
        totalLinks,
        processedLinks: processedLinksInNewData,
        preservedProcessedFiles: positionMap.size,
        fakeLinksHandled: true,
        fakeLinksRemoved: true
      },
      updatedFields: Object.keys(newCourseData)
    });
  } catch (error) {
    console.error('‚ùå [PATCH] L·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc:', error);
    return NextResponse.json(
      { 
        success: false,
        message: 'ƒê√£ x·∫£y ra l·ªói khi ƒë·ªìng b·ªô kh√≥a h·ªçc',
        error: error.message 
      },
      { status: 500 }
    );
  }
} 