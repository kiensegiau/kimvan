import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { ObjectId } from 'mongodb';
import { checkAuthAndRole } from '@/lib/auth';
import { cookies } from 'next/headers';
import { connectDB } from '@/lib/mongodb';
import { adminAuthMiddleware } from '@/app/api/admin/middleware';

// GET: L·∫•y m·ªôt kh√≥a h·ªçc theo ID m√† kh√¥ng m√£ h√≥a d·ªØ li·ªáu - CH·ªà CHO ADMIN
export async function GET(request, { params }) {
  try {
    console.log('üîí Raw API - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω y√™u c·∫ßu t·ªõi API kh√¥ng m√£ h√≥a');
    
    // Ki·ªÉm tra cookie admin_access tr∆∞·ªõc
    const cookieStore = cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Raw API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
      const resolvedParams = await Promise.resolve(params);
      const { id } = resolvedParams;
      
      const searchParams = request.nextUrl.searchParams;
      const type = searchParams.get('type') || 'slug';
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      // T√¨m kh√≥a h·ªçc theo ID ho·∫∑c slug
      let course;
      if (type === '_id') {
        if (!mongoose.Types.ObjectId.isValid(id)) {
          return NextResponse.json({ 
            success: false,
            message: 'ID kh√¥ng h·ª£p l·ªá' 
          }, { status: 400 });
        }
        course = await Course.findById(id).lean().exec();
      } else {
        course = await Course.findOne({ slug: id }).lean().exec();
      }
      
      if (!course) {
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
        }, { status: 404 });
      }
      
      // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√≥a h·ªçc kh√¥ng m√£ h√≥a - CH·ªà CHO ADMIN
      console.log('‚úÖ Raw API - ƒê√£ t√¨m th·∫•y kh√≥a h·ªçc, tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a');
      return NextResponse.json({
        success: true,
        data: course
      });
    }
    
    // N·∫øu kh√¥ng c√≥ cookie admin_access, th·ª≠ x√°c th·ª±c Firebase token
    console.log('üîí Raw API - G·ªçi middleware x√°c th·ª±c admin');
    const adminRequest = await adminAuthMiddleware(request);
    
    // Ki·ªÉm tra k·∫øt qu·∫£ t·ª´ middleware
    if (adminRequest instanceof NextResponse) {
      console.log('‚ùå Raw API - X√°c th·ª±c admin th·∫•t b·∫°i, t·ª´ ch·ªëi truy c·∫≠p');
      // Ghi log response ƒë·ªÉ debug
      const responseClone = adminRequest.clone();
      const responseBody = await responseClone.json();
      console.log('‚ùå Raw API - Chi ti·∫øt l·ªói:', JSON.stringify(responseBody));
      
      // N·∫øu tr·∫£ v·ªÅ NextResponse, nghƒ©a l√† c√≥ l·ªói x√°c th·ª±c
      return adminRequest;
    }
    
    console.log('‚úÖ Raw API - X√°c th·ª±c admin th√†nh c√¥ng, ti·∫øp t·ª•c x·ª≠ l√Ω');
    
    // ƒê·∫£m b·∫£o params ƒë∆∞·ª£c awaited
    const resolvedParams = await Promise.resolve(params);
    const { id } = resolvedParams;
    
    const searchParams = request.nextUrl.searchParams;
    const type = searchParams.get('type') || 'slug';
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // T√¨m kh√≥a h·ªçc theo ID ho·∫∑c slug
    let course;
    if (type === '_id') {
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      course = await Course.findById(id).lean().exec();
    } else {
      course = await Course.findOne({ slug: id }).lean().exec();
    }
    
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√≥a h·ªçc kh√¥ng m√£ h√≥a - CH·ªà CHO ADMIN
    console.log('‚úÖ Raw API - ƒê√£ t√¨m th·∫•y kh√≥a h·ªçc, tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a');
    return NextResponse.json({
      success: true,
      data: course
    });
  } catch (error) {
    console.error('‚ùå Raw API - L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'L·ªói server',
      error: error.message 
    }, { status: 500 });
  }
} 