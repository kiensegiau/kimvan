import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { cookies } from 'next/headers';
import { verifyServerAuthToken } from '@/utils/server-auth';
import { cookieConfig } from '@/config/env-config';
import { ObjectId } from 'mongodb';
import { authMiddleware } from '@/lib/auth';
import { connectDB } from '@/lib/mongodb';
import mongoose from 'mongoose';

export async function GET(request) {
  try {
    console.log('üîç API Users/me - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω GET request');
    
    // Log headers ƒë·ªÉ debug
    const authHeader = request.headers.get('authorization');
    console.log('üîç API Users/me - Auth Header:', authHeader ? 'C√≥' : 'Kh√¥ng c√≥');
    
    // Ki·ªÉm tra cookies - s·ª≠a l·ªói - g·ªçi tr·ª±c ti·∫øp
    const authCookie = cookies().get(cookieConfig.authCookieName);
    console.log('üîç API Users/me - Auth Cookie:', authCookie ? 'C√≥' : 'Kh√¥ng c√≥');
    
    // X√°c th·ª±c ng∆∞·ªùi d√πng
    console.log('üîç API Users/me - G·ªçi authMiddleware...');
    const user = await authMiddleware(request);
    
    console.log('üîç API Users/me - K·∫øt qu·∫£ authMiddleware:', user ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i');
    
    if (!user) {
      console.log('üîç API Users/me - Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng, tr·∫£ v·ªÅ 401');
      return NextResponse.json(
        { success: false, message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' },
        { status: 401 }
      );
    }
    
    // Log th√¥ng tin user c∆° b·∫£n
    console.log('üîç API Users/me - Th√¥ng tin ng∆∞·ªùi d√πng:', {
      uid: user.uid,
      email: user.email,
      role: user.role
    });
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB ƒë·ªÉ l·∫•y th√™m th√¥ng tin
    await connectDB();
    
    // T√¨m th√¥ng tin ng∆∞·ªùi d√πng trong MongoDB
    const db = mongoose.connection.db;
    const userCollection = db.collection('users');
    
    const userDetails = await userCollection.findOne({ firebaseId: user.uid });
    console.log('üîç API Users/me - Th√¥ng tin t·ª´ MongoDB:', userDetails ? 'T√¨m th·∫•y' : 'Kh√¥ng t√¨m th·∫•y');
    
    // L·∫•y vai tr√≤ t·ª´ DB n·∫øu c√≥, ng∆∞·ª£c l·∫°i s·ª≠ d·ª•ng t·ª´ token
    const userRole = userDetails?.role || user.role || 'user';
    
    // Chuy·ªÉn ƒë·ªïi m√£ vai tr√≤ th√†nh t√™n ƒë·∫ßy ƒë·ªß
    const roleDisplayName = getRoleDisplayName(userRole);
    
    // K·∫øt h·ª£p th√¥ng tin t·ª´ Firebase v√† MongoDB
    const userData = {
      ...user,
      // ∆Øu ti√™n th√¥ng tin t·ª´ MongoDB
      role: userRole,
      roleDisplayName: roleDisplayName,
      // Th√™m c√°c th√¥ng tin t·ª´ MongoDB n·∫øu c√≥
      canViewAllCourses: userDetails?.canViewAllCourses || false,
      additionalInfo: userDetails?.additionalInfo || {},
      enrollments: userDetails?.enrollments || []
    };
    
    return NextResponse.json({
      success: true,
      user: userData
    });
  } catch (error) {
    console.error('‚ùå API Users/me - L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
    return NextResponse.json(
      { success: false, message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng', error: error.message },
      { status: 500 }
    );
  }
}

// H√†m chuy·ªÉn ƒë·ªïi m√£ vai tr√≤ th√†nh t√™n ƒë·∫ßy ƒë·ªß
function getRoleDisplayName(role) {
  const roleMap = {
    'admin': 'Qu·∫£n tr·ªã vi√™n',
    'user': 'Ng∆∞·ªùi d√πng',
    'ctv': 'C√¥ng t√°c vi√™n',
    'staff': 'Nh√¢n vi√™n',
    'instructor': 'Gi·∫£ng vi√™n',
    'student': 'H·ªçc vi√™n',
    'guest': 'Kh√°ch'
  };
  
  return roleMap[role] || role;
}

export async function PATCH(request) {
  try {
    // X√°c th·ª±c ng∆∞·ªùi d√πng
    const user = await authMiddleware(request);
    
    if (!user) {
      return NextResponse.json(
        { success: false, message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' },
        { status: 401 }
      );
    }
    
    // L·∫•y d·ªØ li·ªáu t·ª´ request
    const requestData = await request.json();
    const { displayName, phoneNumber, additionalInfo } = requestData;
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await connectDB();
    const db = mongoose.connection.db;
    const userCollection = db.collection('users');
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const updateData = {
      $set: {
        updatedAt: new Date()
      }
    };
    
    // Th√™m c√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t n·∫øu c√≥
    if (displayName !== undefined) {
      updateData.$set.displayName = displayName;
    }
    
    if (phoneNumber !== undefined) {
      updateData.$set.phoneNumber = phoneNumber;
    }
    
    if (additionalInfo !== undefined) {
      updateData.$set.additionalInfo = additionalInfo;
    }
    
    // C·∫≠p nh·∫≠t trong MongoDB
    const result = await userCollection.updateOne(
      { firebaseId: user.uid },
      updateData,
      { upsert: true }
    );
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      user: {
        ...user,
        displayName: displayName !== undefined ? displayName : user.displayName,
        phoneNumber: phoneNumber !== undefined ? phoneNumber : user.phoneNumber,
        additionalInfo: additionalInfo !== undefined ? additionalInfo : user.additionalInfo
      }
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:', error);
    return NextResponse.json(
      { success: false, message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng', error: error.message },
      { status: 500 }
    );
  }
} 