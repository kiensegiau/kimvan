import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import { cookies } from 'next/headers';
import { verifyServerAuthToken } from '@/utils/server-auth';
import { cookieConfig } from '@/config/env-config';
import { ObjectId } from 'mongodb';
import { authMiddleware } from '@/lib/auth';
import { dbMiddleware } from '@/utils/db-middleware';
import mongoose from 'mongoose';

export async function GET(request) {
  try {
    console.log('üîç API Users/me - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω GET request');
    
    // L·∫•y token t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
    // 1. Th·ª≠ l·∫•y t·ª´ Authorization header
    let token = null;
    const authHeader = request.headers.get('authorization');
    if (authHeader && authHeader.startsWith('Bearer ')) {
      token = authHeader.substring(7);
    }
    
    // 2. Th·ª≠ l·∫•y t·ª´ cookie
    if (!token) {
      try {
        const cookieStore = await cookies();
        // Th·ª≠ nhi·ªÅu t√™n cookie kh√°c nhau ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
        const possibleCookieNames = [
          cookieConfig.authCookieName,
          'auth-token',
          'authToken'
        ];
        
        for (const cookieName of possibleCookieNames) {
          const cookie = cookieStore.get(cookieName);
          if (cookie && cookie.value) {
            token = cookie.value;
            break;
          }
        }
      } catch (cookieError) {
        console.error('‚ùå API Users/me - L·ªói khi ƒë·ªçc cookie:', cookieError.message);
      }
    }
    
    console.log('üîç API Users/me - Token:', token ? 'T√¨m th·∫•y' : 'Kh√¥ng t√¨m th·∫•y');
    
    // N·∫øu kh√¥ng c√≥ token, tr·∫£ v·ªÅ response v·ªõi d·ªØ li·ªáu gi·∫£
    if (!token) {
      console.log('üîç API Users/me - Kh√¥ng c√≥ token, tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng gi·∫£');
      return NextResponse.json({
        success: false,
        authenticated: false,
        message: 'Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c',
        user: null
      }, { status: 401 });
    }
    
    // X√°c th·ª±c token tr·ª±c ti·∫øp thay v√¨ qua authMiddleware
    let user = null;
    try {
      user = await verifyServerAuthToken(token);
    } catch (authError) {
      console.error('‚ùå API Users/me - L·ªói x√°c th·ª±c token:', authError.message);
    }
    
    if (!user) {
      console.log('üîç API Users/me - Token kh√¥ng h·ª£p l·ªá, tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng gi·∫£');
      return NextResponse.json({
        success: false,
        authenticated: false,
        message: 'Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
        user: null
      }, { status: 401 });
    }
    
    // Log th√¥ng tin user c∆° b·∫£n
    console.log('üîç API Users/me - Th√¥ng tin ng∆∞·ªùi d√πng:', {
      uid: user.uid,
      email: user.email,
      role: user.role
    });
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB ƒë·ªÉ l·∫•y th√™m th√¥ng tin
    try {
      await dbMiddleware(request);
      
      // T√¨m th√¥ng tin ng∆∞·ªùi d√πng trong MongoDB
      const db = mongoose.connection.db;
      const userCollection = db.collection('users');
      
      const userDetails = await userCollection.findOne({ firebaseId: user.uid });
      console.log('üîç API Users/me - Th√¥ng tin t·ª´ MongoDB:', userDetails ? 'T√¨m th·∫•y' : 'Kh√¥ng t√¨m th·∫•y');
      
      // L·∫•y vai tr√≤ t·ª´ DB n·∫øu c√≥, ng∆∞·ª£c l·∫°i s·ª≠ d·ª•ng t·ª´ token
      const userRole = userDetails?.role || user.role || 'user';
      
      // Chuy·ªÉn ƒë·ªïi m√£ vai tr√≤ th√†nh t√™n ƒë·∫ßy ƒë·ªß
      const roleDisplayName = getRoleDisplayName(userRole);
      
      // K·∫øt h·ª£p th√¥ng tin t·ª´ Firebase v√† MongoDB
      const userData = {
        ...user,
        // ∆Øu ti√™n th√¥ng tin t·ª´ MongoDB
        role: userRole,
        roleDisplayName: roleDisplayName,
        // Th√™m c√°c th√¥ng tin t·ª´ MongoDB n·∫øu c√≥
        canViewAllCourses: userDetails?.canViewAllCourses || false,
        additionalInfo: userDetails?.additionalInfo || {},
        enrollments: userDetails?.enrollments || []
      };
      
      return NextResponse.json({
        success: true,
        authenticated: true,
        user: userData
      });
    } catch (dbError) {
      console.error('‚ùå API Users/me - L·ªói khi k·∫øt n·ªëi v·ªõi MongoDB:', dbError.message);
      
      // Tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB
      return NextResponse.json({
        success: true,
        authenticated: true,
        user: {
          ...user,
          roleDisplayName: getRoleDisplayName(user.role || 'user'),
          canViewAllCourses: user.role === 'admin',
          additionalInfo: {},
          enrollments: []
        },
        message: 'D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß do l·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu'
      });
    }
  } catch (error) {
    console.error('‚ùå API Users/me - L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
    return NextResponse.json(
      { 
        success: false, 
        authenticated: false,
        message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng', 
        error: error.message,
        user: null
      },
      { status: 500 }
    );
  }
}

// H√†m chuy·ªÉn ƒë·ªïi m√£ vai tr√≤ th√†nh t√™n ƒë·∫ßy ƒë·ªß
function getRoleDisplayName(role) {
  const roleMap = {
    'admin': 'Qu·∫£n tr·ªã vi√™n',
    'user': 'Ng∆∞·ªùi d√πng',
    'ctv': 'C√¥ng t√°c vi√™n',
    'staff': 'Nh√¢n vi√™n',
    'instructor': 'Gi·∫£ng vi√™n',
    'student': 'H·ªçc vi√™n',
    'guest': 'Kh√°ch'
  };
  
  return roleMap[role] || role;
}

export async function PATCH(request) {
  try {
    // L·∫•y token t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
    let token = null;
    const authHeader = request.headers.get('authorization');
    if (authHeader && authHeader.startsWith('Bearer ')) {
      token = authHeader.substring(7);
    }
    
    if (!token) {
      try {
        const cookieStore = await cookies();
        token = cookieStore.get(cookieConfig.authCookieName)?.value;
      } catch (cookieError) {
        console.error('L·ªói khi ƒë·ªçc cookie:', cookieError.message);
      }
    }
    
    if (!token) {
      return NextResponse.json(
        { success: false, message: 'Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c' },
        { status: 401 }
      );
    }
    
    // X√°c th·ª±c token tr·ª±c ti·∫øp
    const user = await verifyServerAuthToken(token);
    
    if (!user) {
      return NextResponse.json(
        { success: false, message: 'Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' },
        { status: 401 }
      );
    }
    
    // L·∫•y d·ªØ li·ªáu t·ª´ request
    const requestData = await request.json();
    const { displayName, phoneNumber, additionalInfo } = requestData;
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    try {
      await dbMiddleware(request);
      const db = mongoose.connection.db;
      const userCollection = db.collection('users');
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
      const updateData = {
        $set: {
          updatedAt: new Date()
        }
      };
      
      // Th√™m c√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t n·∫øu c√≥
      if (displayName !== undefined) {
        updateData.$set.displayName = displayName;
      }
      
      if (phoneNumber !== undefined) {
        updateData.$set.phoneNumber = phoneNumber;
      }
      
      if (additionalInfo !== undefined) {
        updateData.$set.additionalInfo = additionalInfo;
      }
      
      // C·∫≠p nh·∫≠t trong MongoDB
      const result = await userCollection.updateOne(
        { firebaseId: user.uid },
        updateData,
        { upsert: true }
      );
      
      // Tr·∫£ v·ªÅ k·∫øt qu·∫£
      return NextResponse.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
        user: {
          ...user,
          displayName: displayName !== undefined ? displayName : user.displayName,
          phoneNumber: phoneNumber !== undefined ? phoneNumber : user.phoneNumber,
          additionalInfo: additionalInfo !== undefined ? additionalInfo : user.additionalInfo
        }
      });
    } catch (dbError) {
      console.error('L·ªói khi k·∫øt n·ªëi v·ªõi MongoDB:', dbError.message);
      
      return NextResponse.json(
        { success: false, message: 'L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: ' + dbError.message },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:', error);
    return NextResponse.json(
      { success: false, message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng', error: error.message },
      { status: 500 }
    );
  }
} 