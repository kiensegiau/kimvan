import { NextResponse } from 'next/server';
import { getKimVanAuthHeaders } from '../../../helpers/kimvan-token';

export async function GET(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o await params tr∆∞·ªõc khi s·ª≠ d·ª•ng
    const paramsData = await params;
    const name = paramsData.name;
    
    if (!name) {
      return NextResponse.json({ error: 'T√™n kh√¥ng ƒë∆∞·ª£c cung c·∫•p' }, { status: 400 });
    }
    
    console.log('==============================================');
    console.log(`üîç ƒêang g·ªçi API KimVan Create v·ªõi name: ${name}`);
    console.log('==============================================');
    
    // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng cho URL API
    const kimvanApiUrl = process.env.KIMVAN_API_URL || 'https://kimvan.id.vn/api/spreadsheets/';
    const kimvanUrl = `${kimvanApiUrl}create/${name}`;
    
    // L·∫•y headers ch·ª©a th√¥ng tin x√°c th·ª±c
    const headers = getKimVanAuthHeaders();
    console.log('Headers ƒë·ªÉ g·ªçi API:', {
      hasAuthorization: !!headers.Authorization,
      hasCookie: !!headers.cookie,
      headerCount: Object.keys(headers).length,
      method: 'GET'
    });
    
    // Log th√™m th√¥ng tin v·ªÅ token s·ª≠ d·ª•ng
    if (headers.Authorization) {
      console.log('S·ª≠ d·ª•ng JWT Authorization Bearer token');
      const tokenPreview = headers.Authorization.substring(0, 30) + '...';
      console.log(`Bearer token (m·ªôt ph·∫ßn): ${tokenPreview}`);
    } else if (headers.cookie) {
      console.log('S·ª≠ d·ª•ng Session token v·ªõi Cookie');
      const cookiePreview = headers.cookie.substring(0, 30) + '...';
      console.log(`Cookie (m·ªôt ph·∫ßn): ${cookiePreview}`);
    } else {
      console.log('C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y token ƒë·ªÉ x√°c th·ª±c!');
    }
    
    // G·ªçi API KimVan v·ªõi c√°c header ƒë√£ thi·∫øt l·∫≠p
    const response = await fetch(kimvanUrl, {
      method: 'GET',
      headers: headers,
      next: { revalidate: 60 } // S·ª≠ d·ª•ng cache trong 60 gi√¢y
    });
    
    // Log th√¥ng tin response
    console.log(`K·∫øt qu·∫£ t·ª´ API KimVan: Status ${response.status}`);
    
    // N·∫øu API tr·∫£ v·ªÅ l·ªói
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`L·ªói t·ª´ API KimVan: ${errorText}`);
      
      // N·∫øu l√† l·ªói x√°c th·ª±c
      if (response.status === 401 || response.status === 403) {
        return NextResponse.json(
          { error: 'L·ªói x√°c th·ª±c v·ªõi KimVan. Token c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n.' }, 
          { status: response.status }
        );
      }
      
      // N·∫øu v∆∞·ª£t qu√° rate limit
      if (response.status === 429) {
        return NextResponse.json(
          { error: 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.' }, 
          { status: 429 }
        );
      }
      
      return NextResponse.json(
        { error: `L·ªói t·ª´ API KimVan: ${errorText}` },
        { status: response.status }
      );
    }
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ API KimVan
    const data = await response.json();
    console.log('D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API KimVan:', data);
    
    return NextResponse.json(data);
  } catch (error) {
    console.error('L·ªói khi g·ªçi API KimVan:', error);
    return NextResponse.json(
      { error: `L·ªói khi g·ªçi API KimVan: ${error.message}` }, 
      { status: 500 }
    );
  }
} 