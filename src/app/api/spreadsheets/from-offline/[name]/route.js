import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

/**
 * T√¨m file index.json trong th∆∞ m·ª•c processed
 * @returns {Object|null} D·ªØ li·ªáu t·ª´ file index.json ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function findIndexFile() {
  try {
    const processedDir = path.join(process.cwd(), 'processed');
    const indexPath = path.join(processedDir, 'index.json');
    
    if (!fs.existsSync(indexPath)) {
      console.log('Kh√¥ng t√¨m th·∫•y file index.json. H√£y ch·∫°y script process-results.js tr∆∞·ªõc.');
      return null;
    }
    
    const content = fs.readFileSync(indexPath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error('L·ªói khi ƒë·ªçc file index.json:', error.message);
    return null;
  }
}

/**
 * T√¨m file d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω m·ªõi nh·∫•t
 * @returns {Object|null} D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function findLatestProcessedData() {
  try {
    const indexData = findIndexFile();
    if (!indexData || !indexData.lastProcessed) return null;
    
    const dataPath = indexData.lastProcessed;
    if (!fs.existsSync(dataPath)) {
      console.log(`Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu: ${dataPath}`);
      return null;
    }
    
    const content = fs.readFileSync(dataPath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error('L·ªói khi ƒë·ªçc file d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω:', error.message);
    return null;
  }
}

/**
 * T√¨m danh s√°ch sheet theo t√™n
 * @param {string} name - T√™n sheet c·∫ßn t√¨m
 * @returns {Array|null} Danh s√°ch sheet ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function findSheetListByName(name) {
  const processedData = findLatestProcessedData();
  if (!processedData || !processedData.sheetLists) return null;
  
  // T√¨m ch√≠nh x√°c
  if (processedData.sheetLists[name]) {
    return processedData.sheetLists[name].data;
  }
  
  // T√¨m kh·ªõp m·ªôt ph·∫ßn
  const keys = Object.keys(processedData.sheetLists);
  for (const key of keys) {
    if (key.includes(name) || name.includes(key)) {
      return processedData.sheetLists[key].data;
    }
  }
  
  return null;
}

export async function GET(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o await params tr∆∞·ªõc khi s·ª≠ d·ª•ng
    const paramsData = await params;
    const name = paramsData.name;
    
    if (!name) {
      return NextResponse.json({ error: 'T√™n kh√¥ng ƒë∆∞·ª£c cung c·∫•p' }, { status: 400 });
    }
    
    console.log('==============================================');
    console.log(`üîç ƒêang t√¨m d·ªØ li·ªáu offline cho sheet: ${name}`);
    console.log('==============================================');
    
    // T√¨m d·ªØ li·ªáu danh s√°ch sheet
    const sheetList = findSheetListByName(name);
    
    if (!sheetList) {
      return NextResponse.json(
        { 
          error: 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho sheet n√†y',
          solution: 'Vui l√≤ng ch·∫°y c√°c script sau ƒë·ªÉ l·∫•y v√† x·ª≠ l√Ω d·ªØ li·ªáu:',
          commands: [
            'node src/scripts/open-browser.js <t√™n_sheet>',
            'node src/scripts/process-results.js'
          ]
        },
        { status: 404 }
      );
    }
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json(sheetList);
    
  } catch (error) {
    console.error('L·ªói khi ƒë·ªçc d·ªØ li·ªáu offline:', error);
    return NextResponse.json(
      { error: `L·ªói khi ƒë·ªçc d·ªØ li·ªáu offline: ${error.message}` },
      { status: 500 }
    );
  }
} 