import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import util from 'util';

// Chuy·ªÉn ƒë·ªïi exec th√†nh promise
const execAsync = util.promisify(exec);

/**
 * T√¨m file k·∫øt qu·∫£ m·ªõi nh·∫•t cho sheet ID c·ª• th·ªÉ
 */
function findSheetDetailFile(sheetId) {
  try {
    const resultsDir = path.join(process.cwd(), 'results');
    if (!fs.existsSync(resultsDir)) {
      return null;
    }
    
    // T√¨m t·∫•t c·∫£ c√°c file li√™n quan ƒë·∫øn sheet ID
    const shortId = sheetId.substring(0, 10);
    const files = fs.readdirSync(resultsDir)
      .filter(file => file.includes(`-${shortId}-`))
      .sort()
      .reverse(); // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
    
    if (files.length === 0) {
      return null;
    }
    
    return path.join(resultsDir, files[0]);
  } catch (error) {
    console.error('L·ªói khi t√¨m file k·∫øt qu·∫£:', error);
    return null;
  }
}

/**
 * H√†m ch·∫°y script Puppeteer ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi cho sheet ID c·ª• th·ªÉ
 */
async function runPuppeteerScriptForId(sheetId) {
  try {
    console.log('ƒêang ch·∫°y script Puppeteer ƒë·ªÉ l·∫•y d·ªØ li·ªáu chi ti·∫øt...');
    
    // T·∫°o URL cho sheet ID
    const detailUrl = `https://kimvan.id.vn/spreadsheets/${sheetId}`;
    
    // M·ªü tr√¨nh duy·ªát ƒë·∫øn URL c·ª• th·ªÉ ƒë·ªÉ b·∫Øt response
    const command = `start msedge ${detailUrl}`;
    
    const { stdout, stderr } = await execAsync(command);
    if (stderr) {
      console.error('L·ªói khi m·ªü tr√¨nh duy·ªát:', stderr);
    }
    
    // ƒê·ª£i m·ªôt l√∫c ƒë·ªÉ trang t·∫£i v√† b·∫Øt response
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    console.log('ƒê√£ m·ªü tr√¨nh duy·ªát ƒë·ªÉ truy c·∫≠p sheet chi ti·∫øt.');
    return true;
  } catch (error) {
    console.error('L·ªói khi ch·∫°y Puppeteer cho sheet ID:', error);
    return false;
  }
}

export async function GET(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o await params tr∆∞·ªõc khi s·ª≠ d·ª•ng
    const paramsData = await params;
    const id = paramsData.id;
    
    if (!id) {
      return NextResponse.json({ error: 'ID kh√¥ng ƒë∆∞·ª£c cung c·∫•p' }, { status: 400 });
    }
    
    console.log('==============================================');
    console.log(`üîç ƒêang truy c·∫≠p d·ªØ li·ªáu chi ti·∫øt cho sheet ID: ${id}`);
    console.log('==============================================');
    
    // T√¨m file k·∫øt qu·∫£ m·ªõi nh·∫•t
    let detailFile = findSheetDetailFile(id);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ m·ªü tr√¨nh duy·ªát ƒë·ªÉ truy c·∫≠p
    if (!detailFile) {
      console.log(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu chi ti·∫øt cho sheet ID: ${id}`);
      console.log('Vui l√≤ng ch·∫°y script kimvan-direct-request.js tr∆∞·ªõc.');
      
      // T·∫°o response g·ª£i √Ω c√°ch l·∫•y d·ªØ li·ªáu
      return NextResponse.json(
        { 
          error: 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu chi ti·∫øt cho sheet n√†y',
          solution: 'Vui l√≤ng ch·∫°y script sau ƒë·ªÉ l·∫•y d·ªØ li·ªáu:',
          command: 'node src/scripts/kimvan-direct-request.js <sheet_name>' 
        },
        { status: 404 }
      );
    }
    
    // Ki·ªÉm tra th·ªùi gian file
    const fileStats = fs.statSync(detailFile);
    const fileTime = fileStats.mtime.getTime();
    const now = Date.now();
    const fileAgeHours = (now - fileTime) / (1000 * 60 * 60);
    
    console.log(`File cache "${path.basename(detailFile)}" c√≥ tu·ªïi: ${fileAgeHours.toFixed(2)} gi·ªù`);
    
    // ƒê·ªçc n·ªôi dung file
    const fileContent = fs.readFileSync(detailFile, 'utf8');
    const sheetDetail = JSON.parse(fileContent);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json(sheetDetail);
    
  } catch (error) {
    console.error('L·ªói khi ƒë·ªçc d·ªØ li·ªáu chi ti·∫øt:', error);
    return NextResponse.json(
      { error: `L·ªói khi ƒë·ªçc d·ªØ li·ªáu chi ti·∫øt: ${error.message}` },
      { status: 500 }
    );
  }
} 