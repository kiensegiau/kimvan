import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import util from 'util';

// Chuy·ªÉn ƒë·ªïi exec th√†nh promise
const execAsync = util.promisify(exec);

// Bi·∫øn ƒë·ªÉ theo d√µi l·∫ßn cu·ªëi c√πng ch·∫°y Puppeteer
let lastPuppeteerRun = 0;
const PUPPETEER_COOLDOWN = 2 * 60 * 1000; // 2 ph√∫t

/**
 * H√†m ch·∫°y script Puppeteer ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi
 */
async function runPuppeteerScript(sheetName) {
  try {
    const now = Date.now();
    // Ch·ªâ ch·∫°y Puppeteer n·∫øu ƒë√£ qu√° th·ªùi gian cooldown
    if (now - lastPuppeteerRun < PUPPETEER_COOLDOWN) {
      console.log('ƒê√£ ch·∫°y Puppeteer g·∫ßn ƒë√¢y, ƒë·ª£i cooldown tr∆∞·ªõc khi ch·∫°y l·∫°i');
      return false;
    }
    
    console.log('ƒêang ch·∫°y script Puppeteer ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi...');
    const scriptPath = path.join(process.cwd(), 'src/scripts/kimvan-direct-request.js');
    
    const { stdout, stderr } = await execAsync(`node ${scriptPath} ${sheetName}`);
    console.log('Puppeteer ƒë√£ ch·∫°y xong:', stdout);
    if (stderr) {
      console.error('L·ªói t·ª´ Puppeteer:', stderr);
    }
    
    lastPuppeteerRun = now;
    return true;
  } catch (error) {
    console.error('L·ªói khi ch·∫°y script Puppeteer:', error);
    return false;
  }
}

/**
 * T√¨m file k·∫øt qu·∫£ m·ªõi nh·∫•t cho sheet name c·ª• th·ªÉ
 */
function findLatestSheetListFile(sheetName) {
  try {
    const resultsDir = path.join(process.cwd(), 'results');
    if (!fs.existsSync(resultsDir)) {
      return null;
    }
    
    // T√¨m t·∫•t c·∫£ c√°c file li√™n quan ƒë·∫øn sheet name
    const files = fs.readdirSync(resultsDir)
      .filter(file => file.startsWith(`${sheetName}-list-`))
      .sort()
      .reverse(); // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
    
    if (files.length === 0) {
      return null;
    }
    
    return path.join(resultsDir, files[0]);
  } catch (error) {
    console.error('L·ªói khi t√¨m file k·∫øt qu·∫£:', error);
    return null;
  }
}

/**
 * T√¨m file k·∫øt qu·∫£ m·ªõi nh·∫•t cho sheet ID c·ª• th·ªÉ
 */
function findSheetDetailFile(sheetId) {
  try {
    const resultsDir = path.join(process.cwd(), 'results');
    if (!fs.existsSync(resultsDir)) {
      return null;
    }
    
    // T√¨m t·∫•t c·∫£ c√°c file li√™n quan ƒë·∫øn sheet ID
    const shortId = sheetId.substring(0, 10);
    const files = fs.readdirSync(resultsDir)
      .filter(file => file.includes(`-${shortId}-`))
      .sort()
      .reverse(); // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
    
    if (files.length === 0) {
      return null;
    }
    
    return path.join(resultsDir, files[0]);
  } catch (error) {
    console.error('L·ªói khi t√¨m file k·∫øt qu·∫£:', error);
    return null;
  }
}

export async function GET(request, { params }) {
  try {
    // ƒê·∫£m b·∫£o await params tr∆∞·ªõc khi s·ª≠ d·ª•ng
    const paramsData = await params;
    const name = paramsData.name;
    
    if (!name) {
      return NextResponse.json({ error: 'T√™n kh√¥ng ƒë∆∞·ª£c cung c·∫•p' }, { status: 400 });
    }
    
    console.log('==============================================');
    console.log(`üîç ƒêang truy c·∫≠p d·ªØ li·ªáu cache cho: ${name}`);
    console.log('==============================================');
    
    // T√¨m file k·∫øt qu·∫£ m·ªõi nh·∫•t
    let sheetListFile = findLatestSheetListFile(name);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y ho·∫∑c file qu√° c≈© (>24h), ch·∫°y l·∫°i Puppeteer
    let needRefresh = false;
    if (!sheetListFile) {
      console.log(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cache cho "${name}". S·∫Ω ch·∫°y Puppeteer ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi.`);
      needRefresh = true;
    } else {
      // Ki·ªÉm tra th·ªùi gian file
      const fileStats = fs.statSync(sheetListFile);
      const fileTime = fileStats.mtime.getTime();
      const now = Date.now();
      const fileAgeHours = (now - fileTime) / (1000 * 60 * 60);
      
      console.log(`File cache "${path.basename(sheetListFile)}" c√≥ tu·ªïi: ${fileAgeHours.toFixed(2)} gi·ªù`);
      
      if (fileAgeHours > 24) {
        console.log(`D·ªØ li·ªáu cache qu√° c≈© (>24h). S·∫Ω ch·∫°y Puppeteer ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi.`);
        needRefresh = true;
      }
    }
    
    // Ch·∫°y Puppeteer n·∫øu c·∫ßn thi·∫øt
    if (needRefresh) {
      await runPuppeteerScript(name);
      // T√¨m l·∫°i file sau khi ch·∫°y Puppeteer
      sheetListFile = findLatestSheetListFile(name);
    }
    
    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y file
    if (!sheetListFile) {
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ t√¨m th·∫•y ho·∫∑c t·∫°o d·ªØ li·ªáu cho sheet n√†y' },
        { status: 404 }
      );
    }
    
    // ƒê·ªçc n·ªôi dung file
    const fileContent = fs.readFileSync(sheetListFile, 'utf8');
    const sheetList = JSON.parse(fileContent);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json(sheetList);
    
  } catch (error) {
    console.error('L·ªói khi ƒë·ªçc d·ªØ li·ªáu cache:', error);
    return NextResponse.json(
      { error: `L·ªói khi ƒë·ªçc d·ªØ li·ªáu cache: ${error.message}` },
      { status: 500 }
    );
  }
} 