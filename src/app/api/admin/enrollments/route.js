import { NextResponse } from 'next/server';
import { connectDB } from '@/lib/mongodb';
import Enrollment from '@/models/Enrollment';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import mongoose from 'mongoose';
import { cookies } from 'next/headers';

// GET: L·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc c·ªßa ng∆∞·ªùi d√πng c·ª• th·ªÉ
export async function GET(request) {
  try {
    // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c CTV
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    const ctvAccess = cookieStore.get('ctv_access');
    
    let isAdmin = false;
    let isCTV = false;
    let currentUserEmail = '';
    
    console.log('üîç API Enrollments - Ki·ªÉm tra quy·ªÅn truy c·∫≠p');
    console.log('Cookie admin_access:', adminAccess ? adminAccess.value : 'kh√¥ng c√≥');
    console.log('Cookie ctv_access:', ctvAccess ? ctvAccess.value : 'kh√¥ng c√≥');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p admin
    if (adminAccess && adminAccess.value === 'true') {
      isAdmin = true;
      console.log('‚úÖ API - Truy c·∫≠p v·ªõi quy·ªÅn admin t·ª´ cookie');
    } 
    // N·∫øu c√≥ cookie ctv_access, cho ph√©p truy c·∫≠p CTV
    else if (ctvAccess && ctvAccess.value === 'true') {
      isCTV = true;
      console.log('‚úÖ API - Truy c·∫≠p v·ªõi quy·ªÅn CTV t·ª´ cookie');
      
      // L·∫•y email CTV t·ª´ URL query params n·∫øu c√≥
      const { searchParams } = new URL(request.url);
      const ctvEmailParam = searchParams.get('ctvEmail');
      
      if (ctvEmailParam) {
        currentUserEmail = ctvEmailParam;
        console.log('‚úÖ API - Email CTV t·ª´ query params:', currentUserEmail);
      }
      
      // N·∫øu kh√¥ng c√≥ email t·ª´ query params, th·ª≠ l·∫•y t·ª´ cookie
      if (!currentUserEmail) {
        const ctvEmailCookie = cookieStore.get('ctv_email');
        if (ctvEmailCookie) {
          currentUserEmail = ctvEmailCookie.value;
          console.log('‚úÖ API - Email CTV t·ª´ cookie:', currentUserEmail);
        }
      }
    } 
    // N·∫øu kh√¥ng c√≥ cookie, ki·ªÉm tra quy·ªÅn t·ª´ token
    else {
      try {
        const hasAdminAccess = await checkAuthAndRole(request, 'admin');
        if (hasAdminAccess) {
          isAdmin = true;
          console.log('‚úÖ API - Truy c·∫≠p v·ªõi quy·ªÅn admin t·ª´ token');
        } else {
          const hasCTVAccess = await checkAuthAndRole(request, 'ctv');
          if (hasCTVAccess) {
            isCTV = true;
            console.log('‚úÖ API - Truy c·∫≠p v·ªõi quy·ªÅn CTV t·ª´ token');
            
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
            const authResult = await authMiddleware(request);
            if (authResult && authResult.user && authResult.user.email) {
              currentUserEmail = authResult.user.email;
              console.log('‚úÖ API - Email CTV t·ª´ token:', currentUserEmail);
            }
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è API - L·ªói khi ki·ªÉm tra quy·ªÅn:', error.message);
      }
    }
    
    // N·∫øu kh√¥ng ph·∫£i admin ho·∫∑c CTV, t·ª´ ch·ªëi truy c·∫≠p
    if (!isAdmin && !isCTV) {
      console.log('‚ùå API - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    // L·∫•y userId t·ª´ query params
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (!userId) {
      return NextResponse.json({ 
        success: false,
        message: 'Thi·∫øu ID ng∆∞·ªùi d√πng' 
      }, { status: 400 });
    }
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await connectDB();
    
    // N·∫øu l√† CTV, ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ thu·ªôc qu·∫£n l√Ω c·ªßa CTV kh√¥ng
    if (isCTV && currentUserEmail) {
      console.log('üîç API - Ki·ªÉm tra quy·ªÅn CTV cho userId:', userId);
      console.log('üîç API - Email CTV hi·ªán t·∫°i:', currentUserEmail);
      
      const db = mongoose.connection.db;
      const user = await db.collection('users').findOne({ 
        $or: [
          { uid: userId },
          { firebaseId: userId }
        ]
      });
      
      if (!user) {
        console.log('‚ùå API - Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID:', userId);
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' 
        }, { status: 404 });
      }
      
      console.log('üîç API - Th√¥ng tin ng∆∞·ªùi d√πng:', {
        id: user._id,
        firebaseId: user.firebaseId,
        createdBy: user.createdBy,
        phoneNumber: user.phoneNumber
      });
      
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ thu·ªôc qu·∫£n l√Ω c·ªßa CTV kh√¥ng
      const isUserManagedByCTV = 
        (user.createdBy === currentUserEmail) || 
        (user.phoneNumber === currentUserEmail);
      
      console.log('üîç API - Ng∆∞·ªùi d√πng thu·ªôc qu·∫£n l√Ω c·ªßa CTV?', isUserManagedByCTV);
      
      if (!isUserManagedByCTV) {
        return NextResponse.json({ 
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω ng∆∞·ªùi d√πng n√†y' 
        }, { status: 403 });
      }
    }
    
    // L·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc c·ªßa ng∆∞·ªùi d√πng
    const enrollments = await Enrollment.find({ userId })
      .populate('courseId')
      .sort({ enrolledAt: -1 })
      .lean()
      .exec();
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json({
      success: true,
      data: enrollments.map(enrollment => ({
        id: enrollment._id,
        courseId: enrollment.courseId._id,
        courseName: enrollment.courseId.name,
        progress: enrollment.progress || 0,
        status: enrollment.status,
        enrolledAt: enrollment.enrolledAt,
        lastAccessedAt: enrollment.lastAccessedAt
      }))
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'L·ªói khi l·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc' 
    }, { status: 500 });
  }
}

// POST: Admin ho·∫∑c CTV th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng
export async function POST(request) {
  try {
    // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c CTV
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    const ctvAccess = cookieStore.get('ctv_access');
    
    let isAdmin = false;
    let isCTV = false;
    let currentUserEmail = '';
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p admin
    if (adminAccess && adminAccess.value === 'true') {
      isAdmin = true;
    } else {
      // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
      const hasAdminAccess = await checkAuthAndRole(request, 'admin');
      
      if (hasAdminAccess) {
        isAdmin = true;
      } else if (ctvAccess && ctvAccess.value === 'true') {
        // N·∫øu c√≥ cookie ctv_access, cho ph√©p truy c·∫≠p CTV
        isCTV = true;
        
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const authResult = await authMiddleware(request);
        if (authResult && authResult.user && authResult.user.email) {
          currentUserEmail = authResult.user.email;
        }
      } else {
        // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn CTV
        const hasCTVAccess = await checkAuthAndRole(request, 'ctv');
        
        if (hasCTVAccess) {
          isCTV = true;
          
          // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
          const authResult = await authMiddleware(request);
          if (authResult && authResult.user && authResult.user.email) {
            currentUserEmail = authResult.user.email;
          }
        }
      }
      
      // N·∫øu kh√¥ng ph·∫£i admin ho·∫∑c CTV, t·ª´ ch·ªëi truy c·∫≠p
      if (!isAdmin && !isCTV) {
        console.log('‚ùå API - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
        return NextResponse.json({ 
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
        }, { status: 403 });
      }
    }
    
    // L·∫•y d·ªØ li·ªáu t·ª´ request
    const body = await request.json();
    const { userId, courseId } = body;
    
    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!userId) {
      return NextResponse.json({ 
        success: false,
        message: 'Thi·∫øu ID ng∆∞·ªùi d√πng' 
      }, { status: 400 });
    }
    
    if (!courseId || !mongoose.Types.ObjectId.isValid(courseId)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await connectDB();
    
    // N·∫øu l√† CTV, ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ thu·ªôc qu·∫£n l√Ω c·ªßa CTV kh√¥ng
    if (isCTV && currentUserEmail) {
      const db = mongoose.connection.db;
      const user = await db.collection('users').findOne({ 
        $or: [
          { uid: userId },
          { firebaseId: userId }
        ]
      });
      
      if (!user) {
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' 
        }, { status: 404 });
      }
      
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ thu·ªôc qu·∫£n l√Ω c·ªßa CTV kh√¥ng
      const isUserManagedByCTV = 
        (user.createdBy === currentUserEmail) || 
        (user.phoneNumber === currentUserEmail);
      
      if (!isUserManagedByCTV) {
        return NextResponse.json({ 
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω ng∆∞·ªùi d√πng n√†y' 
        }, { status: 403 });
      }
    }
    
    // Ki·ªÉm tra kh√≥a h·ªçc t·ªìn t·∫°i
    const course = await Course.findById(courseId).lean().exec();
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y ch∆∞a
    const existingEnrollment = await Enrollment.findOne({ 
      userId,
      courseId
    }).lean().exec();
    
    if (existingEnrollment) {
      return NextResponse.json({ 
        success: false,
        message: 'Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' 
      }, { status: 409 });
    }
    
    // T·∫°o ƒëƒÉng k√Ω m·ªõi
    const enrollment = new Enrollment({
      userId,
      courseId,
      enrolledAt: new Date(),
      lastAccessedAt: new Date(),
      status: 'active'
    });
    
    // L∆∞u ƒëƒÉng k√Ω v√†o database
    await enrollment.save();
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json({
      success: true,
      message: 'ƒê√£ th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng th√†nh c√¥ng',
      data: {
        id: enrollment._id,
        courseId: course._id,
        courseName: course.name,
        progress: 0,
        status: 'active',
        enrolledAt: enrollment.enrolledAt,
        lastAccessedAt: enrollment.lastAccessedAt
      }
    });
  } catch (error) {
    console.error('L·ªói khi th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'L·ªói khi th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng' 
    }, { status: 500 });
  }
}

// DELETE: Admin ho·∫∑c CTV x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc
export async function DELETE(request) {
  try {
    // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c CTV
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    const ctvAccess = cookieStore.get('ctv_access');
    
    let isAdmin = false;
    let isCTV = false;
    let currentUserEmail = '';
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p admin
    if (adminAccess && adminAccess.value === 'true') {
      isAdmin = true;
    } else {
      // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
      const hasAdminAccess = await checkAuthAndRole(request, 'admin');
      
      if (hasAdminAccess) {
        isAdmin = true;
      } else if (ctvAccess && ctvAccess.value === 'true') {
        // N·∫øu c√≥ cookie ctv_access, cho ph√©p truy c·∫≠p CTV
        isCTV = true;
        
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const authResult = await authMiddleware(request);
        if (authResult && authResult.user && authResult.user.email) {
          currentUserEmail = authResult.user.email;
        }
      } else {
        // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn CTV
        const hasCTVAccess = await checkAuthAndRole(request, 'ctv');
        
        if (hasCTVAccess) {
          isCTV = true;
          
          // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
          const authResult = await authMiddleware(request);
          if (authResult && authResult.user && authResult.user.email) {
            currentUserEmail = authResult.user.email;
          }
        }
      }
      
      // N·∫øu kh√¥ng ph·∫£i admin ho·∫∑c CTV, t·ª´ ch·ªëi truy c·∫≠p
      if (!isAdmin && !isCTV) {
        console.log('‚ùå API - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
        return NextResponse.json({ 
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
        }, { status: 403 });
      }
    }
    
    // L·∫•y ID ƒëƒÉng k√Ω t·ª´ URL
    const { searchParams } = new URL(request.url);
    const enrollmentId = searchParams.get('id');
    
    // Ki·ªÉm tra ID ƒëƒÉng k√Ω
    if (!enrollmentId || !mongoose.Types.ObjectId.isValid(enrollmentId)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID ƒëƒÉng k√Ω kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await connectDB();
    
    // T√¨m th√¥ng tin ƒëƒÉng k√Ω
    const enrollment = await Enrollment.findById(enrollmentId).lean().exec();
    
    if (!enrollment) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒëƒÉng k√Ω kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // N·∫øu l√† CTV, ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ thu·ªôc qu·∫£n l√Ω c·ªßa CTV kh√¥ng
    if (isCTV && currentUserEmail) {
      const db = mongoose.connection.db;
      const user = await db.collection('users').findOne({ 
        $or: [
          { uid: enrollment.userId },
          { firebaseId: enrollment.userId }
        ]
      });
      
      if (!user) {
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' 
        }, { status: 404 });
      }
      
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ thu·ªôc qu·∫£n l√Ω c·ªßa CTV kh√¥ng
      const isUserManagedByCTV = 
        (user.createdBy === currentUserEmail) || 
        (user.phoneNumber === currentUserEmail);
      
      if (!isUserManagedByCTV) {
        return NextResponse.json({ 
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω ng∆∞·ªùi d√πng n√†y' 
        }, { status: 403 });
      }
    }
    
    // X√≥a ƒëƒÉng k√Ω
    const result = await Enrollment.findByIdAndDelete(enrollmentId);
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    if (!result) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒëƒÉng k√Ω kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json({
      success: true,
      message: 'ƒê√£ x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'L·ªói khi x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc' 
    }, { status: 500 });
  }
} 