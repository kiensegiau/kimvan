import { NextResponse } from 'next/server';
import { connectDB } from '@/lib/mongodb';
import Enrollment from '@/models/Enrollment';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import mongoose from 'mongoose';
import { cookies } from 'next/headers';

// GET: L·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc c·ªßa ng∆∞·ªùi d√πng c·ª• th·ªÉ
export async function GET(request) {
  try {
    // L·∫•y th√¥ng tin t·ª´ query params v√† headers
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const ctvEmail = searchParams.get('ctvEmail'); // Email CTV t·ª´ query
    
    console.log(`üîç GET /api/admin/enrollments - userId: ${userId}, ctvEmail: ${ctvEmail}`);
    
    // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c CTV
    const cookieStore = cookies();
    // ƒê·ªçc cookies tr·ª±c ti·∫øp t·ª´ cookieStore m√† kh√¥ng s·ª≠ d·ª•ng .get()
    let adminAccess = false;
    let ctvAccess = false;
    let ctvEmailCookie = null;
    
    // L·∫∑p qua t·∫•t c·∫£ cookie ƒë·ªÉ t√¨m cookie c·∫ßn thi·∫øt
    for (const cookie of cookieStore.getAll()) {
      if (cookie.name === 'admin_access' && cookie.value === 'true') {
        adminAccess = true;
      }
      if (cookie.name === 'ctv_access' && cookie.value === 'true') {
        ctvAccess = true;
      }
      if (cookie.name === 'ctv_email') {
        ctvEmailCookie = cookie;
      }
    }
    
    console.log(`üîë Cookie check - adminAccess: ${adminAccess}, ctvAccess: ${ctvAccess}`);
    
    // N·∫øu c√≥ cookie admin_access ho·∫∑c ctv_access, cho ph√©p truy c·∫≠p
    let hasAccess = adminAccess || ctvAccess;
    
    // N·∫øu kh√¥ng c√≥ cookie x√°c th·ª±c, ki·ªÉm tra qua header Authorization
    if (!hasAccess) {
      console.log('üîç Checking auth through headers...');
      hasAccess = await checkAuthAndRole(request, ['admin', 'ctv']);
      
      if (!hasAccess) {
        // N·∫øu c√≥ ctvEmail trong query v√† ƒë√£ thi·∫øt l·∫≠p cookie ctv_email, cho ph√©p
        if (ctvEmail && ctvEmailCookie && decodeURIComponent(ctvEmailCookie.value) === ctvEmail) {
          console.log('‚úÖ Access granted through ctv_email cookie match with query param');
          hasAccess = true;
        } else {
          console.log('‚ö†Ô∏è ctv_email cookie check failed', {
            queryCtvEmail: ctvEmail,
            cookieCtvEmail: ctvEmailCookie ? decodeURIComponent(ctvEmailCookie.value) : null
          });
        }
      }
    }
    
    if (!hasAccess) {
      console.log('‚ùå Admin/CTV API - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    if (!userId) {
      return NextResponse.json({ 
        success: false,
        message: 'Thi·∫øu ID ng∆∞·ªùi d√πng' 
      }, { status: 400 });
    }
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await connectDB();
    
    // L·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc c·ªßa ng∆∞·ªùi d√πng
    const enrollments = await Enrollment.find({ userId })
      .populate('courseId')
      .sort({ enrolledAt: -1 })
      .lean()
      .exec();
    
    console.log(`‚úÖ Found ${enrollments.length} enrollments for user ${userId}`);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json({
      success: true,
      data: enrollments.map(enrollment => ({
        id: enrollment._id,
        courseId: enrollment.courseId._id,
        courseName: enrollment.courseId.name,
        progress: enrollment.progress || 0,
        status: enrollment.status,
        enrolledAt: enrollment.enrolledAt,
        lastAccessedAt: enrollment.lastAccessedAt
      }))
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'L·ªói khi l·∫•y danh s√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc' 
    }, { status: 500 });
  }
}

// POST: Admin/CTV th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng
export async function POST(request) {
  try {
    // L·∫•y d·ªØ li·ªáu t·ª´ request
    const body = await request.json();
    const { userId, courseId, ctvEmail } = body;
    
    console.log(`üîç POST /api/admin/enrollments - userId: ${userId}, courseId: ${courseId}, ctvEmail: ${ctvEmail}`);
    
    // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c CTV
    const cookieStore = cookies();
    // ƒê·ªçc cookies tr·ª±c ti·∫øp t·ª´ cookieStore m√† kh√¥ng s·ª≠ d·ª•ng .get()
    let adminAccess = false;
    let ctvAccess = false;
    let ctvEmailCookie = null;
    
    // L·∫∑p qua t·∫•t c·∫£ cookie ƒë·ªÉ t√¨m cookie c·∫ßn thi·∫øt
    for (const cookie of cookieStore.getAll()) {
      if (cookie.name === 'admin_access' && cookie.value === 'true') {
        adminAccess = true;
      }
      if (cookie.name === 'ctv_access' && cookie.value === 'true') {
        ctvAccess = true;
      }
      if (cookie.name === 'ctv_email') {
        ctvEmailCookie = cookie;
      }
    }
    
    console.log(`üîë Cookie check - adminAccess: ${adminAccess}, ctvAccess: ${ctvAccess}`);
    
    // N·∫øu c√≥ cookie admin_access ho·∫∑c ctv_access, cho ph√©p truy c·∫≠p
    let hasAccess = adminAccess || ctvAccess;
    
    // N·∫øu kh√¥ng c√≥ cookie x√°c th·ª±c, ki·ªÉm tra qua header Authorization
    if (!hasAccess) {
      console.log('üîç Checking auth through headers...');
      hasAccess = await checkAuthAndRole(request, ['admin', 'ctv']);
      
      if (!hasAccess) {
        // N·∫øu c√≥ ctvEmail trong body v√† ƒë√£ thi·∫øt l·∫≠p cookie ctv_email, cho ph√©p
        if (ctvEmail && ctvEmailCookie && decodeURIComponent(ctvEmailCookie.value) === ctvEmail) {
          console.log('‚úÖ Access granted through ctv_email cookie match with body param');
          hasAccess = true;
        } else {
          console.log('‚ö†Ô∏è ctv_email cookie check failed', {
            bodyCtvEmail: ctvEmail,
            cookieCtvEmail: ctvEmailCookie ? decodeURIComponent(ctvEmailCookie.value) : null
          });
        }
      }
    }
    
    if (!hasAccess) {
      console.log('‚ùå Admin/CTV API - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!userId) {
      return NextResponse.json({ 
        success: false,
        message: 'Thi·∫øu ID ng∆∞·ªùi d√πng' 
      }, { status: 400 });
    }
    
    if (!courseId || !mongoose.Types.ObjectId.isValid(courseId)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await connectDB();
    
    // Ki·ªÉm tra kh√≥a h·ªçc t·ªìn t·∫°i
    const course = await Course.findById(courseId).lean().exec();
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y ch∆∞a
    const existingEnrollment = await Enrollment.findOne({ 
      userId,
      courseId
    }).lean().exec();
    
    if (existingEnrollment) {
      return NextResponse.json({ 
        success: false,
        message: 'Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' 
      }, { status: 409 });
    }
    
    // T·∫°o ƒëƒÉng k√Ω m·ªõi
    const enrollment = new Enrollment({
      userId,
      courseId,
      enrolledAt: new Date(),
      lastAccessedAt: new Date(),
      status: 'active',
      createdBy: ctvEmail || null // L∆∞u th√¥ng tin CTV ƒë√£ th√™m kh√≥a h·ªçc
    });
    
    // L∆∞u ƒëƒÉng k√Ω v√†o database
    await enrollment.save();
    
    console.log(`‚úÖ Added course ${courseId} for user ${userId}`);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json({
      success: true,
      message: 'ƒê√£ th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng th√†nh c√¥ng',
      data: {
        id: enrollment._id,
        courseId: course._id,
        courseName: course.name,
        progress: 0,
        status: 'active',
        enrolledAt: enrollment.enrolledAt,
        lastAccessedAt: enrollment.lastAccessedAt
      }
    });
  } catch (error) {
    console.error('L·ªói khi th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'L·ªói khi th√™m kh√≥a h·ªçc cho ng∆∞·ªùi d√πng' 
    }, { status: 500 });
  }
}

// DELETE: Admin/CTV x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc
export async function DELETE(request) {
  try {
    // L·∫•y ID ƒëƒÉng k√Ω t·ª´ URL
    const { searchParams } = new URL(request.url);
    const enrollmentId = searchParams.get('id');
    const ctvEmail = searchParams.get('ctvEmail');
    
    console.log(`üîç DELETE /api/admin/enrollments - enrollmentId: ${enrollmentId}, ctvEmail: ${ctvEmail}`);
    
    // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c CTV
    const cookieStore = cookies();
    // ƒê·ªçc cookies tr·ª±c ti·∫øp t·ª´ cookieStore m√† kh√¥ng s·ª≠ d·ª•ng .get()
    let adminAccess = false;
    let ctvAccess = false;
    let ctvEmailCookie = null;
    
    // L·∫∑p qua t·∫•t c·∫£ cookie ƒë·ªÉ t√¨m cookie c·∫ßn thi·∫øt
    for (const cookie of cookieStore.getAll()) {
      if (cookie.name === 'admin_access' && cookie.value === 'true') {
        adminAccess = true;
      }
      if (cookie.name === 'ctv_access' && cookie.value === 'true') {
        ctvAccess = true;
      }
      if (cookie.name === 'ctv_email') {
        ctvEmailCookie = cookie;
      }
    }
    
    console.log(`üîë Cookie check - adminAccess: ${adminAccess}, ctvAccess: ${ctvAccess}`);
    
    // N·∫øu c√≥ cookie admin_access ho·∫∑c ctv_access, cho ph√©p truy c·∫≠p
    let hasAccess = adminAccess || ctvAccess;
    
    // N·∫øu kh√¥ng c√≥ cookie x√°c th·ª±c, ki·ªÉm tra qua header Authorization
    if (!hasAccess) {
      console.log('üîç Checking auth through headers...');
      hasAccess = await checkAuthAndRole(request, ['admin', 'ctv']);
      
      if (!hasAccess) {
        // N·∫øu c√≥ ctvEmail trong query v√† ƒë√£ thi·∫øt l·∫≠p cookie ctv_email, cho ph√©p
        if (ctvEmail && ctvEmailCookie && decodeURIComponent(ctvEmailCookie.value) === ctvEmail) {
          console.log('‚úÖ Access granted through ctv_email cookie match with query param');
          hasAccess = true;
        } else {
          console.log('‚ö†Ô∏è ctv_email cookie check failed', {
            queryCtvEmail: ctvEmail,
            cookieCtvEmail: ctvEmailCookie ? decodeURIComponent(ctvEmailCookie.value) : null
          });
        }
      }
    }
    
    if (!hasAccess) {
      console.log('‚ùå Admin/CTV API - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    // Ki·ªÉm tra ID ƒëƒÉng k√Ω
    if (!enrollmentId || !mongoose.Types.ObjectId.isValid(enrollmentId)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID ƒëƒÉng k√Ω kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await connectDB();
    
    // T√¨m v√† x√≥a ƒëƒÉng k√Ω
    const result = await Enrollment.findByIdAndDelete(enrollmentId);
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    if (!result) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒëƒÉng k√Ω kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    console.log(`‚úÖ Deleted enrollment ${enrollmentId}`);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return NextResponse.json({
      success: true,
      message: 'ƒê√£ x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'L·ªói khi x√≥a ƒëƒÉng k√Ω kh√≥a h·ªçc' 
    }, { status: 500 });
  }
} 