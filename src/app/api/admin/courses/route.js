import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import { cookies } from 'next/headers';
import { connectDB } from '@/lib/mongodb';

// GET: L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc cho admin (kh√¥ng m√£ h√≥a)
export async function GET(request) {
  try {
    console.log('üîí Admin API - Ki·ªÉm tra quy·ªÅn truy c·∫≠p');
    
    // Ki·ªÉm tra cookie admin_access - s·ª≠a l·ªói b·∫±ng c√°ch g√°n gi√° tr·ªã tr·ª±c ti·∫øp
    const adminAccess = cookies().get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      // K·∫øt n·ªëi ƒë·∫øn MongoDB
      await connectDB();
      
      // L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc
      const courses = await Course.find({}).sort({ createdAt: -1 }).lean();
      
      // Tr·∫£ v·ªÅ th√¥ng tin kh√≥a h·ªçc
      return NextResponse.json({ courses });
    } else {
      console.log('‚ö†Ô∏è Admin API - Kh√¥ng c√≥ cookie admin_access, t·ª´ ch·ªëi truy c·∫≠p');
      return NextResponse.json(
        { error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' },
        { status: 403 }
      );
    }
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc:', error);
    return NextResponse.json({ error: 'L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc' }, { status: 500 });
  }
}

// POST: T·∫°o kh√≥a h·ªçc m·ªõi cho admin
export async function POST(request) {
  try {
    console.log('üîí Admin API - Ki·ªÉm tra quy·ªÅn truy c·∫≠p');
    
    // Ki·ªÉm tra cookie admin_access - s·ª≠a l·ªói b·∫±ng c√°ch g√°n gi√° tr·ªã tr·ª±c ti·∫øp
    const adminAccess = cookies().get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      // K·∫øt n·ªëi ƒë·∫øn MongoDB
      await connectDB();
      
      // Parse body request
      const requestBody = await request.json();
      const {
        name,
        description,
        category,
        status,
        price,
        originalPrice,
        image,
        content,
        level,
        discount
      } = requestBody;
      
      // Ki·ªÉm tra th√¥ng tin kh√≥a h·ªçc
      if (!name || !description) {
        return NextResponse.json({
          error: 'Thi·∫øu th√¥ng tin kh√≥a h·ªçc'
        }, { status: 400 });
      }
      
      // T·∫°o kh√≥a h·ªçc m·ªõi
      const newCourse = new Course({
        name,
        description,
        category: category || 'Kh√¥ng ph√¢n lo·∫°i',
        status: status || 'draft',
        price: price || 0,
        originalPrice: originalPrice || 0,
        image: image || '',
        content: content || '',
        level: level || 'Beginner',
        discount: discount || 0
      });
      
      // L∆∞u kh√≥a h·ªçc v√†o database
      await newCourse.save();
      
      // Tr·∫£ v·ªÅ th√¥ng tin kh√≥a h·ªçc m·ªõi
      return NextResponse.json({
        message: 'ƒê√£ t·∫°o kh√≥a h·ªçc m·ªõi th√†nh c√¥ng',
        course: newCourse
      });
    } else {
      console.log('‚ö†Ô∏è Admin API - Kh√¥ng c√≥ cookie admin_access, t·ª´ ch·ªëi truy c·∫≠p');
      return NextResponse.json({
        error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
      }, { status: 403 });
    }
  } catch (error) {
    console.error('L·ªói khi t·∫°o kh√≥a h·ªçc m·ªõi:', error);
    return NextResponse.json({ error: 'L·ªói khi t·∫°o kh√≥a h·ªçc m·ªõi' }, { status: 500 });
  }
} 