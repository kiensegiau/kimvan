import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import { headers, cookies } from 'next/headers';
import { connectDB } from '@/lib/mongodb';

// GET: L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc cho admin v√† CTV (kh√¥ng m√£ h√≥a)
export async function GET(request) {
  try {
    console.log('üîí Admin/CTV API - Ki·ªÉm tra quy·ªÅn truy c·∫≠p');
    
    // Ki·ªÉm tra quy·ªÅn t·ª´ cookie
    const cookieStore = cookies();
    const adminAccess = cookieStore.get('admin_access');
    const ctvAccess = cookieStore.get('ctv_access');
    
    console.log(`üîë Cookie check - adminAccess: ${adminAccess?.value}, ctvAccess: ${ctvAccess?.value}`);
    
    // Ki·ªÉm tra quy·ªÅn admin t·ª´ header 
    const headersList = headers();
    const userRole = headersList.get('x-user-role');
    
    console.log(`üîë Header check - userRole: ${userRole}`);
    
    // Cho ph√©p truy c·∫≠p n·∫øu l√† admin/ctv th√¥ng qua cookie ho·∫∑c header
    const hasAdminAccess = (adminAccess && adminAccess.value === 'true') || userRole === 'admin';
    const hasCTVAccess = (ctvAccess && ctvAccess.value === 'true');
    
    if (hasAdminAccess || hasCTVAccess) {
      if (hasAdminAccess) {
        console.log('üîí Admin API - Ng∆∞·ªùi d√πng c√≥ quy·ªÅn admin, cho ph√©p truy c·∫≠p');
      } else {
        console.log('üîí CTV API - Ng∆∞·ªùi d√πng c√≥ quy·ªÅn CTV, cho ph√©p truy c·∫≠p');
      }
      
      // K·∫øt n·ªëi ƒë·∫øn MongoDB
      await connectDB();
      
      // L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc
      const courses = await Course.find({}).sort({ createdAt: -1 }).lean();
      
      console.log(`‚úÖ L·∫•y th√†nh c√¥ng ${courses.length} kh√≥a h·ªçc`);
      
      // Tr·∫£ v·ªÅ th√¥ng tin kh√≥a h·ªçc
      return NextResponse.json({ courses });
    } else {
      // Th·ª≠ check authorization header cho API
      console.log('üîç Checking auth through headers...');
      const hasAccess = await checkAuthAndRole(request, ['admin', 'ctv']);
      
      if (hasAccess) {
        console.log('‚úÖ Access granted through auth header');
        
        // K·∫øt n·ªëi ƒë·∫øn MongoDB
        await connectDB();
        
        // L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc
        const courses = await Course.find({}).sort({ createdAt: -1 }).lean();
        
        console.log(`‚úÖ L·∫•y th√†nh c√¥ng ${courses.length} kh√≥a h·ªçc`);
        
        // Tr·∫£ v·ªÅ th√¥ng tin kh√≥a h·ªçc
        return NextResponse.json({ courses });
      }
      
      console.log('‚ö†Ô∏è Admin/CTV API - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p, t·ª´ ch·ªëi');
      return NextResponse.json(
        { error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' },
        { status: 403 }
      );
    }
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc:', error);
    return NextResponse.json({ error: 'L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc' }, { status: 500 });
  }
}

// POST: T·∫°o kh√≥a h·ªçc m·ªõi cho admin
export async function POST(request) {
  try {
    console.log('üîí Admin API - Ki·ªÉm tra quy·ªÅn truy c·∫≠p');
    
    // Ki·ªÉm tra quy·ªÅn admin t·ª´ cookie
    const cookieStore = cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    // Ki·ªÉm tra quy·ªÅn admin t·ª´ header 
    const headersList = headers();
    const userRole = headersList.get('x-user-role');
    
    // Cho ph√©p truy c·∫≠p n·∫øu l√† admin
    if ((adminAccess && adminAccess.value === 'true') || userRole === 'admin') {
      console.log('üîí Admin API - Ng∆∞·ªùi d√πng c√≥ quy·ªÅn admin, cho ph√©p truy c·∫≠p');
      
      // K·∫øt n·ªëi ƒë·∫øn MongoDB
      await connectDB();
      
      // Parse body request
      const requestBody = await request.json();
      const {
        name,
        description,
        category,
        status,
        price,
        originalPrice,
        image,
        content,
        level,
        discount
      } = requestBody;
      
      // Ki·ªÉm tra th√¥ng tin kh√≥a h·ªçc
      if (!name || !description) {
        return NextResponse.json({
          error: 'Thi·∫øu th√¥ng tin kh√≥a h·ªçc'
        }, { status: 400 });
      }
      
      // T·∫°o kh√≥a h·ªçc m·ªõi
      const newCourse = new Course({
        name,
        description,
        category: category || 'Kh√¥ng ph√¢n lo·∫°i',
        status: status || 'draft',
        price: price || 0,
        originalPrice: originalPrice || 0,
        image: image || '',
        content: content || '',
        level: level || 'Beginner',
        discount: discount || 0
      });
      
      // L∆∞u kh√≥a h·ªçc v√†o database
      await newCourse.save();
      
      // Tr·∫£ v·ªÅ th√¥ng tin kh√≥a h·ªçc m·ªõi
      return NextResponse.json({
        message: 'ƒê√£ t·∫°o kh√≥a h·ªçc m·ªõi th√†nh c√¥ng',
        course: newCourse
      });
    } else {
      // Th·ª≠ check authorization header cho API
      const hasAccess = await checkAuthAndRole(request, 'admin');
      
      if (hasAccess) {
        // K·∫øt n·ªëi ƒë·∫øn MongoDB
        await connectDB();
        
        // Parse body request v√† x·ª≠ l√Ω gi·ªëng nh∆∞ tr√™n...
        // [code t∆∞∆°ng t·ª± ph·∫ßn tr√™n]
        const requestBody = await request.json();
        const {
          name,
          description,
          category,
          status,
          price,
          originalPrice,
          image,
          content,
          level,
          discount
        } = requestBody;
        
        // Ki·ªÉm tra th√¥ng tin kh√≥a h·ªçc
        if (!name || !description) {
          return NextResponse.json({
            error: 'Thi·∫øu th√¥ng tin kh√≥a h·ªçc'
          }, { status: 400 });
        }
        
        // T·∫°o kh√≥a h·ªçc m·ªõi
        const newCourse = new Course({
          name,
          description,
          category: category || 'Kh√¥ng ph√¢n lo·∫°i',
          status: status || 'draft',
          price: price || 0,
          originalPrice: originalPrice || 0,
          image: image || '',
          content: content || '',
          level: level || 'Beginner',
          discount: discount || 0
        });
        
        // L∆∞u kh√≥a h·ªçc v√†o database
        await newCourse.save();
        
        // Tr·∫£ v·ªÅ th√¥ng tin kh√≥a h·ªçc m·ªõi
        return NextResponse.json({
          message: 'ƒê√£ t·∫°o kh√≥a h·ªçc m·ªõi th√†nh c√¥ng',
          course: newCourse
        });
      }
      
      console.log('‚ö†Ô∏è Admin API - Kh√¥ng c√≥ quy·ªÅn admin, t·ª´ ch·ªëi truy c·∫≠p');
      return NextResponse.json({
        error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
      }, { status: 403 });
    }
  } catch (error) {
    console.error('L·ªói khi t·∫°o kh√≥a h·ªçc m·ªõi:', error);
    return NextResponse.json({ error: 'L·ªói khi t·∫°o kh√≥a h·ªçc m·ªõi' }, { status: 500 });
  }
} 