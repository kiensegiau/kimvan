import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import { cookies } from 'next/headers';

// ƒê·∫£m b·∫£o k·∫øt n·ªëi MongoDB ƒë∆∞·ª£c thi·∫øt l·∫≠p
let isConnected = false;
const connectDB = async () => {
  if (isConnected) return;
  
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    isConnected = true;
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    throw error;
  }
};

// GET: L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc cho admin (kh√¥ng m√£ h√≥a)
export async function GET(request) {
  try {
    // Ki·ªÉm tra cookie admin_access
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    console.log('Admin API ƒë∆∞·ª£c g·ªçi, cookie admin_access:', adminAccess ? adminAccess.value : 'kh√¥ng c√≥');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      // L·∫•y danh s√°ch kh√≥a h·ªçc t·ª´ MongoDB
      const courses = await Course.find({}).lean().exec();
      
      // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a cho admin
      return NextResponse.json(courses);
    }
    
    // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
    const hasAccess = await checkAuthAndRole(request, 'admin');
    console.log('K·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn admin:', hasAccess);
    
    if (!hasAccess) {
      console.log('‚ùå Admin API - Kh√¥ng c√≥ quy·ªÅn admin');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o t√†i nguy√™n n√†y' 
      }, { status: 403 });
    }
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // L·∫•y danh s√°ch kh√≥a h·ªçc t·ª´ MongoDB
    const courses = await Course.find({}).lean().exec();
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a cho admin
    return NextResponse.json(courses);
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu kh√≥a h·ªçc cho admin:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu kh√≥a h·ªçc. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.',
      error: error.message 
    }, { status: 500 });
  }
}

// POST: T·∫°o kh√≥a h·ªçc m·ªõi cho admin
export async function POST(request) {
  try {
    // Ki·ªÉm tra cookie admin_access
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      const body = await request.json();
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      const newCourse = {
        name: body.name,
        description: body.description,
        price: body.price,
        status: body.status || 'active',
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      
      // S·ª≠ d·ª•ng Mongoose ƒë·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi
      const createdCourse = await Course.create(newCourse);
      
      return NextResponse.json({
        success: true,
        message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
        course: createdCourse
      }, { status: 201 });
    }
    
    // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
    const hasAccess = await checkAuthAndRole(request, 'admin');
    
    if (!hasAccess) {
      console.log('‚ùå Admin API - Kh√¥ng c√≥ quy·ªÅn admin');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    const body = await request.json();
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    const newCourse = {
      name: body.name,
      description: body.description,
      price: body.price,
      status: body.status || 'active',
      createdAt: new Date(),
      updatedAt: new Date(),
    };
    
    // S·ª≠ d·ª•ng Mongoose ƒë·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi
    const createdCourse = await Course.create(newCourse);
    
    return NextResponse.json({
      success: true,
      message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      course: createdCourse
    }, { status: 201 });
  } catch (error) {
    console.error('L·ªói khi t·∫°o kh√≥a h·ªçc m·ªõi:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o kh√≥a h·ªçc m·ªõi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi MongoDB.',
      error: error.message 
    }, { status: 500 });
  }
} 