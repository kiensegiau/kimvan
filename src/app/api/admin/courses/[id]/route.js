import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import { cookies } from 'next/headers';
import { connectDB } from '@/lib/mongodb';

// GET: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt kh√≥a h·ªçc
export async function GET(request, { params }) {
  try {
    // Await params tr∆∞·ªõc khi s·ª≠ d·ª•ng
    const paramsData = await params;
    const id = paramsData.id;
    
    // Ki·ªÉm tra cookie admin_access
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      // Ki·ªÉm tra ID h·ª£p l·ªá
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      
      // T√¨m kh√≥a h·ªçc theo ID
      const course = await Course.findById(id).lean().exec();
      
      if (!course) {
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
        }, { status: 404 });
      }
      
      // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a cho admin
      return NextResponse.json(course);
    }
    
    // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
    const hasAccess = await checkAuthAndRole(request, 'admin');
    
    if (!hasAccess) {
      console.log('‚ùå Admin API - Kh√¥ng c√≥ quy·ªÅn admin');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o t√†i nguy√™n n√†y' 
      }, { status: 403 });
    }
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // T√¨m kh√≥a h·ªçc theo ID
    const course = await Course.findById(id).lean().exec();
    
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng m√£ h√≥a cho admin
    return NextResponse.json(course);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
}

// PUT: C·∫≠p nh·∫≠t th√¥ng tin kh√≥a h·ªçc
export async function PUT(request, { params }) {
  try {
    // Await params tr∆∞·ªõc khi s·ª≠ d·ª•ng
    const paramsData = await params;
    const id = paramsData.id;
    
    // Ki·ªÉm tra cookie admin_access
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      const body = await request.json();
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      // Ki·ªÉm tra ID h·ª£p l·ªá
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      
      // C·∫≠p nh·∫≠t th√¥ng tin kh√≥a h·ªçc
      const updatedCourse = await Course.findByIdAndUpdate(
        id,
        { 
          ...body,
          updatedAt: new Date()
        },
        { new: true }
      ).lean().exec();
      
      if (!updatedCourse) {
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t' 
        }, { status: 404 });
      }
      
      return NextResponse.json({
        success: true,
        message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
        course: updatedCourse
      });
    }
    
    // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
    const hasAccess = await checkAuthAndRole(request, 'admin');
    
    if (!hasAccess) {
      console.log('‚ùå Admin API - Kh√¥ng c√≥ quy·ªÅn admin');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    const body = await request.json();
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // C·∫≠p nh·∫≠t th√¥ng tin kh√≥a h·ªçc
    const updatedCourse = await Course.findByIdAndUpdate(
      id,
      { 
        ...body,
        updatedAt: new Date()
      },
      { new: true }
    ).lean().exec();
    
    if (!updatedCourse) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t' 
      }, { status: 404 });
    }
    
    return NextResponse.json({
      success: true,
      message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
      course: updatedCourse
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
}

// DELETE: X√≥a kh√≥a h·ªçc
export async function DELETE(request, { params }) {
  try {
    // Await params tr∆∞·ªõc khi s·ª≠ d·ª•ng
    const paramsData = await params;
    const id = paramsData.id;
    
    // Ki·ªÉm tra cookie admin_access
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      // Ki·ªÉm tra ID h·ª£p l·ªá
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      
      // X√≥a kh√≥a h·ªçc
      const deletedCourse = await Course.findByIdAndDelete(id).lean().exec();
      
      if (!deletedCourse) {
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ x√≥a' 
        }, { status: 404 });
      }
      
      return NextResponse.json({
        success: true,
        message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'
      });
    }
    
    // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
    const hasAccess = await checkAuthAndRole(request, 'admin');
    
    if (!hasAccess) {
      console.log('‚ùå Admin API - Kh√¥ng c√≥ quy·ªÅn admin');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // X√≥a kh√≥a h·ªçc
    const deletedCourse = await Course.findByIdAndDelete(id).lean().exec();
    
    if (!deletedCourse) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ x√≥a' 
      }, { status: 404 });
    }
    
    return NextResponse.json({
      success: true,
      message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi x√≥a kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x√≥a kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
} 