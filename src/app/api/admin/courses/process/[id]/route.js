import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import { cookies } from 'next/headers';
import { connectDB } from '@/lib/mongodb';

// POST: X·ª≠ l√Ω m·ªôt kh√≥a h·ªçc c·ª• th·ªÉ
export async function POST(request, { params }) {
  try {
    // Ki·ªÉm tra cookie admin_access
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      const { id } = params;
      const body = await request.json();
      const { method } = body;
      
      // Ki·ªÉm tra ID h·ª£p l·ªá
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ 
          success: false,
          message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      
      // Ki·ªÉm tra ph∆∞∆°ng th·ª©c x·ª≠ l√Ω
      if (!method) {
        return NextResponse.json({ 
          success: false,
          message: 'Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω kh√¥ng ƒë∆∞·ª£c cung c·∫•p' 
        }, { status: 400 });
      }
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      // T√¨m kh√≥a h·ªçc theo ID
      const course = await Course.findById(id).lean().exec();
      
      if (!course) {
        return NextResponse.json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
        }, { status: 404 });
      }
      
      let result = {
        success: true,
        message: 'X·ª≠ l√Ω kh√≥a h·ªçc th√†nh c√¥ng',
        course: null
      };
      
      // X·ª≠ l√Ω kh√≥a h·ªçc theo ph∆∞∆°ng th·ª©c
      switch (method) {
        case 'extract_metadata':
          // Gi·∫£ ƒë·ªãnh c√≥ h√†m x·ª≠ l√Ω tr√≠ch xu·∫•t metadata
          if (course.originalData) {
            // X·ª≠ l√Ω metadata t·ª´ originalData
            const updatedCourse = await Course.findByIdAndUpdate(
              id,
              { 
                $set: {
                  metadata: { 
                    processed: true,
                    processedAt: new Date(),
                    // Th√™m c√°c tr∆∞·ªùng metadata kh√°c n·∫øu c·∫ßn
                  }
                }
              },
              { new: true }
            ).lean().exec();
            
            result.course = updatedCourse;
            result.message = 'ƒê√£ tr√≠ch xu·∫•t metadata th√†nh c√¥ng';
          } else {
            result.success = false;
            result.message = 'Kh√¥ng c√≥ d·ªØ li·ªáu g·ªëc ƒë·ªÉ tr√≠ch xu·∫•t metadata';
          }
          break;
          
        case 'regenerate_slug':
          // T·∫°o slug t·ª´ t√™n kh√≥a h·ªçc
          const slug = course.name
            .toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-')
            .trim();
            
          const updatedCourse = await Course.findByIdAndUpdate(
            id,
            { 
              $set: {
                slug: slug,
                updatedAt: new Date()
              }
            },
            { new: true }
          ).lean().exec();
          
          result.course = updatedCourse;
          result.message = 'ƒê√£ t·∫°o l·∫°i slug th√†nh c√¥ng';
          break;
          
        case 'calculate_stats':
          // Gi·∫£ ƒë·ªãnh t√≠nh to√°n th·ªëng k√™ cho kh√≥a h·ªçc
          const stats = {
            totalViews: Math.floor(Math.random() * 1000),
            totalEnrollments: Math.floor(Math.random() * 100),
            rating: (3 + Math.random() * 2).toFixed(1),
            lastCalculated: new Date()
          };
          
          const courseWithStats = await Course.findByIdAndUpdate(
            id,
            { 
              $set: {
                stats: stats,
                updatedAt: new Date()
              }
            },
            { new: true }
          ).lean().exec();
          
          result.course = courseWithStats;
          result.message = 'ƒê√£ t√≠nh to√°n th·ªëng k√™ th√†nh c√¥ng';
          break;
          
        default:
          result.success = false;
          result.message = `Ph∆∞∆°ng th·ª©c "${method}" kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£`;
      }
      
      return NextResponse.json(result);
    }
    
    // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
    const hasAccess = await checkAuthAndRole(request, 'admin');
    
    if (!hasAccess) {
      console.log('‚ùå Admin API - Kh√¥ng c√≥ quy·ªÅn admin');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    const { id } = params;
    const body = await request.json();
    const { method } = body;
    
    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json({ 
        success: false,
        message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    // Ki·ªÉm tra ph∆∞∆°ng th·ª©c x·ª≠ l√Ω
    if (!method) {
      return NextResponse.json({ 
        success: false,
        message: 'Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω kh√¥ng ƒë∆∞·ª£c cung c·∫•p' 
      }, { status: 400 });
    }
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // T√¨m kh√≥a h·ªçc theo ID
    const course = await Course.findById(id).lean().exec();
    
    if (!course) {
      return NextResponse.json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      }, { status: 404 });
    }
    
    let result = {
      success: true,
      message: 'X·ª≠ l√Ω kh√≥a h·ªçc th√†nh c√¥ng',
      course: null
    };
    
    // X·ª≠ l√Ω kh√≥a h·ªçc theo ph∆∞∆°ng th·ª©c
    switch (method) {
      case 'extract_metadata':
        // Gi·∫£ ƒë·ªãnh c√≥ h√†m x·ª≠ l√Ω tr√≠ch xu·∫•t metadata
        if (course.originalData) {
          // X·ª≠ l√Ω metadata t·ª´ originalData
          const updatedCourse = await Course.findByIdAndUpdate(
            id,
            { 
              $set: {
                metadata: { 
                  processed: true,
                  processedAt: new Date(),
                  // Th√™m c√°c tr∆∞·ªùng metadata kh√°c n·∫øu c·∫ßn
                }
              }
            },
            { new: true }
          ).lean().exec();
          
          result.course = updatedCourse;
          result.message = 'ƒê√£ tr√≠ch xu·∫•t metadata th√†nh c√¥ng';
        } else {
          result.success = false;
          result.message = 'Kh√¥ng c√≥ d·ªØ li·ªáu g·ªëc ƒë·ªÉ tr√≠ch xu·∫•t metadata';
        }
        break;
        
      case 'regenerate_slug':
        // T·∫°o slug t·ª´ t√™n kh√≥a h·ªçc
        const slug = course.name
          .toLowerCase()
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();
          
        const updatedCourse = await Course.findByIdAndUpdate(
          id,
          { 
            $set: {
              slug: slug,
              updatedAt: new Date()
            }
          },
          { new: true }
        ).lean().exec();
        
        result.course = updatedCourse;
        result.message = 'ƒê√£ t·∫°o l·∫°i slug th√†nh c√¥ng';
        break;
        
      case 'calculate_stats':
        // Gi·∫£ ƒë·ªãnh t√≠nh to√°n th·ªëng k√™ cho kh√≥a h·ªçc
        const stats = {
          totalViews: Math.floor(Math.random() * 1000),
          totalEnrollments: Math.floor(Math.random() * 100),
          rating: (3 + Math.random() * 2).toFixed(1),
          lastCalculated: new Date()
        };
        
        const courseWithStats = await Course.findByIdAndUpdate(
          id,
          { 
            $set: {
              stats: stats,
              updatedAt: new Date()
            }
          },
          { new: true }
        ).lean().exec();
        
        result.course = courseWithStats;
        result.message = 'ƒê√£ t√≠nh to√°n th·ªëng k√™ th√†nh c√¥ng';
        break;
        
      default:
        result.success = false;
        result.message = `Ph∆∞∆°ng th·ª©c "${method}" kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£`;
    }
    
    return NextResponse.json(result);
  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
} 