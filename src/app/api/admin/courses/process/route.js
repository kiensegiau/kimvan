import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import Course from '@/models/Course';
import { authMiddleware, checkAuthAndRole } from '@/lib/auth';
import { cookies } from 'next/headers';
import { connectDB } from '@/lib/mongodb';

// POST: X·ª≠ l√Ω h√†ng lo·∫°t kh√≥a h·ªçc
export async function POST(request) {
  try {
    // Ki·ªÉm tra cookie admin_access
    const cookieStore = await cookies();
    const adminAccess = cookieStore.get('admin_access');
    
    // N·∫øu c√≥ cookie admin_access, cho ph√©p truy c·∫≠p
    if (adminAccess && adminAccess.value === 'true') {
      console.log('üîí Admin API - ƒê√£ c√≥ cookie admin_access, cho ph√©p truy c·∫≠p');
      
      const body = await request.json();
      const { courseIds, method, value } = body;
      
      // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!courseIds || !Array.isArray(courseIds) || courseIds.length === 0) {
        return NextResponse.json({ 
          success: false,
          message: 'Danh s√°ch ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
        }, { status: 400 });
      }
      
      if (!method) {
        return NextResponse.json({ 
          success: false,
          message: 'Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω kh√¥ng ƒë∆∞·ª£c cung c·∫•p' 
        }, { status: 400 });
      }
      
      // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
      await connectDB();
      
      // Kh·ªüi t·∫°o bi·∫øn theo d√µi k·∫øt qu·∫£
      const results = {
        total: courseIds.length,
        success: 0,
        errors: 0,
        errorDetails: []
      };
      
      // X·ª≠ l√Ω t·ª´ng kh√≥a h·ªçc
      for (const courseId of courseIds) {
        try {
          // Ki·ªÉm tra ID h·ª£p l·ªá
          if (!mongoose.Types.ObjectId.isValid(courseId)) {
            results.errors++;
            results.errorDetails.push({ id: courseId, error: 'ID kh√¥ng h·ª£p l·ªá' });
            continue;
          }
          
          let updateData = {};
          
          // X√°c ƒë·ªãnh d·ªØ li·ªáu c·∫≠p nh·∫≠t d·ª±a tr√™n ph∆∞∆°ng th·ª©c
          switch (method) {
            case 'update_prices':
              if (!value || isNaN(Number(value))) {
                results.errors++;
                results.errorDetails.push({ id: courseId, error: 'Gi√° tr·ªã kh√¥ng h·ª£p l·ªá' });
                continue;
              }
              updateData = { price: Number(value) };
              break;
              
            case 'update_status':
              if (!['active', 'inactive', 'draft'].includes(value)) {
                results.errors++;
                results.errorDetails.push({ id: courseId, error: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
                continue;
              }
              updateData = { status: value };
              break;
              
            case 'add_tag':
              if (!value) {
                results.errors++;
                results.errorDetails.push({ id: courseId, error: 'Th·∫ª kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
                continue;
              }
              updateData = { $addToSet: { tags: value } };
              break;
              
            case 'remove_tag':
              if (!value) {
                results.errors++;
                results.errorDetails.push({ id: courseId, error: 'Th·∫ª kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
                continue;
              }
              updateData = { $pull: { tags: value } };
              break;
              
            case 'add_category':
              if (!value) {
                results.errors++;
                results.errorDetails.push({ id: courseId, error: 'Danh m·ª•c kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
                continue;
              }
              updateData = { $addToSet: { categories: value } };
              break;
              
            default:
              results.errors++;
              results.errorDetails.push({ id: courseId, error: 'Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£' });
              continue;
          }
          
          // Th√™m th·ªùi gian c·∫≠p nh·∫≠t
          if (!updateData.$set) updateData.$set = {};
          updateData.$set = { ...updateData.$set, updatedAt: new Date() };
          
          // C·∫≠p nh·∫≠t kh√≥a h·ªçc
          const updatedCourse = await Course.findByIdAndUpdate(
            courseId,
            updateData,
            { new: true }
          );
          
          if (!updatedCourse) {
            results.errors++;
            results.errorDetails.push({ id: courseId, error: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
          } else {
            results.success++;
          }
        } catch (error) {
          console.error(`L·ªói khi x·ª≠ l√Ω kh√≥a h·ªçc ${courseId}:`, error);
          results.errors++;
          results.errorDetails.push({ id: courseId, error: error.message });
        }
      }
      
      return NextResponse.json({
        success: true,
        message: `ƒê√£ x·ª≠ l√Ω ${results.success}/${results.total} kh√≥a h·ªçc th√†nh c√¥ng`,
        summary: results
      });
    }
    
    // Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng v√† quy·ªÅn admin
    const hasAccess = await checkAuthAndRole(request, 'admin');
    
    if (!hasAccess) {
      console.log('‚ùå Admin API - Kh√¥ng c√≥ quy·ªÅn admin');
      return NextResponse.json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' 
      }, { status: 403 });
    }
    
    const body = await request.json();
    const { courseIds, method, value } = body;
    
    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!courseIds || !Array.isArray(courseIds) || courseIds.length === 0) {
      return NextResponse.json({ 
        success: false,
        message: 'Danh s√°ch ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' 
      }, { status: 400 });
    }
    
    if (!method) {
      return NextResponse.json({ 
        success: false,
        message: 'Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω kh√¥ng ƒë∆∞·ª£c cung c·∫•p' 
      }, { status: 400 });
    }
    
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë·∫øn MongoDB tr∆∞·ªõc khi truy v·∫•n
    await connectDB();
    
    // Kh·ªüi t·∫°o bi·∫øn theo d√µi k·∫øt qu·∫£
    const results = {
      total: courseIds.length,
      success: 0,
      errors: 0,
      errorDetails: []
    };
    
    // X·ª≠ l√Ω t·ª´ng kh√≥a h·ªçc
    for (const courseId of courseIds) {
      try {
        // Ki·ªÉm tra ID h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(courseId)) {
          results.errors++;
          results.errorDetails.push({ id: courseId, error: 'ID kh√¥ng h·ª£p l·ªá' });
          continue;
        }
        
        let updateData = {};
        
        // X√°c ƒë·ªãnh d·ªØ li·ªáu c·∫≠p nh·∫≠t d·ª±a tr√™n ph∆∞∆°ng th·ª©c
        switch (method) {
          case 'update_prices':
            if (!value || isNaN(Number(value))) {
              results.errors++;
              results.errorDetails.push({ id: courseId, error: 'Gi√° tr·ªã kh√¥ng h·ª£p l·ªá' });
              continue;
            }
            updateData = { price: Number(value) };
            break;
            
          case 'update_status':
            if (!['active', 'inactive', 'draft'].includes(value)) {
              results.errors++;
              results.errorDetails.push({ id: courseId, error: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
              continue;
            }
            updateData = { status: value };
            break;
            
          case 'add_tag':
            if (!value) {
              results.errors++;
              results.errorDetails.push({ id: courseId, error: 'Th·∫ª kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
              continue;
            }
            updateData = { $addToSet: { tags: value } };
            break;
            
          case 'remove_tag':
            if (!value) {
              results.errors++;
              results.errorDetails.push({ id: courseId, error: 'Th·∫ª kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
              continue;
            }
            updateData = { $pull: { tags: value } };
            break;
            
          case 'add_category':
            if (!value) {
              results.errors++;
              results.errorDetails.push({ id: courseId, error: 'Danh m·ª•c kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
              continue;
            }
            updateData = { $addToSet: { categories: value } };
            break;
            
          default:
            results.errors++;
            results.errorDetails.push({ id: courseId, error: 'Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£' });
            continue;
        }
        
        // Th√™m th·ªùi gian c·∫≠p nh·∫≠t
        if (!updateData.$set) updateData.$set = {};
        updateData.$set = { ...updateData.$set, updatedAt: new Date() };
        
        // C·∫≠p nh·∫≠t kh√≥a h·ªçc
        const updatedCourse = await Course.findByIdAndUpdate(
          courseId,
          updateData,
          { new: true }
        );
        
        if (!updatedCourse) {
          results.errors++;
          results.errorDetails.push({ id: courseId, error: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
        } else {
          results.success++;
        }
      } catch (error) {
        console.error(`L·ªói khi x·ª≠ l√Ω kh√≥a h·ªçc ${courseId}:`, error);
        results.errors++;
        results.errorDetails.push({ id: courseId, error: error.message });
      }
    }
    
    return NextResponse.json({
      success: true,
      message: `ƒê√£ x·ª≠ l√Ω ${results.success}/${results.total} kh√≥a h·ªçc th√†nh c√¥ng`,
      summary: results
    });
  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω h√†ng lo·∫°t kh√≥a h·ªçc:', error);
    return NextResponse.json({ 
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω h√†ng lo·∫°t kh√≥a h·ªçc',
      error: error.message 
    }, { status: 500 });
  }
} 