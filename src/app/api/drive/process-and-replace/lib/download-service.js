import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { google } from 'googleapis';
import { v4 as uuidv4 } from 'uuid';
import { getAccessToken } from '@/utils/auth-utils';
import { downloadWithBrowserCookie } from '../../remove-watermark/lib/drive-fix-blockdown';
import os from 'os';

/**
 * T·∫£i xu·ªëng file t·ª´ Google Drive
 * @param {string} fileId - ID c·ªßa file tr√™n Google Drive
 * @param {Object} options - T√πy ch·ªçn t·∫£i xu·ªëng
 * @param {boolean} options.forceCookie - B·∫Øt bu·ªôc d√πng cookie thay v√¨ API
 * @returns {Promise<Object>} - K·∫øt qu·∫£ t·∫£i xu·ªëng
 */
export async function downloadFromGoogleDrive(fileId, options = {}) {
  console.log(`B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng file v·ªõi ID: ${fileId}`);
  
  // T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file
  const outputDir = path.join(os.tmpdir(), uuidv4());
  fs.mkdirSync(outputDir, { recursive: true });
  console.log(`ƒê√£ t·∫°o th∆∞ m·ª•c t·∫°m: ${outputDir}`);

  // Th√™m c∆° ch·∫ø retry
  const MAX_RETRIES = 3;
  let lastError = null;
  
  for (let retryCount = 0; retryCount <= MAX_RETRIES; retryCount++) {
    try {
      if (retryCount > 0) {
        console.log(`Th·ª≠ l·∫°i l·∫ßn ${retryCount}/${MAX_RETRIES} cho file ID: ${fileId}`);
        const delayTime = Math.min(Math.pow(2, retryCount) * 2000, 30000);
        console.log(`ƒê·ª£i ${delayTime/1000} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        await new Promise(resolve => setTimeout(resolve, delayTime));
      }

      let response;
      
      // ∆Øu ti√™n s·ª≠ d·ª•ng Google Drive API n·∫øu kh√¥ng b·ªã b·∫Øt bu·ªôc d√πng cookie
      if (!options.forceCookie) {
        try {
          console.log('üîÑ ƒêang th·ª≠ t·∫£i file th√¥ng qua Google Drive API...');
          
          // L·∫•y access token t·ª´ auth-utils
          const accessToken = await getAccessToken();
          console.log('ƒê√£ l·∫•y access token t·ª´ auth-utils');

          // T·∫°o URL download v·ªõi token
          const downloadUrl = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`;
          console.log('URL t·∫£i xu·ªëng:', downloadUrl);

          // T·∫£i file v·ªõi token
          response = await fetch(downloadUrl, {
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Accept': '*/*'
            }
          });

          // N·∫øu l·ªói 404, chuy·ªÉn sang d√πng cookie
          if (response.status === 404) {
            console.log('API b√°o 404, chuy·ªÉn sang d√πng cookie...');
            return await downloadFromGoogleDrive(fileId, { forceCookie: true });
          }

          // N·∫øu l·ªói kh√°c 404, throw error
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`L·ªói khi t·∫£i file (HTTP ${response.status}): ${errorText}`);
          }
          
          console.log('‚úÖ T·∫£i file qua Google Drive API th√†nh c√¥ng');
        } catch (apiError) {
          console.error(`‚ùå L·ªói khi t·∫£i qua API: ${apiError.message}`);
          console.log('Chuy·ªÉn sang d√πng cookie...');
          return await downloadFromGoogleDrive(fileId, { forceCookie: true });
        }
      } else {
        // D√πng cookie ƒë·ªÉ t·∫£i
        console.log('ƒêang t·∫£i file b·∫±ng cookie...');
        return await downloadWithBrowserCookie(fileId, outputDir);
      }

      // X√°c ƒë·ªãnh ƒëu√¥i file
      const mimeType = response.headers.get('content-type');
      let extension = '';
      
      if (mimeType) {
        switch (mimeType.toLowerCase()) {
          case 'application/pdf':
            extension = '.pdf';
            break;
          case 'image/jpeg':
            extension = '.jpg';
            break;
          case 'image/png':
            extension = '.png';
            break;
          case 'image/gif':
            extension = '.gif';
            break;
          case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            extension = '.docx';
            break;
          case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
            extension = '.xlsx';
            break;
          case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
            extension = '.pptx';
            break;
          default:
            console.log('‚ö†Ô∏è MIME type kh√¥ng x√°c ƒë·ªãnh:', mimeType);
            break;
        }
      }

      // T·∫°o t√™n file v·ªõi prefix m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ t√™n
      const defaultPrefix = 'T√†i li·ªáu';
      const timestamp = new Date().getTime();
      const outputFile = `${defaultPrefix}_${timestamp}${extension}`;
      const outputPath = path.join(outputDir, outputFile);

      // Log th√¥ng tin file
      console.log('üìù T√™n file:', outputFile);
      console.log('üìÇ ƒê∆∞·ªùng d·∫´n:', outputPath);

      const dest = fs.createWriteStream(outputPath);
      const reader = response.body.getReader();
      
      while (true) {
        const { done, value } = await reader.read();
        
        if (done) {
          console.log('Ho√†n t·∫•t t·∫£i xu·ªëng');
          break;
        }
        
        dest.write(Buffer.from(value));
      }
      
      await new Promise((resolve, reject) => {
        dest.end();
        dest.on('finish', resolve);
        dest.on('error', reject);
      });

      const result = {
        success: true,
        filePath: outputPath,
        outputDir,
        mimeType: mimeType,
        fileName: outputFile
      };

      // Log chi ti·∫øt v·ªÅ file
      console.log('‚úÖ T·∫£i file th√†nh c√¥ng:', result.filePath);
      console.log('üìÑ MIME type:', result.mimeType);
      console.log('üì¶ K√≠ch th∆∞·ªõc:', Math.round(fs.statSync(result.filePath).size / 1024 / 1024 * 100) / 100, 'MB');
      console.log('‚è∞ Th·ªùi gian:', new Date().toLocaleString());
      console.log('üÜî File ID:', fileId);

      return result;

    } catch (error) {
      console.error(`L·ªói khi t·∫£i xu·ªëng file (l·∫ßn th·ª≠ ${retryCount + 1}/${MAX_RETRIES + 1}):`, error);
      lastError = error;
      
      if (retryCount === MAX_RETRIES) {
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i xu·ªëng file sau ${MAX_RETRIES + 1} l·∫ßn th·ª≠: ${error.message}`);
      }
      
      try {
        if (fs.existsSync(outputDir)) {
          fs.rmSync(outputDir, { recursive: true });
          console.log(`ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m ${outputDir} do l·ªói`);
        }
      } catch (cleanupError) {
        console.error('L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m:', cleanupError);
      }
    }
  }
}

/**
 * Ki·ªÉm tra th√¥ng tin v√† quy·ªÅn truy c·∫≠p file
 * @param {string} fileId - ID c·ªßa file tr√™n Google Drive
 * @returns {Promise<Object>} - Th√¥ng tin file
 */
export async function checkFileInfo(fileId) {
  console.log(`Ki·ªÉm tra th√¥ng tin file ${fileId}...`);
  
  try {
    // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa file, bao g·ªìm permissions v√† owner
    const response = await fetch(
      `https://www.googleapis.com/drive/v3/files/${fileId}?fields=id,name,mimeType,size,fileExtension,capabilities,permissions,owners,sharingUser`,
      {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${await getAccessToken()}`
        }
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`L·ªói khi l·∫•y th√¥ng tin file: ${errorText}`);
      
      if (response.status === 404) {
        return {
          success: false,
          error: 'File kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a',
          status: 404
        };
      }
      
      if (response.status === 403) {
        return {
          success: false,
          error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file',
          status: 403
        };
      }
      
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const fileInfo = await response.json();
    
  

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const canDownload = fileInfo.capabilities?.canDownload;
    if (!canDownload) {
      return {
        success: false,
        error: 'Kh√¥ng c√≥ quy·ªÅn t·∫£i xu·ªëng file',
        status: 403,
        fileInfo
      };
    }

    return {
      success: true,
      fileInfo
    };
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra file:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Li·ªát k√™ t·∫•t c·∫£ c√°c file trong m·ªôt folder Google Drive
 * @param {string} folderId - ID c·ªßa folder c·∫ßn li·ªát k√™
 * @returns {Promise<Array>} - Danh s√°ch c√°c file trong folder
 */
export async function listFilesInFolder(folderId) {
  console.log(`ƒêang li·ªát k√™ c√°c file trong folder ${folderId}...`);
  
  try {
    // T·∫°o OAuth2 client v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông refresh token
    const oauth2Client = createOAuth2Client(1); // S·ª≠ d·ª•ng token t·∫£i xu·ªëng
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p folder
    try {
      const folderInfo = await drive.files.get({
        fileId: folderId,
        fields: 'name,mimeType,capabilities'
      });
      
      // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† folder kh√¥ng
      if (folderInfo.data.mimeType !== 'application/vnd.google-apps.folder') {
        return {
          success: false,
          error: 'ID ƒë∆∞·ª£c cung c·∫•p kh√¥ng ph·∫£i l√† folder',
          errorCode: 'NOT_A_FOLDER'
        };
      }
      
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      if (folderInfo.data.capabilities && !folderInfo.data.capabilities.canListChildren) {
        return {
          success: false,
          error: `Kh√¥ng c√≥ quy·ªÅn li·ªát k√™ n·ªôi dung c·ªßa folder: ${folderInfo.data.name || folderId}`,
          errorCode: 'PERMISSION_DENIED'
        };
      }
      
      console.log(`ƒê√£ x√°c nh·∫≠n quy·ªÅn truy c·∫≠p v√†o folder: ${folderInfo.data.name}`);
    } catch (error) {
      // X·ª≠ l√Ω l·ªói khi ki·ªÉm tra folder
      if (error.code === 404 || error.response?.status === 404) {
        return {
          success: false,
          error: `Folder kh√¥ng t·ªìn t·∫°i (404): ${folderId}`,
          errorCode: 'FOLDER_NOT_FOUND'
        };
      }
      
      if (error.code === 403 || error.response?.status === 403) {
        return {
          success: false,
          error: `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p folder (403): ${folderId}`,
          errorCode: 'PERMISSION_DENIED'
        };
      }
      
      return {
        success: false,
        error: `L·ªói khi ki·ªÉm tra folder: ${error.message}`,
        errorCode: 'CHECK_FOLDER_ERROR'
      };
    }
    
    let files = [];
    let pageToken = null;
    
    do {
      const response = await drive.files.list({
        q: `'${folderId}' in parents and trashed=false`,
        fields: 'nextPageToken, files(id, name, mimeType, size)',
        pageToken: pageToken,
        pageSize: 1000
      });
      
      files = files.concat(response.data.files);
      pageToken = response.data.nextPageToken;
    } while (pageToken);
    
    console.log(`ƒê√£ t√¨m th·∫•y ${files.length} file/folder trong folder ${folderId}`);
    return {
      success: true,
      files: files
    };
  } catch (error) {
    console.error(`L·ªói khi li·ªát k√™ file trong folder ${folderId}:`, error);
    
    // Ph√¢n lo·∫°i l·ªói
    let errorCode = 'UNKNOWN_ERROR';
    let errorMessage = error.message;
    
    if (error.code === 404 || error.response?.status === 404) {
      errorCode = 'FOLDER_NOT_FOUND';
      errorMessage = `Folder kh√¥ng t·ªìn t·∫°i (404): ${folderId}`;
    } else if (error.code === 403 || error.response?.status === 403) {
      errorCode = 'PERMISSION_DENIED';
      errorMessage = `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p folder (403): ${folderId}`;
    } else if (error.code === 401 || error.response?.status === 401) {
      errorCode = 'UNAUTHORIZED';
      errorMessage = `Kh√¥ng ƒë∆∞·ª£c x√°c th·ª±c ƒë·ªÉ truy c·∫≠p folder (401): ${folderId}`;
    }
    
    return {
      success: false,
      error: errorMessage,
      errorCode: errorCode
    };
  }
} 