import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { google } from 'googleapis';
import { v4 as uuidv4 } from 'uuid';
import { getAccessToken } from '@/utils/auth-utils';
import os from 'os';

/**
 * T·∫£i xu·ªëng file t·ª´ Google Drive
 * @param {string} fileId - ID c·ªßa file tr√™n Google Drive
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n ƒë·∫ßu ra ƒë·ªÉ l∆∞u file
 * @returns {Promise<Object>} - K·∫øt qu·∫£ t·∫£i xu·ªëng
 */
export async function downloadFromGoogleDrive(fileId, outputPath) {
  console.log(`B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng file v·ªõi ID: ${fileId}`);
  console.log(`ƒê∆∞·ªùng d·∫´n ƒë·∫ßu ra: ${outputPath}`);
  
  // ƒê·∫£m b·∫£o th∆∞ m·ª•c ch·ª©a file t·ªìn t·∫°i
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
    console.log(`ƒê√£ t·∫°o th∆∞ m·ª•c: ${outputDir}`);
  } else {
    console.log(`Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: ${outputDir}`);
  }

  // X√≥a file c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
  if (fs.existsSync(outputPath)) {
    console.log(`File ƒë√£ t·ªìn t·∫°i, ƒëang x√≥a: ${outputPath}`);
    try {
      fs.unlinkSync(outputPath);
      console.log(`ƒê√£ x√≥a file c≈© t·∫°i: ${outputPath}`);
    } catch (unlinkError) {
      console.error(`Kh√¥ng th·ªÉ x√≥a file c≈©: ${unlinkError.message}`);
    }
  }

  // Th√™m c∆° ch·∫ø retry
  const MAX_RETRIES = 1;
  let lastError = null;
  
  for (let retryCount = 0; retryCount <= MAX_RETRIES; retryCount++) {
    try {
      if (retryCount > 0) {
        console.log(`Th·ª≠ l·∫°i l·∫ßn ${retryCount}/${MAX_RETRIES} cho file ID: ${fileId}`);
        const delayTime = Math.min(Math.pow(2, retryCount) * 2000, 30000);
        console.log(`ƒê·ª£i ${delayTime/1000} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        await new Promise(resolve => setTimeout(resolve, delayTime));
      }

      console.log('üîÑ ƒêang th·ª≠ t·∫£i file th√¥ng qua Google Drive API...');
      
      // L·∫•y access token t·ª´ auth-utils
      const accessToken = await getAccessToken();
      console.log('ƒê√£ l·∫•y access token t·ª´ auth-utils');

      // T·∫°o URL t·∫£i xu·ªëng
      const downloadUrl = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`;
      console.log('URL t·∫£i xu·ªëng:', downloadUrl);

      // Th·ª±c hi·ªán request t·∫£i xu·ªëng
      console.log(`B·∫Øt ƒë·∫ßu g·ª≠i request t·∫£i xu·ªëng...`);
      const response = await axios({
        method: 'get',
        url: downloadUrl,
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
        responseType: 'stream',
        timeout: 30000 // 30 gi√¢y timeout
      });
      console.log(`ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ server, b·∫Øt ƒë·∫ßu ghi file...`);

      // X√°c ƒë·ªãnh ƒëu√¥i file d·ª±a tr√™n MIME type
      const mimeType = response.headers['content-type'];
      console.log(`MIME type: ${mimeType}`);
      
      // Ghi file v√†o outputPath
      const writer = fs.createWriteStream(outputPath);
      console.log(`ƒê√£ t·∫°o stream ghi file t·∫°i: ${outputPath}`);
      
      // B·∫Øt s·ª± ki·ªán l·ªói c·ªßa writer
      writer.on('error', (err) => {
        console.error(`L·ªói khi ghi file: ${err.message}`);
      });
      
      // B·∫Øt s·ª± ki·ªán pipe data
      response.data.on('data', (chunk) => {
        // Log khi ƒë√£ nh·∫≠n d·ªØ li·ªáu ƒë·∫ßu ti√™n
        if (!writer.bytesWritten || writer.bytesWritten === 0) {
          console.log(`ƒêang nh·∫≠n d·ªØ li·ªáu...`);
        }
      });
      
      // Pipe d·ªØ li·ªáu
      response.data.pipe(writer);

      // ƒê·ª£i ghi file ho√†n t·∫•t
      await new Promise((resolve, reject) => {
        writer.on('finish', () => {
          console.log(`Stream ghi file ƒë√£ k·∫øt th√∫c`);
          resolve();
        });
        writer.on('error', (err) => {
          console.error(`L·ªói stream ghi file: ${err.message}`);
          reject(err);
        });
      });

      // Ki·ªÉm tra file ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
      if (fs.existsSync(outputPath)) {
        try {
          const fileStats = fs.statSync(outputPath);
          const fileSizeMB = fileStats.size / (1024 * 1024);
          
          console.log(`‚úÖ T·∫£i file th√†nh c√¥ng qua API`);
          console.log(`üìÑ ƒê∆∞·ªùng d·∫´n: ${outputPath}`);
          console.log(`üì¶ K√≠ch th∆∞·ªõc: ${fileSizeMB.toFixed(2)} MB`);
          
          if (fileSizeMB < 0.001) {
            console.warn(`‚ö†Ô∏è C·∫£nh b√°o: File c√≥ k√≠ch th∆∞·ªõc qu√° nh·ªè (${fileStats.size} bytes)`);
          }
          
          return {
            success: true,
            filePath: outputPath,
            mimeType: mimeType
          };
        } catch (statError) {
          console.error(`L·ªói khi ki·ªÉm tra file: ${statError.message}`);
          throw new Error(`File ƒë√£ t·∫°o nh∆∞ng kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin: ${statError.message}`);
        }
      } else {
        console.error(`‚ùå L·ªói: File kh√¥ng ƒë∆∞·ª£c t·∫°o t·∫°i ƒë∆∞·ªùng d·∫´n: ${outputPath}`);
        throw new Error(`File kh√¥ng ƒë∆∞·ª£c t·∫°o t·∫°i ƒë∆∞·ªùng d·∫´n: ${outputPath}`);
      }

    } catch (error) {
      let errorMessage = 'Unknown error';
      
      try {
        if (error.response?.data) {
          // X·ª≠ l√Ω an to√†n ƒë·ªÉ tr√°nh l·ªói circular structure
          errorMessage = typeof error.response.data === 'string' ? 
            error.response.data : 
            'Error response data (cannot stringify)';
        } else {
          errorMessage = error.message || 'Unknown error';
        }
      } catch (jsonError) {
        errorMessage = `Error parsing response data: ${error.message || 'Unknown error'}`;
      }
        
      console.error(`L·ªói khi t·∫£i xu·ªëng file (l·∫ßn th·ª≠ ${retryCount + 1}/${MAX_RETRIES + 1}):`, errorMessage);
      console.error(`Lo·∫°i l·ªói: ${error.name}, Code: ${error.code}, Response status: ${error.response?.status}`);
      
      lastError = error;
      
      // Ki·ªÉm tra l·ªói 403 (Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p)
      if (error.response?.status === 403 || 
          error.message?.includes('403') || 
          error.message?.includes('cannotDownloadFile')) {
        console.log('‚ö†Ô∏è Ph√°t hi·ªán l·ªói 403 - File b·ªã ch·∫∑n download');
        throw new Error(`HTTP 403: File b·ªã ch·∫∑n download - ${errorMessage}`);
      }
      
      // N·∫øu ƒë√£ th·ª≠ h·∫øt s·ªë l·∫ßn, n√©m l·ªói
      if (retryCount === MAX_RETRIES) {
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i xu·ªëng file sau ${MAX_RETRIES + 1} l·∫ßn th·ª≠: ${errorMessage}`);
      }
      
      // X√≥a file t·∫°m n·∫øu c√≥ l·ªói v√† t·ªìn t·∫°i
      if (fs.existsSync(outputPath)) {
        try {
          fs.unlinkSync(outputPath);
          console.log(`ƒê√£ x√≥a file t·∫°m ${outputPath} do l·ªói`);
        } catch (cleanupError) {
          console.error('L·ªói khi x√≥a file t·∫°m:', cleanupError.message);
        }
      }
    }
  }
  
  // N·∫øu code ch·∫°y ƒë·∫øn ƒë√¢y, c√≥ l·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
  throw lastError || new Error('Kh√¥ng th·ªÉ t·∫£i xu·ªëng file v√¨ l·ªói kh√¥ng x√°c ƒë·ªãnh');
}

/**
 * Ki·ªÉm tra th√¥ng tin v√† quy·ªÅn truy c·∫≠p file
 * @param {string} fileId - ID c·ªßa file tr√™n Google Drive
 * @returns {Promise<Object>} - Th√¥ng tin file
 */
export async function checkFileInfo(fileId) {
  console.log(`Ki·ªÉm tra th√¥ng tin file ${fileId}...`);
  
  try {
    // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa file, bao g·ªìm permissions v√† owner
    const response = await fetch(
      `https://www.googleapis.com/drive/v3/files/${fileId}?fields=id,name,mimeType,size,fileExtension,capabilities,permissions,owners,sharingUser`,
      {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${await getAccessToken()}`
        }
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`L·ªói khi l·∫•y th√¥ng tin file: ${errorText}`);
      
      if (response.status === 404) {
        return {
          success: false,
          error: 'File kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a',
          status: 404
        };
      }
      
      if (response.status === 403) {
        return {
          success: false,
          error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file',
          status: 403
        };
      }
      
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const fileInfo = await response.json();
    
  

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const canDownload = fileInfo.capabilities?.canDownload;
    if (!canDownload) {
      return {
        success: false,
        error: 'Kh√¥ng c√≥ quy·ªÅn t·∫£i xu·ªëng file',
        status: 403,
        fileInfo
      };
    }

    return {
      success: true,
      fileInfo
    };
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra file:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Li·ªát k√™ t·∫•t c·∫£ c√°c file trong m·ªôt folder Google Drive
 * @param {string} folderId - ID c·ªßa folder c·∫ßn li·ªát k√™
 * @returns {Promise<Array>} - Danh s√°ch c√°c file trong folder
 */
export async function listFilesInFolder(folderId) {
  console.log(`ƒêang li·ªát k√™ c√°c file trong folder ${folderId}...`);
  
  try {
    // T·∫°o OAuth2 client v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông refresh token
    const oauth2Client = createOAuth2Client(1); // S·ª≠ d·ª•ng token t·∫£i xu·ªëng
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p folder
    try {
      const folderInfo = await drive.files.get({
        fileId: folderId,
        fields: 'name,mimeType,capabilities'
      });
      
      // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† folder kh√¥ng
      if (folderInfo.data.mimeType !== 'application/vnd.google-apps.folder') {
        return {
          success: false,
          error: 'ID ƒë∆∞·ª£c cung c·∫•p kh√¥ng ph·∫£i l√† folder',
          errorCode: 'NOT_A_FOLDER'
        };
      }
      
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      if (folderInfo.data.capabilities && !folderInfo.data.capabilities.canListChildren) {
        return {
          success: false,
          error: `Kh√¥ng c√≥ quy·ªÅn li·ªát k√™ n·ªôi dung c·ªßa folder: ${folderInfo.data.name || folderId}`,
          errorCode: 'PERMISSION_DENIED'
        };
      }
      
      console.log(`ƒê√£ x√°c nh·∫≠n quy·ªÅn truy c·∫≠p v√†o folder: ${folderInfo.data.name}`);
    } catch (error) {
      // X·ª≠ l√Ω l·ªói khi ki·ªÉm tra folder
      if (error.code === 404 || error.response?.status === 404) {
        return {
          success: false,
          error: `Folder kh√¥ng t·ªìn t·∫°i (404): ${folderId}`,
          errorCode: 'FOLDER_NOT_FOUND'
        };
      }
      
      if (error.code === 403 || error.response?.status === 403) {
        return {
          success: false,
          error: `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p folder (403): ${folderId}`,
          errorCode: 'PERMISSION_DENIED'
        };
      }
      
      return {
        success: false,
        error: `L·ªói khi ki·ªÉm tra folder: ${error.message}`,
        errorCode: 'CHECK_FOLDER_ERROR'
      };
    }
    
    let files = [];
    let pageToken = null;
    
    do {
      const response = await drive.files.list({
        q: `'${folderId}' in parents and trashed=false`,
        fields: 'nextPageToken, files(id, name, mimeType, size)',
        pageToken: pageToken,
        pageSize: 1000
      });
      
      files = files.concat(response.data.files);
      pageToken = response.data.nextPageToken;
    } while (pageToken);
    
    console.log(`ƒê√£ t√¨m th·∫•y ${files.length} file/folder trong folder ${folderId}`);
    return {
      success: true,
      files: files
    };
  } catch (error) {
    console.error(`L·ªói khi li·ªát k√™ file trong folder ${folderId}:`, error);
    
    // Ph√¢n lo·∫°i l·ªói
    let errorCode = 'UNKNOWN_ERROR';
    let errorMessage = error.message;
    
    if (error.code === 404 || error.response?.status === 404) {
      errorCode = 'FOLDER_NOT_FOUND';
      errorMessage = `Folder kh√¥ng t·ªìn t·∫°i (404): ${folderId}`;
    } else if (error.code === 403 || error.response?.status === 403) {
      errorCode = 'PERMISSION_DENIED';
      errorMessage = `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p folder (403): ${folderId}`;
    } else if (error.code === 401 || error.response?.status === 401) {
      errorCode = 'UNAUTHORIZED';
      errorMessage = `Kh√¥ng ƒë∆∞·ª£c x√°c th·ª±c ƒë·ªÉ truy c·∫≠p folder (401): ${folderId}`;
    }
    
    return {
      success: false,
      error: errorMessage,
      errorCode: errorCode
    };
  }
} 