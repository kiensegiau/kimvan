/**
 * process-manager.js
 * Module qu·∫£n l√Ω c√°c quy tr√¨nh x·ª≠ l√Ω file v√† th∆∞ m·ª•c
 */
import { google } from 'googleapis';
import path from 'path';
import fs from 'fs';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import { extractDriveFileId } from '@/utils/drive-utils';
import { checkMimeType } from './mime-service';
import { downloadFromGoogleDrive, checkFileInfo } from './download-service';
import { processFile } from './file-processor';
import { uploadToGoogleDrive, findOrCreateFolder } from './upload-service';
import { updateSheetCell, updateGoogleSheetCell } from './sheet-service';
import { processPDF } from '../../remove-watermark/lib/drive-fix-blockdown';
import { downloadWithCookie } from './cookie-service';

// Qu·∫£n l√Ω h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
let isProcessing = false;
const processingQueue = [];

/**
 * Th√™m file v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
 * @param {Object} params - Th√¥ng s·ªë ƒë·ªÉ x·ª≠ l√Ω file
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export function addToProcessingQueue(params) {
  return new Promise((resolve, reject) => {
    const task = {
      ...params,
      startTime: Date.now(),
      resolve,
      reject
    };
    
    console.log(`\nüìã Th√™m file v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome:`);
    console.log(`üîç File ID: ${params.fileId}`);
    console.log(`üìÑ T√™n file: ${params.fileName || 'Kh√¥ng c√≥ t√™n'}`);
    
    processingQueue.push(task);
    processNextInQueue(); // Th·ª≠ x·ª≠ l√Ω ngay n·∫øu kh√¥ng c√≥ file n√†o ƒëang x·ª≠ l√Ω
  });
}

/**
 * X·ª≠ l√Ω file ti·∫øp theo trong h√†ng ƒë·ª£i
 */
export async function processNextInQueue() {
  if (isProcessing || processingQueue.length === 0) return;
  
  isProcessing = true;
  const task = processingQueue.shift();
  
  try {
    console.log(`\n=== ƒêANG X·ª¨ L√ù FILE TRONG H√ÄNG ƒê·ª¢I ===`);
    console.log(`‚è≥ C√≤n ${processingQueue.length} file ƒëang ch·ªù...`);
    
    // ƒê·∫£m b·∫£o c√≥ fileId
    if (!task.fileId) {
      if (task.driveLink) {
        try {
          task.fileId = extractDriveFileId(task.driveLink);
          if (!task.fileId) throw new Error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t fileId t·ª´ driveLink');
        } catch (error) {
          throw new Error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t fileId t·ª´ driveLink');
        }
      } else {
        throw new Error('Kh√¥ng c√≥ fileId ho·∫∑c driveLink ƒë·ªÉ x·ª≠ l√Ω');
      }
    }
    
    // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a c√≥
    const tempDir = task.tempDir || path.join(os.tmpdir(), uuidv4());
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra
    const outputPath = path.join(tempDir, `T√ÄI LI·ªÜU${task.fileId}_processed.pdf`);
    
    // S·ª≠ d·ª•ng Chrome ƒë·ªÉ x·ª≠ l√Ω file
    const chromeResult = await processPDF(
      null, // inputPath
      outputPath,
      {
        skipWatermarkRemoval: true,
        debugMode: true,
        tempDir: tempDir
      }, 
      true, // isBlocked
      task.fileId
    );

    // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Chrome
    if (chromeResult.success) {
      console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng file b·∫±ng Chrome: ${chromeResult.filePath}`);
      
      const result = await processAndUploadFile({
        filePath: chromeResult.filePath,
        mimeType: 'application/pdf',
        fileId: task.fileId,
        driveLink: task.driveLink,
        targetFolderId: task.targetFolderId,
        folderName: task.targetFolderName || task.courseName || 'Unknown',
        apiKey: task.apiKey,
        updateSheet: task.updateSheet,
        courseId: task.courseId,
        sheetIndex: task.sheetIndex,
        rowIndex: task.rowIndex,
        cellIndex: task.cellIndex,
        sheetId: task.sheetId,
        googleSheetName: task.googleSheetName,
        displayText: task.displayText,
        request: task.request,
        startTime: task.startTime,
        tempDir: tempDir,
        sourceType: task.errorType === "403" ? "403_chrome" : "404_chrome"
      });
      
      task.resolve(result);
    } else {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i file b·∫±ng Chrome: ${chromeResult.error}`);
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file trong h√†ng ƒë·ª£i: ${error.message}`);
    task.reject(error);
  } finally {
    isProcessing = false;
    processNextInQueue();
  }
}

/**
 * X·ª≠ l√Ω v√† t·∫£i l√™n file ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng
 * @param {Object} params - Tham s·ªë cho vi·ªác x·ª≠ l√Ω v√† t·∫£i l√™n
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function processAndUploadFile(params) {
  const {
    filePath,
    mimeType,
    fileId,
    driveLink,
    targetFolderId,
    folderName,
    apiKey,
    updateSheet,
    courseId,
    sheetIndex,
    rowIndex,
    cellIndex,
    sheetId,
    googleSheetName,
    displayText,
    request,
    startTime,
    tempDir,
    sourceType
  } = params;
  
  try {
    console.log(`üîß X·ª≠ l√Ω file...`);
    
    // X·ª≠ l√Ω file ƒë·ªÉ lo·∫°i b·ªè watermark
    const processResult = await processFile(filePath, mimeType || "application/pdf", apiKey, fileId)
      .catch(async (error) => {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file: ${error.message}`);
        
        // Ki·ªÉm tra n·∫øu ƒë√¢y l√† l·ªói t·ª´ API x·ª≠ l√Ω watermark
        if (error.message.includes('L·ªói khi x·ª≠ l√Ω PDF') || 
            error.message.includes('X·ª≠ l√Ω th·∫•t b·∫°i') ||
            error.message.includes('Kh√¥ng th·ªÉ x·ª≠ l√Ω PDF')) {
          
          console.log(`‚ö†Ô∏è G·∫∑p l·ªói t·ª´ API x·ª≠ l√Ω watermark, th·ª≠ x·ª≠ l√Ω thay th·∫ø...`);
          
          // File qu√° l·ªõn ho·∫∑c c√≥ v·∫•n ƒë·ªÅ khi x·ª≠ l√Ω, th·ª≠ s·ª≠ d·ª•ng file g·ªëc
          console.log(`‚ö†Ô∏è S·∫Ω s·ª≠ d·ª•ng file g·ªëc do kh√¥ng th·ªÉ x·ª≠ l√Ω watermark`);
          
          return {
            success: true, // ƒê√°nh d·∫•u th√†nh c√¥ng ƒë·ªÉ ti·∫øp t·ª•c quy tr√¨nh
            processedPath: filePath, // S·ª≠ d·ª•ng file g·ªëc
            skipWatermark: true,
            message: `Kh√¥ng th·ªÉ x·ª≠ l√Ω watermark: ${error.message}`
          };
        }
        
        // C√°c l·ªói kh√°c, n√©m l·∫°i ƒë·ªÉ x·ª≠ l√Ω ·ªü c·∫•p cao h∆°n
        throw error;
      });

    // Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    if (processResult && !processResult.success) {
      // Tr∆∞·ªùng h·ª£p file qu√° l·ªõn
      if (processResult.skipReason === 'FILE_TOO_LARGE') {
        return {
          success: false,
          skipped: true,
          reason: 'FILE_TOO_LARGE',
          message: processResult.message || processResult.error,
          originalFile: {
            id: fileId,
            link: driveLink,
            size: processResult.fileSizeMB
          },
          processingTime: Math.round((Date.now() - startTime) / 1000)
        };
      }
      
      // Tr∆∞·ªùng h·ª£p file l√† video
      if (processResult.isVideo) {
        return {
          success: true,
          isVideo: true,
          originalFile: {
            id: fileId,
            link: driveLink
          },
          message: 'File video kh√¥ng c·∫ßn x·ª≠ l√Ω watermark',
          processingTime: Math.round((Date.now() - startTime) / 1000)
        };
      }
    }
    
    // Th√™m x·ª≠ l√Ω cho file ƒë√£ b·ªè qua vi·ªác x√≥a watermark
    if (processResult && processResult.skipWatermark) {
      console.log(`‚ö†Ô∏è B·ªè qua x·ª≠ l√Ω watermark do g·∫∑p l·ªói: ${processResult.message || 'Kh√¥ng r√µ l√Ω do'}`);
    }
    
    // L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn file ƒë√£ x·ª≠ l√Ω
    let processedFilePath = processResult.processedPath;
    
    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát khi processedPath l√† ƒë·ªëi t∆∞·ª£ng
    if (typeof processedFilePath === 'object' && processedFilePath !== null) {
      if (processedFilePath.path) {
        processedFilePath = processedFilePath.path;
      } else {
        const fileDir = path.dirname(filePath);
        const fileExt = path.extname(filePath);
        const fileName = path.basename(filePath, fileExt);
        processedFilePath = path.join(fileDir, `${fileName}_processed${fileExt}`);
        
        if (!fs.existsSync(processedFilePath)) {
          throw new Error(`File ƒë√£ x·ª≠ l√Ω kh√¥ng t·ªìn t·∫°i t·∫°i ƒë∆∞·ªùng d·∫´n ${processedFilePath}`);
        }
      }
    }
    
    // Upload file ƒë√£ x·ª≠ l√Ω
    const uploadResult = await uploadToGoogleDrive(
      processedFilePath,
      path.basename(processedFilePath),
      mimeType || "application/pdf",
      targetFolderId,
      folderName
    );
    
    // X·ª≠ l√Ω c·∫≠p nh·∫≠t sheet n·∫øu c·∫ßn
    let sheetUpdateResult = null;
    if (updateSheet) {
      if (courseId && sheetIndex !== undefined && rowIndex !== undefined && cellIndex !== undefined) {
        sheetUpdateResult = await updateSheetCell(
          courseId,
          sheetIndex,
          rowIndex,
          cellIndex,
          driveLink,
          uploadResult.webViewLink || processResult.webViewLink,
          displayText,
          request
        );
      } else if (sheetId && googleSheetName && rowIndex !== undefined && cellIndex !== undefined) {
        const cellDisplayText = displayText || 'T√†i li·ªáu ƒë√£ x·ª≠ l√Ω';
        sheetUpdateResult = await updateGoogleSheetCell(
          sheetId,
          googleSheetName,
          rowIndex,
          cellIndex,
          cellDisplayText,
          uploadResult.webViewLink || processResult.webViewLink,
          driveLink,
          request
        );
      }
    }
    
    // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
    if (tempDir) {
      try {
        fs.rmSync(tempDir, { recursive: true, force: true });
      } catch (cleanupError) {
        console.error('L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m:', cleanupError);
      }
    }
    
    // T·∫°o k·∫øt qu·∫£ ph·∫£n h·ªìi
    const result = {
      success: true,
      isFolder: false,
      originalFile: {
        id: fileId,
        link: driveLink
      },
      targetFolder: {
        id: targetFolderId,
        name: folderName
      },
      processedFile: {
        id: uploadResult.fileId,
        name: uploadResult.fileName,
        link: uploadResult.webViewLink || processResult.webViewLink
      },
      processingTime: Math.round((Date.now() - startTime) / 1000),
      sheetUpdate: updateSheet ? {
        success: sheetUpdateResult?.success || false,
        message: sheetUpdateResult?.message || sheetUpdateResult?.error || 'Kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t',
        details: sheetUpdateResult?.updatedCell || null
      } : null
    };
    
    // Th√™m th√¥ng tin v·ªÅ ngu·ªìn x·ª≠ l√Ω
    if (sourceType) {
      if (sourceType === "404_chrome") {
        result.retrievedViaChrome = true;
        result.watermarkProcessed = true;
      } else if (sourceType === "403_chrome") {
        result.blockdownProcessed = true;
        result.watermarkProcessed = true;
      }
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω v√† upload file: ${error.message}`);
    
    // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m n·∫øu c√≥ l·ªói
    if (tempDir) {
      try {
        fs.rmSync(tempDir, { recursive: true, force: true });
      } catch (cleanupError) {
        console.error('L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m:', cleanupError);
      }
    }
    
    throw error;
  }
}

/**
 * Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
 * @param {string} fileName - T√™n file c·∫ßn ki·ªÉm tra
 * @param {string} parentId - ID c·ªßa th∆∞ m·ª•c cha
 * @param {Object} drive - ƒê·ªëi t∆∞·ª£ng Google Drive API
 * @returns {Promise<Object>} - K·∫øt qu·∫£ ki·ªÉm tra
 */
export async function checkFileExistsInTarget(fileName, parentId, drive) {
  try {
    const response = await drive.files.list({
      q: `'${parentId}' in parents and name = '${fileName}' and trashed = false`,
      fields: 'files(id, name, webViewLink, mimeType)',
      supportsAllDrives: true
    });

    if (response.data.files.length > 0) {
      const existingFile = response.data.files[0];
      return {
        exists: true,
        file: existingFile
      };
    }

    return {
      exists: false
    };
  } catch (error) {
    console.error(`‚ùå L·ªói ki·ªÉm tra file:`, error);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω m·ªôt file ƒë∆°n l·∫ª
 * @param {Object} file - Th√¥ng tin file c·∫ßn x·ª≠ l√Ω
 * @param {Object} options - C√°c t√πy ch·ªçn x·ª≠ l√Ω
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function processSingleFile(file, options) {
  const {
    targetFolderId,
    apiKey,
    updateSheet,
    courseId,
    sheetIndex,
    rowIndex,
    cellIndex,
    sheetId,
    googleSheetName,
    request
  } = options;

  try {
    console.log(`\nüîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: ${file.name} (${file.id})`);

    // Import h√†m getTokenByType t·ª´ utils
    const { getTokenByType } = await import('../../remove-watermark/lib/utils.js');
    
    // Kh·ªüi t·∫°o Drive client
    const downloadToken = getTokenByType('download');
    if (!downloadToken) {
      throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive t·∫£i xu·ªëng');
    }
    
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    
    oauth2Client.setCredentials(downloadToken);
    const drive = google.drive({ version: 'v3', auth: oauth2Client });

    // Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
    const existingCheck = await checkFileExistsInTarget(file.name, targetFolderId, drive);
    if (existingCheck.exists) {
      return {
        success: true,
        skipped: true,
        reason: 'File already exists in target folder',
        originalFile: {
          id: file.id,
          link: `https://drive.google.com/file/d/${file.id}/view`
        },
        existingFile: {
          id: existingCheck.file.id,
          name: existingCheck.file.name,
          link: existingCheck.file.webViewLink
        }
      };
    }

    // T·∫°o th∆∞ m·ª•c t·∫°m
    const tempDir = path.join(os.tmpdir(), uuidv4());
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    const tempFilePath = path.join(tempDir, `${uuidv4()}.${file.name.split('.').pop()}`);

    // Th·ª≠ t·∫£i file qua API
    try {
      // T·∫£i file qua API
      const response = await drive.files.get(
        {
          fileId: file.id,
          alt: 'media'
        },
        { responseType: 'stream' }
      );

      const dest = fs.createWriteStream(tempFilePath);
      response.data.pipe(dest);

      await new Promise((resolve, reject) => {
        dest.on('finish', resolve);
        dest.on('error', reject);
      });

      // X·ª≠ l√Ω file ƒë√£ t·∫£i xu·ªëng
      return await processAndUploadFile({
        filePath: tempFilePath,
        mimeType: file.mimeType,
        fileId: file.id,
        driveLink: `https://drive.google.com/file/d/${file.id}/view`,
        targetFolderId,
        folderName: path.basename(file.name, path.extname(file.name)),
        apiKey,
        updateSheet,
        courseId,
        sheetIndex,
        rowIndex,
        cellIndex,
        sheetId,
        googleSheetName,
        displayText: file.name,
        request,
        startTime: Date.now(),
        tempDir,
        sourceType: 'api'
      });

    } catch (apiError) {
      // N·∫øu l·ªói 403 ho·∫∑c 404, th·ª≠ d√πng cookie tr∆∞·ªõc
      if (apiError.message.includes('HTTP 403') || apiError.message.includes('cannotDownloadFile') || 
          apiError.message.includes('HTTP 404')) {
        
        console.log(`‚ö†Ô∏è L·ªói khi t·∫£i qua API: ${apiError.message}`);
        console.log(`üç™ Th·ª≠ t·∫£i file b·∫±ng cookie...`);
        
        try {
          // ƒê·∫£m b·∫£o tempFilePath c√≥ ƒëu√¥i .pdf
          let cookieTempFilePath = tempFilePath;
          if (path.extname(cookieTempFilePath)) {
            // N·∫øu ƒë√£ c√≥ extension, lo·∫°i b·ªè ƒë·ªÉ cho ph√©p cookie-service x√°c ƒë·ªãnh ƒë√∫ng
            cookieTempFilePath = cookieTempFilePath.substring(0, cookieTempFilePath.lastIndexOf('.'));
          }
          
          // Th·ª≠ t·∫£i b·∫±ng cookie
          const cookieDownloadResult = await downloadWithCookie(file.id, cookieTempFilePath);
          
          if (cookieDownloadResult.success) {
            console.log(`‚úÖ T·∫£i file b·∫±ng cookie th√†nh c√¥ng!`);
            
            // X·ª≠ l√Ω file ƒë√£ t·∫£i xu·ªëng b·∫±ng cookie
            return await processAndUploadFile({
              filePath: cookieDownloadResult.filePath, // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t·ª´ k·∫øt qu·∫£ cookie
              mimeType: cookieDownloadResult.mimeType || file.mimeType || 'application/pdf', // S·ª≠ d·ª•ng MIME type t·ª´ k·∫øt qu·∫£ cookie
              fileId: file.id,
              driveLink: `https://drive.google.com/file/d/${file.id}/view`,
              targetFolderId,
              folderName: path.basename(cookieDownloadResult.fileName || file.name, path.extname(cookieDownloadResult.fileName || file.name)),
              apiKey,
              updateSheet,
              courseId,
              sheetIndex,
              rowIndex,
              cellIndex,
              sheetId,
              googleSheetName,
              displayText: cookieDownloadResult.fileName || file.name,
              request,
              startTime: Date.now(),
              tempDir,
              sourceType: 'cookie'
            });
          }
          
          console.log(`‚ö†Ô∏è T·∫£i b·∫±ng cookie th·∫•t b·∫°i: ${cookieDownloadResult.error}`);
          
          // N·∫øu l√† l·ªói 403 v√† c·∫ßn b·ªè qua ph∆∞∆°ng ph√°p cookie
          if (cookieDownloadResult.error === 'HTTP_ERROR_403' || cookieDownloadResult.skipCookieMethod) {
            console.log(`‚ö†Ô∏è Ph√°t hi·ªán l·ªói 403 v·ªõi cookie, chuy·ªÉn th·∫≥ng sang Chrome...`);
            
            // Chuy·ªÉn th·∫≥ng sang Chrome
            const errorType = '403';
            
            // Th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
            return await addToProcessingQueue({
              fileId: file.id,
              fileName: file.name,
              targetFolderId,
              targetFolderName: path.dirname(file.name),
              errorType,
              updateSheet,
              courseId,
              sheetIndex,
              rowIndex,
              cellIndex,
              sheetId,
              googleSheetName,
              displayText: file.name,
              request
            });
          }
        } catch (cookieError) {
          console.error(`‚ùå L·ªói khi t·∫£i b·∫±ng cookie: ${cookieError.message}`);
        }
        
        // N·∫øu cookie th·∫•t b·∫°i, th·ª≠ d√πng Chrome nh∆∞ ph∆∞∆°ng √°n cu·ªëi c√πng
        console.log(`üåê Chuy·ªÉn sang s·ª≠ d·ª•ng Chrome ƒë·ªÉ t·∫£i v√† x·ª≠ l√Ω file...`);
        
        const errorType = apiError.message.includes('HTTP 403') ? '403' : '404';
        
        // Th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
        return await addToProcessingQueue({
          fileId: file.id,
          fileName: file.name,
          targetFolderId,
          targetFolderName: path.dirname(file.name),
          errorType,
          updateSheet,
          courseId,
          sheetIndex,
          rowIndex,
          cellIndex,
          sheetId,
          googleSheetName,
          displayText: file.name,
          request
        });
      }
      
      throw apiError;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω file ${file.name}:`, error);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω ƒë·ªá quy th∆∞ m·ª•c
 * @param {string} folderId - ID c·ªßa th∆∞ m·ª•c c·∫ßn x·ª≠ l√Ω 
 * @param {Object} options - T√πy ch·ªçn x·ª≠ l√Ω
 * @param {Object} parentFolderInfo - Th√¥ng tin th∆∞ m·ª•c cha
 * @param {number} depth - ƒê·ªô s√¢u ƒë·ªá quy
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω th∆∞ m·ª•c
 */
export async function processFolder(folderId, options, parentFolderInfo = null, depth = 0) {
  const indent = '  '.repeat(depth);
  
  try {
    console.log(`\n${indent}üìÇ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω th∆∞ m·ª•c: ${folderId}`);
    
    // Import h√†m getTokenByType t·ª´ utils
    const { getTokenByType } = await import('../../remove-watermark/lib/utils.js');
    
    // Kh·ªüi t·∫°o Drive client cho t·∫£i l√™n v√† t·∫£i xu·ªëng
    const uploadToken = getTokenByType('upload');
    const downloadToken = getTokenByType('download');
    
    if (!uploadToken || !downloadToken) {
      throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive');
    }
    
    const uploadOAuth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    uploadOAuth2Client.setCredentials(uploadToken);
    
    const downloadOAuth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    downloadOAuth2Client.setCredentials(downloadToken);
    
    const uploadDrive = google.drive({ version: 'v3', auth: uploadOAuth2Client });
    const downloadDrive = google.drive({ version: 'v3', auth: downloadOAuth2Client });
    
    // L·∫•y th√¥ng tin v·ªÅ th∆∞ m·ª•c ngu·ªìn
    const folder = await downloadDrive.files.get({
      fileId: folderId,
      fields: 'name,parents,driveId',
      supportsAllDrives: true
    });
    
    // X√°c ƒë·ªãnh th∆∞ m·ª•c cha m·ªõi
    const newParentId = parentFolderInfo ? parentFolderInfo.id : options.targetFolderId;
    
    // T√¨m ho·∫∑c t·∫°o th∆∞ m·ª•c m·ªõi trong th∆∞ m·ª•c ƒë√≠ch
    const existingFolders = await downloadDrive.files.list({
      q: `'${newParentId}' in parents and name = '${folder.data.name}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false`,
      fields: 'files(id, name, webViewLink)',
      supportsAllDrives: true
    });
    
    let newFolder;
    if (existingFolders.data.files.length > 0) {
      newFolder = { data: existingFolders.data.files[0] };
      console.log(`${indent}üìÇ S·ª≠ d·ª•ng th∆∞ m·ª•c t·ªìn t·∫°i: ${newFolder.data.name} (${newFolder.data.id})`);
    } else {
      const folderMetadata = {
        name: folder.data.name,
        mimeType: 'application/vnd.google-apps.folder',
        parents: [newParentId]
      };
      
      newFolder = await uploadDrive.files.create({
        resource: folderMetadata,
        fields: 'id,name,webViewLink',
        supportsAllDrives: true
      });
      
      console.log(`${indent}üìÇ ƒê√£ t·∫°o th∆∞ m·ª•c m·ªõi: ${newFolder.data.name} (${newFolder.data.id})`);
    }
    
    // L·∫•y danh s√°ch file v√† th∆∞ m·ª•c con
    const listResult = await downloadDrive.files.list({
      q: `'${folderId}' in parents and trashed = false`,
      fields: 'files(id, name, mimeType)',
      supportsAllDrives: true
    });
    
    const files = listResult.data.files || [];
    
    // K·∫øt qu·∫£ x·ª≠ l√Ω
    const results = {
      success: true,
      isFolder: true,
      folderId: folderId,
      folderName: folder.data.name,
      originalFolderLink: options.originalFolderLink || `https://drive.google.com/drive/folders/${folderId}`,
      folderLink: newFolder.data.webViewLink,
      processedFiles: [],
      skippedFiles: [],
      errors: [],
      subFolders: []
    };
    
    // X·ª≠ l√Ω c√°c th∆∞ m·ª•c con tr∆∞·ªõc
    const subFolders = files.filter(file => file.mimeType === 'application/vnd.google-apps.folder');
    for (const subFolder of subFolders) {
      try {
        console.log(`${indent}üìÇ X·ª≠ l√Ω th∆∞ m·ª•c con: ${subFolder.name} (${subFolder.id})`);
        const subFolderResult = await processFolder(
          subFolder.id,
          options,
          {
            id: newFolder.data.id,
            name: newFolder.data.name
          },
          depth + 1
        );
        
        results.subFolders.push({
          id: subFolder.id,
          name: subFolder.name,
          processedFiles: subFolderResult.processedFiles.length,
          skippedFiles: subFolderResult.skippedFiles.length,
          errors: subFolderResult.errors.length
        });
        
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ t·ªïng
        results.processedFiles = results.processedFiles.concat(subFolderResult.processedFiles);
        results.skippedFiles = results.skippedFiles.concat(subFolderResult.skippedFiles);
        results.errors = results.errors.concat(subFolderResult.errors);
        
      } catch (folderError) {
        console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω th∆∞ m·ª•c con ${subFolder.name}:`, folderError);
        results.errors.push({
          id: subFolder.id,
          name: subFolder.name,
          error: folderError.message
        });
      }
    }
    
    // X·ª≠ l√Ω c√°c file
    const nonFolders = files.filter(file => file.mimeType !== 'application/vnd.google-apps.folder');
    for (const file of nonFolders) {
      try {
        console.log(`${indent}üìÑ X·ª≠ l√Ω file: ${file.name} (${file.id})`);
        
        // Ki·ªÉm tra MIME type
        const mimeTypeResult = await checkMimeType(file.id);
        
        if (mimeTypeResult.success && (mimeTypeResult.isPdf || file.mimeType.includes('video'))) {
          const fileOptions = {
            ...options,
            targetFolderId: newFolder.data.id
          };
          
          const fileResult = await processSingleFile(file, fileOptions);
          
          if (fileResult.success && !fileResult.skipped) {
            console.log(`${indent}‚úÖ File ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: ${file.name}`);
            results.processedFiles.push({
              id: file.id,
              name: file.name,
              type: mimeTypeResult.isPdf ? 'pdf' : 'video',
              result: fileResult
            });
          } else if (fileResult.skipped) {
            console.log(`${indent}‚ö†Ô∏è File ƒë√£ b·ªã b·ªè qua: ${file.name}`);
            results.skippedFiles.push({
              id: file.id,
              name: file.name,
              reason: fileResult.reason || 'Kh√¥ng r√µ l√Ω do'
            });
          } else {
            console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω: ${file.name}`);
            results.errors.push({
              id: file.id,
              name: file.name,
              error: fileResult.error
            });
          }
        } else {
          console.log(`${indent}‚ö†Ô∏è B·ªè qua file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${file.name}`);
          results.skippedFiles.push({
            id: file.id,
            name: file.name,
            reason: `Kh√¥ng ph·∫£i file PDF ho·∫∑c video (${mimeTypeResult.mimeType})`
          });
        }
      } catch (fileError) {
        console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω file ${file.name}:`, fileError);
        results.errors.push({
          id: file.id,
          name: file.name,
          error: fileError.message
        });
      }
    }
    
    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t sheet n·∫øu ƒë√¢y l√† th∆∞ m·ª•c g·ªëc v√† c·∫ßn c·∫≠p nh·∫≠t
    if (!parentFolderInfo && options.updateSheet) {
      try {
        console.log(`\n${indent}üìù C·∫≠p nh·∫≠t li√™n k·∫øt th∆∞ m·ª•c trong sheet...`);
        
        let sheetUpdateResult;
        if (options.courseId && options.sheetIndex !== undefined && 
            options.rowIndex !== undefined && options.cellIndex !== undefined) {
            
          sheetUpdateResult = await updateSheetCell(
            options.courseId,
            options.sheetIndex,
            options.rowIndex,
            options.cellIndex,
            results.originalFolderLink,
            results.folderLink,
            options.displayText || results.folderName,
            options.request
          );
          
        } else if (options.sheetId && options.googleSheetName && 
                  options.rowIndex !== undefined && options.cellIndex !== undefined) {
                  
          sheetUpdateResult = await updateGoogleSheetCell(
            options.sheetId,
            options.googleSheetName,
            options.rowIndex,
            options.cellIndex,
            options.displayText || results.folderName,
            results.folderLink,
            results.originalFolderLink,
            options.request
          );
        }
        
        if (!sheetUpdateResult || !sheetUpdateResult.success) {
          results.sheetUpdate = {
            success: false,
            message: `L·ªói c·∫≠p nh·∫≠t sheet: ${sheetUpdateResult?.error || 'Kh√¥ng r√µ l·ªói'}`,
            details: sheetUpdateResult
          };
        } else {
          results.sheetUpdate = {
            success: true,
            message: 'Sheet ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
            details: sheetUpdateResult
          };
        }
      } catch (sheetError) {
        results.sheetUpdate = {
          success: false,
          message: `L·ªói c·∫≠p nh·∫≠t sheet: ${sheetError.message}`,
          error: sheetError
        };
      }
    }
    
    return results;
  } catch (error) {
    console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω th∆∞ m·ª•c ${folderId}:`, error);
    throw error;
  }
} 