/**
 * process-manager.js
 * Module qu·∫£n l√Ω c√°c quy tr√¨nh x·ª≠ l√Ω file v√† th∆∞ m·ª•c
 */
import { google } from 'googleapis';
import path from 'path';
import fs from 'fs';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import { extractDriveFileId } from '@/utils/drive-utils';
import { checkMimeType } from './mime-service';
import { downloadFromGoogleDrive, checkFileInfo } from './download-service';
import { processFile } from './file-processor';
import { uploadToGoogleDrive, findOrCreateFolder } from './upload-service';
import { updateSheetCell, updateGoogleSheetCell } from './sheet-service';
import { processPDF } from '../../remove-watermark/lib/drive-fix-blockdown';

// Qu·∫£n l√Ω h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
let isProcessing = false;
const processingQueue = [];

/**
 * Th√™m file v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
 * @param {Object} params - Th√¥ng s·ªë ƒë·ªÉ x·ª≠ l√Ω file
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export function addToProcessingQueue(params) {
  return new Promise((resolve, reject) => {
    const task = {
      ...params,
      startTime: Date.now(),
      resolve,
      reject
    };
    
    console.log(`\nüìã Th√™m file v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome:`);
    console.log(`üîç File ID: ${params.fileId}`);
    console.log(`üìÑ T√™n file: ${params.fileName || 'Kh√¥ng c√≥ t√™n'}`);
    
    processingQueue.push(task);
    processNextInQueue(); // Th·ª≠ x·ª≠ l√Ω ngay n·∫øu kh√¥ng c√≥ file n√†o ƒëang x·ª≠ l√Ω
  });
}

/**
 * X·ª≠ l√Ω file ti·∫øp theo trong h√†ng ƒë·ª£i
 */
export async function processNextInQueue() {
  if (isProcessing || processingQueue.length === 0) return;
  
  isProcessing = true;
  const task = processingQueue.shift();
  
  try {
    console.log(`\n=== ƒêANG X·ª¨ L√ù FILE TRONG H√ÄNG ƒê·ª¢I ===`);
    console.log(`‚è≥ C√≤n ${processingQueue.length} file ƒëang ch·ªù...`);
    
    // ƒê·∫£m b·∫£o c√≥ fileId
    if (!task.fileId) {
      if (task.driveLink) {
        try {
          task.fileId = extractDriveFileId(task.driveLink);
          if (!task.fileId) throw new Error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t fileId t·ª´ driveLink');
        } catch (error) {
          throw new Error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t fileId t·ª´ driveLink');
        }
      } else {
        throw new Error('Kh√¥ng c√≥ fileId ho·∫∑c driveLink ƒë·ªÉ x·ª≠ l√Ω');
      }
    }
    
    // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a c√≥
    const tempDir = task.tempDir || path.join(os.tmpdir(), uuidv4());
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra
    const outputPath = path.join(tempDir, `T√ÄI LI·ªÜU${task.fileId}_processed.pdf`);
    
    // S·ª≠ d·ª•ng Chrome ƒë·ªÉ x·ª≠ l√Ω file
    const chromeResult = await processPDF(
      null, // inputPath
      outputPath,
      {
        skipWatermarkRemoval: true,
        debugMode: true,
        tempDir: tempDir
      }, 
      true, // isBlocked
      task.fileId
    );

    // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Chrome
    if (chromeResult.success) {
      console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng file b·∫±ng Chrome: ${chromeResult.filePath}`);
      
      const result = await processAndUploadFile({
        filePath: chromeResult.filePath,
        mimeType: 'application/pdf',
        fileId: task.fileId,
        driveLink: task.driveLink,
        targetFolderId: task.targetFolderId,
        folderName: task.folderName || task.targetFolderName, // S·ª≠ d·ª•ng folderName ho·∫∑c targetFolderName
        apiKey: task.apiKey,
        updateSheet: task.updateSheet,
        courseId: task.courseId,
        sheetIndex: task.sheetIndex,
        rowIndex: task.rowIndex,
        cellIndex: task.cellIndex,
        sheetId: task.sheetId,
        googleSheetName: task.googleSheetName,
        displayText: task.displayText,
        request: task.request,
        startTime: task.startTime,
        tempDir: tempDir,
        sourceType: task.errorType === "403" ? "403_chrome" : "404_chrome"
      });
      
      task.resolve(result);
    } else {
      console.log(`‚ö†Ô∏è C·∫£nh b√°o: ${chromeResult.error}`);
      // Ti·∫øp t·ª•c x·ª≠ l√Ω m√† kh√¥ng n√©m l·ªói, tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi th√¥ng tin l·ªói
      task.resolve({
        success: true,
        skipWatermark: true,
        message: `C·∫£nh b√°o: ${chromeResult.error}`,
        filePath: chromeResult.filePath || null,
        originalFile: {
          id: task.fileId,
          link: task.driveLink
        }
      });
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file trong h√†ng ƒë·ª£i: ${error.message}`);
    task.reject(error);
  } finally {
    isProcessing = false;
    processNextInQueue();
  }
}

/**
 * X·ª≠ l√Ω v√† t·∫£i l√™n file ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng
 * @param {Object} params - Tham s·ªë cho vi·ªác x·ª≠ l√Ω v√† t·∫£i l√™n
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function processAndUploadFile(params) {
  const {
    filePath,
    mimeType,
    fileId,
    driveLink,
    targetFolderId,
    folderName,
    apiKey,
    updateSheet,
    courseId,
    sheetIndex,
    rowIndex,
    cellIndex,
    sheetId,
    googleSheetName,
    displayText, // displayText l√† t√™n file g·ªëc
    request,
    startTime,
    tempDir,
    sourceType
  } = params;
  
  try {
    console.log(`üîß X·ª≠ l√Ω file...`);
    
    // L∆∞u t√™n file g·ªëc cho vi·ªác s·ª≠ d·ª•ng sau n√†y
    const originalFileName = displayText || `file_${fileId}.pdf`;
    
    // X·ª≠ l√Ω file ƒë·ªÉ lo·∫°i b·ªè watermark
    const processResult = await processFile(filePath, mimeType || "application/pdf", apiKey, fileId)
      .catch(async (error) => {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file: ${error.message}`);
        
        // Ki·ªÉm tra n·∫øu ƒë√¢y l√† l·ªói t·ª´ API x·ª≠ l√Ω watermark
        if (error.message.includes('L·ªói khi x·ª≠ l√Ω PDF') || 
            error.message.includes('X·ª≠ l√Ω th·∫•t b·∫°i') ||
            error.message.includes('Kh√¥ng th·ªÉ x·ª≠ l√Ω PDF')) {
          
          console.log(`‚ö†Ô∏è G·∫∑p l·ªói t·ª´ API x·ª≠ l√Ω watermark, th·ª≠ x·ª≠ l√Ω thay th·∫ø...`);
          
          // File qu√° l·ªõn ho·∫∑c c√≥ v·∫•n ƒë·ªÅ khi x·ª≠ l√Ω, th·ª≠ s·ª≠ d·ª•ng file g·ªëc
          console.log(`‚ö†Ô∏è S·∫Ω s·ª≠ d·ª•ng file g·ªëc do kh√¥ng th·ªÉ x·ª≠ l√Ω watermark`);
          
          return {
            success: true, // ƒê√°nh d·∫•u th√†nh c√¥ng ƒë·ªÉ ti·∫øp t·ª•c quy tr√¨nh
            processedPath: filePath, // S·ª≠ d·ª•ng file g·ªëc
            skipWatermark: true,
            message: `Kh√¥ng th·ªÉ x·ª≠ l√Ω watermark: ${error.message}`,
            originalFileName: originalFileName // Th√™m t√™n file g·ªëc v√†o k·∫øt qu·∫£
          };
        }
        
        // C√°c l·ªói kh√°c, n√©m l·∫°i ƒë·ªÉ x·ª≠ l√Ω ·ªü c·∫•p cao h∆°n
        throw error;
      });

    // Th√™m t√™n file g·ªëc v√†o processResult n·∫øu ch∆∞a c√≥
    if (!processResult.originalFileName) {
      processResult.originalFileName = originalFileName;
    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    if (processResult && !processResult.success) {
      // Tr∆∞·ªùng h·ª£p file qu√° l·ªõn
      if (processResult.skipReason === 'FILE_TOO_LARGE') {
        return {
          success: true, // Thay ƒë·ªïi t·ª´ false sang true ƒë·ªÉ ti·∫øp t·ª•c quy tr√¨nh
          skipped: false, // Thay ƒë·ªïi t·ª´ true sang false ƒë·ªÉ kh√¥ng b·ªè qua x·ª≠ l√Ω
          reason: 'FILE_TOO_LARGE',
          message: processResult.message || processResult.error,
          originalFile: {
            id: fileId,
            link: driveLink,
            size: processResult.fileSizeMB
          },
          processingTime: Math.round((Date.now() - startTime) / 1000),
          originalFileName: originalFileName // Th√™m t√™n file g·ªëc
        };
      }
      
      // Tr∆∞·ªùng h·ª£p file l√† video
      if (processResult.isVideo) {
        return {
          success: true,
          isVideo: true,
          originalFile: {
            id: fileId,
            link: driveLink
          },
          message: 'File video kh√¥ng c·∫ßn x·ª≠ l√Ω watermark',
          processingTime: Math.round((Date.now() - startTime) / 1000)
        };
      }
    }
    
    // Th√™m x·ª≠ l√Ω cho file ƒë√£ b·ªè qua vi·ªác x√≥a watermark
    if (processResult && processResult.skipWatermark) {
      console.log(`‚ö†Ô∏è B·ªè qua x·ª≠ l√Ω watermark do g·∫∑p l·ªói: ${processResult.message || 'Kh√¥ng r√µ l√Ω do'}`);
    }
    
    // L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn file ƒë√£ x·ª≠ l√Ω
    let processedFilePath = processResult.processedPath;
    
    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát khi processedPath l√† ƒë·ªëi t∆∞·ª£ng
    if (typeof processedFilePath === 'object' && processedFilePath !== null) {
      if (processedFilePath.path) {
        processedFilePath = processedFilePath.path;
      } else {
        const fileDir = path.dirname(filePath);
        const fileExt = path.extname(filePath);
        const fileName = path.basename(filePath, fileExt);
        processedFilePath = path.join(fileDir, `${fileName}_processed${fileExt}`);
        
        if (!fs.existsSync(processedFilePath)) {
          throw new Error(`File ƒë√£ x·ª≠ l√Ω kh√¥ng t·ªìn t·∫°i t·∫°i ƒë∆∞·ªùng d·∫´n ${processedFilePath}`);
        }
      }
    }
    
    // Upload file ƒë√£ x·ª≠ l√Ω
    const uploadResult = await uploadToGoogleDrive(
      processedFilePath,
      processResult.originalFileName || path.basename(processedFilePath), // S·ª≠ d·ª•ng t√™n file g·ªëc n·∫øu c√≥
      mimeType || "application/pdf",
      targetFolderId,
      folderName
    );
    
    // X·ª≠ l√Ω c·∫≠p nh·∫≠t sheet n·∫øu c·∫ßn
    let sheetUpdateResult = null;
    if (updateSheet) {
      console.log(`\nüìù ƒêang x·ª≠ l√Ω c·∫≠p nh·∫≠t sheet...`);
      console.log(`- courseId: ${courseId || 'kh√¥ng c√≥'}`);
      console.log(`- sheetIndex: ${sheetIndex !== undefined ? sheetIndex : 'kh√¥ng c√≥'}`);
      console.log(`- sheetId: ${sheetId || 'kh√¥ng c√≥'}`);
      console.log(`- googleSheetName: ${googleSheetName || 'kh√¥ng c√≥'}`);
      console.log(`- rowIndex: ${rowIndex !== undefined ? rowIndex : 'kh√¥ng c√≥'}`);
      console.log(`- cellIndex: ${cellIndex !== undefined ? cellIndex : 'kh√¥ng c√≥'}`);
      
      try {
        if (courseId && sheetIndex !== undefined && rowIndex !== undefined && cellIndex !== undefined) {
          console.log(`üîÑ C·∫≠p nh·∫≠t sheet cho kh√≥a h·ªçc: courseId=${courseId}, sheetIndex=${sheetIndex}, rowIndex=${rowIndex}, cellIndex=${cellIndex}`);
          
          const originalUrl = driveLink || `https://drive.google.com/file/d/${fileId}/view`;
          const newUrl = uploadResult.webViewLink || processResult.webViewLink || `https://drive.google.com/file/d/${uploadResult.fileId}/view?usp=drivesdk`;
          const cellText = displayText || path.basename(processedFilePath);
          
          console.log(`üîó URL g·ªëc: ${originalUrl}`);
          console.log(`üîó URL m·ªõi: ${newUrl}`);
          console.log(`üìÑ Text hi·ªÉn th·ªã: ${cellText}`);
          
          sheetUpdateResult = await updateSheetCell(
            courseId,
            sheetIndex,
            rowIndex,
            cellIndex,
            originalUrl,
            newUrl,
            cellText,
            request,
            {
              skipProcessing: processResult && processResult.skipWatermark,
              originalLink: originalUrl
            }
          );
          
          if (sheetUpdateResult?.success) {
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t sheet th√†nh c√¥ng!`);
          } else {
            console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t sheet: ${sheetUpdateResult?.error || 'Kh√¥ng r√µ l·ªói'}`);
          }
        } else if (sheetId && googleSheetName && rowIndex !== undefined && cellIndex !== undefined) {
          console.log(`üîÑ C·∫≠p nh·∫≠t Google Sheet: sheetId=${sheetId}, sheetName=${googleSheetName}, rowIndex=${rowIndex}, cellIndex=${cellIndex}`);
          
          const cellDisplayText = displayText || 'T√†i li·ªáu ƒë√£ x·ª≠ l√Ω';
          const originalUrl = driveLink || `https://drive.google.com/file/d/${fileId}/view`;
          const newUrl = uploadResult.webViewLink || processResult.webViewLink || `https://drive.google.com/file/d/${uploadResult.fileId}/view?usp=drivesdk`;
          
          console.log(`üîó URL g·ªëc: ${originalUrl}`);
          console.log(`üîó URL m·ªõi: ${newUrl}`);
          console.log(`üìÑ Text hi·ªÉn th·ªã: ${cellDisplayText}`);
          
          sheetUpdateResult = await updateGoogleSheetCell(
            sheetId,
            googleSheetName,
            rowIndex,
            cellIndex,
            cellDisplayText,
            newUrl,
            originalUrl,
            request,
            {
              skipProcessing: processResult && processResult.skipWatermark,
              originalLink: originalUrl
            }
          );
          
          if (sheetUpdateResult?.success) {
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t Google Sheet th√†nh c√¥ng!`);
          } else {
            console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t Google Sheet: ${sheetUpdateResult?.error || 'Kh√¥ng r√µ l·ªói'}`);
          }
        } else {
          console.warn(`‚ö†Ô∏è Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t sheet`);
          sheetUpdateResult = {
            success: false,
            error: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t sheet'
          };
        }
      } catch (updateError) {
        console.error(`‚ùå L·ªói ngo·∫°i l·ªá khi c·∫≠p nh·∫≠t sheet: ${updateError.message}`);
        sheetUpdateResult = {
          success: false,
          error: `L·ªói khi c·∫≠p nh·∫≠t sheet: ${updateError.message}`
        };
      }
    }
    
    // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
    if (tempDir) {
      try {
        fs.rmSync(tempDir, { recursive: true, force: true });
      } catch (cleanupError) {
        console.error('L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m:', cleanupError);
      }
    }
    
    // T·∫°o k·∫øt qu·∫£ ph·∫£n h·ªìi
    const result = {
      success: true,
      isFolder: false,
      originalFile: {
        id: fileId,
        link: driveLink
      },
      targetFolder: {
        id: targetFolderId,
        name: folderName
      },
      processedFile: {
        id: uploadResult.fileId,
        name: uploadResult.fileName,
        link: uploadResult.webViewLink || processResult.webViewLink
      },
      processingTime: Math.round((Date.now() - startTime) / 1000),
      sheetUpdate: updateSheet ? {
        success: sheetUpdateResult?.success || false,
        message: sheetUpdateResult?.message || sheetUpdateResult?.error || 'Kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t',
        details: sheetUpdateResult?.updatedCell || null
      } : null
    };
    
    // Th√™m th√¥ng tin v·ªÅ ngu·ªìn x·ª≠ l√Ω
    if (sourceType) {
      if (sourceType === "404_chrome") {
        result.retrievedViaChrome = true;
        result.watermarkProcessed = true;
      } else if (sourceType === "403_chrome") {
        result.blockdownProcessed = true;
        result.watermarkProcessed = true;
      }
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω v√† upload file: ${error.message}`);
    
    // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m n·∫øu c√≥ l·ªói
    if (tempDir) {
      try {
        fs.rmSync(tempDir, { recursive: true, force: true });
      } catch (cleanupError) {
        console.error('L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m:', cleanupError);
      }
    }
    
    throw error;
  }
}

/**
 * Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
 * @param {string} fileName - T√™n file c·∫ßn ki·ªÉm tra
 * @param {string} parentId - ID c·ªßa th∆∞ m·ª•c cha
 * @param {Object} drive - ƒê·ªëi t∆∞·ª£ng Google Drive API
 * @returns {Promise<Object>} - K·∫øt qu·∫£ ki·ªÉm tra
 */
export async function checkFileExistsInTarget(fileName, parentId, drive) {
  try {
    const response = await drive.files.list({
      q: `'${parentId}' in parents and name = '${fileName}' and trashed = false`,
      fields: 'files(id, name, webViewLink, mimeType)',
      supportsAllDrives: true
    });

    if (response.data.files.length > 0) {
      const existingFile = response.data.files[0];
      return {
        exists: true,
        file: existingFile
      };
    }

    return {
      exists: false
    };
  } catch (error) {
    console.error(`‚ùå L·ªói ki·ªÉm tra file:`, error);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω m·ªôt file ƒë∆°n l·∫ª
 * @param {Object} file - Th√¥ng tin file c·∫ßn x·ª≠ l√Ω
 * @param {Object} options - C√°c t√πy ch·ªçn x·ª≠ l√Ω
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function processSingleFile(file, options) {
  const {
    targetFolderId,
    apiKey,
    updateSheet,
    courseId,
    sheetIndex,
    rowIndex,
    cellIndex,
    sheetId,
    googleSheetName,
    displayText,
    request
  } = options;
  
  try {
    console.log(`\nüîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: ${displayText || file.name} (${file.id})`);
    
    // T·∫°o th∆∞ m·ª•c t·∫°m
    const tempDir = path.join(os.tmpdir(), uuidv4());
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // X√°c ƒë·ªãnh lo·∫°i file t·ª´ mimeType v√† t√™n file
    let fileExtension = '.pdf'; // M·∫∑c ƒë·ªãnh l√† .pdf
    
    if (file.mimeType) {
      if (file.mimeType.includes('pdf')) {
        fileExtension = '.pdf';
      } else if (file.mimeType.includes('image/jpeg') || file.mimeType.includes('image/jpg')) {
        fileExtension = '.jpg';
      } else if (file.mimeType.includes('image/png')) {
        fileExtension = '.png';
      } else if (file.mimeType.includes('video/mp4')) {
        fileExtension = '.mp4';
      } else if (file.mimeType.includes('audio/mpeg')) {
        fileExtension = '.mp3';
      }
    }
    
    // N·∫øu c√≥ t√™n file, s·ª≠ d·ª•ng extension t·ª´ t√™n file
    if (file.name) {
      const nameExt = path.extname(file.name).toLowerCase();
      if (nameExt) {
        fileExtension = nameExt;
      }
    }
    
    // ƒê·∫∑t t√™n file t·∫°m th·ªùi
    const safeFileId = file.id.replace(/[^a-zA-Z0-9]/g, '_');
    const tempFileName = `${safeFileId}_temp${fileExtension}`;
    const tempFilePath = path.join(tempDir, tempFileName);
    
    // Tr∆∞·ªõc ti√™n th·ª≠ t·∫£i file t·ª´ Drive API
    try {
      console.log(`üì• T·∫£i file t·ª´ Drive API...`);
      console.log(`üìÅ ƒê∆∞·ªùng d·∫´n file t·∫°m: ${tempFilePath}`);
      
      // T·∫£i file t·ª´ Google Drive
      const downloadResult = await downloadFromGoogleDrive(file.id, tempFilePath);
      console.log(`‚úÖ T·∫£i file th√†nh c√¥ng qua API`);
      
      // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
      if (!fs.existsSync(tempFilePath)) {
        console.error(`‚ùå File kh√¥ng t√¨m th·∫•y sau khi t·∫£i xu·ªëng: ${tempFilePath}`);
        throw new Error(`File kh√¥ng t√¨m th·∫•y sau khi t·∫£i xu·ªëng: ${tempFilePath}`);
      }
      
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
      try {
        const fileStats = fs.statSync(tempFilePath);
        const fileSizeMB = fileStats.size / (1024 * 1024);
        console.log(`File t·∫£i xu·ªëng c√≥ k√≠ch th∆∞·ªõc: ${fileSizeMB.toFixed(2)} MB`);
        
        // N·∫øu file r·ªóng ho·∫∑c qu√° nh·ªè, b√°o l·ªói
        if (fileStats.size === 0) {
          console.error(`‚ùå File t·∫£i xu·ªëng c√≥ k√≠ch th∆∞·ªõc 0 byte`);
          throw new Error(`File t·∫£i xu·ªëng c√≥ k√≠ch th∆∞·ªõc 0 byte: ${tempFilePath}`);
        }
      } catch (statsError) {
        console.error(`‚ùå Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin file: ${statsError.message}`);
        throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin file sau khi t·∫£i xu·ªëng: ${statsError.message}`);
      }
      
      // X·ª≠ l√Ω file ƒë√£ t·∫£i xu·ªëng
      // Kh√¥ng s·ª≠ d·ª•ng path.basename t·ª´ t√™n file ƒë·ªÉ ƒë·∫∑t l√†m folderName
      // v√¨ ƒëi·ªÅu n√†y t·∫°o ra th∆∞ m·ª•c m·ªõi thay v√¨ s·ª≠ d·ª•ng th∆∞ m·ª•c ƒë√≠ch
      return await processAndUploadFile({
        filePath: tempFilePath,
        mimeType: file.mimeType || downloadResult.mimeType || 'application/pdf',
        fileId: file.id,
        driveLink: `https://drive.google.com/file/d/${file.id}/view`,
        targetFolderId, // ƒê√¢y l√† ID th∆∞ m·ª•c ƒë√≠ch
        folderName: options.folderName || options.sheetFolderName || displayText, // S·ª≠ d·ª•ng t√™n sheet l√†m folder cha
        apiKey,
        updateSheet,
        courseId,
        sheetIndex,
        rowIndex,
        cellIndex,
        sheetId,
        googleSheetName,
        displayText: file.name,
        request,
        startTime: Date.now(),
        tempDir,
        sourceType: 'api'
      });

    } catch (apiError) {
      // N·∫øu c√≥ l·ªói 403/404 ho·∫∑c kh√¥ng th·ªÉ t·∫£i, chuy·ªÉn sang Chrome
      if (apiError.message.includes('HTTP 403') || apiError.message.includes('cannotDownloadFile') || 
          apiError.message.includes('HTTP 404')) {
        
        console.log(`‚ö†Ô∏è L·ªói khi t·∫£i qua API: ${apiError.message}`);
        console.log(`üåê Chuy·ªÉn sang s·ª≠ d·ª•ng Chrome ƒë·ªÉ t·∫£i v√† x·ª≠ l√Ω file...`);
        
        const errorType = apiError.message.includes('HTTP 403') ? '403' : '404';
        
        // Th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
        return await addToProcessingQueue({
          fileId: file.id,
          fileName: file.name,
          targetFolderId,
          targetFolderName: null, // Kh√¥ng s·ª≠ d·ª•ng dirname t·ª´ t√™n file v√¨ s·∫Ω t·∫°o th∆∞ m·ª•c m·ªõi
          errorType,
          updateSheet,
          courseId,
          sheetIndex,
          rowIndex,
          cellIndex,
          sheetId,
          googleSheetName,
          displayText: file.name,
          request
        });
      }
      
      throw apiError;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω file ${file.name}:`, error);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω folder theo ki·ªÉu ƒë·ªá quy
 * @param {string} folderId - ID c·ªßa folder
 * @param {Object} options - C√°c t√πy ch·ªçn cho vi·ªác x·ª≠ l√Ω
 * @param {Object} parentFolderInfo - Th√¥ng tin v·ªÅ folder cha (cho ƒë·ªá quy)
 * @param {number} depth - ƒê·ªô s√¢u hi·ªán t·∫°i (cho ƒë·ªá quy)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function processFolder(folderId, options, parentFolderInfo = null, depth = 0) {
  const indent = '  '.repeat(depth);
  
  try {
    console.log(`\n${indent}üìÇ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω th∆∞ m·ª•c: ${folderId}`);
    console.log(`${indent}üìÇ DEBUG: Options = ${JSON.stringify({
      ...options,
      request: '[REQUEST OBJECT]' // Kh√¥ng in request object
    }, null, 2)}`);
    
    // Ki·ªÉm tra input
    if (!folderId) {
      throw new Error('Thi·∫øu folderId ƒë·ªÉ x·ª≠ l√Ω');
    }
    
    if (!options.targetFolderId) {
      throw new Error('Thi·∫øu targetFolderId ƒë·ªÉ l∆∞u k·∫øt qu·∫£');
    }
    
    // Import h√†m getTokenByType t·ª´ utils
    const { getTokenByType } = await import('./utils.js');
    
    // L·∫•y token upload v√† download
    const uploadToken = await getTokenByType('upload');
    const downloadToken = await getTokenByType('download');
    
    // Ki·ªÉm tra token
    if (!uploadToken || !downloadToken) {
      throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive h·ª£p l·ªá');
    }

    const uploadOAuth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    uploadOAuth2Client.setCredentials(uploadToken);
    
    const downloadOAuth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    downloadOAuth2Client.setCredentials(downloadToken);
    
    const uploadDrive = google.drive({ version: 'v3', auth: uploadOAuth2Client });
    const downloadDrive = google.drive({ version: 'v3', auth: downloadOAuth2Client });
    
    // L·∫•y th√¥ng tin v·ªÅ th∆∞ m·ª•c ngu·ªìn
    console.log(`${indent}üìÇ DEBUG: ƒêang l·∫•y th√¥ng tin th∆∞ m·ª•c ngu·ªìn: ${folderId}`);
    const folder = await downloadDrive.files.get({
      fileId: folderId,
      fields: 'name,parents,driveId',
      supportsAllDrives: true
    }).catch(error => {
      console.error(`${indent}‚ùå L·ªói l·∫•y th√¥ng tin th∆∞ m·ª•c: ${error.message}`);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th∆∞ m·ª•c: ${error.message}`);
    });
    
    console.log(`${indent}üìÇ DEBUG: Th√¥ng tin th∆∞ m·ª•c ngu·ªìn: Name=${folder.data.name}, Parents=${folder.data.parents}`);
    
    // X√°c ƒë·ªãnh th∆∞ m·ª•c cha m·ªõi
    const newParentId = parentFolderInfo ? parentFolderInfo.id : options.targetFolderId;
    console.log(`${indent}üìÇ DEBUG: Th∆∞ m·ª•c cha m·ªõi: ${newParentId}`);
    
    // T√¨m ho·∫∑c t·∫°o th∆∞ m·ª•c m·ªõi trong th∆∞ m·ª•c ƒë√≠ch
    const escapedFolderName = folder.data.name.replace(/'/g, "\\'");
    const searchQuery = `'${newParentId}' in parents and name = '${escapedFolderName}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false`;
    
    console.log(`${indent}üìÇ DEBUG: T√¨m th∆∞ m·ª•c trong ƒë√≠ch v·ªõi query: ${searchQuery}`);
    const existingFolders = await uploadDrive.files.list({
      q: searchQuery,
      fields: 'files(id, name, webViewLink)',
      supportsAllDrives: true
    }).catch(error => {
      console.error(`${indent}‚ùå L·ªói t√¨m th∆∞ m·ª•c trong ƒë√≠ch: ${error.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t√¨m ki·∫øm th∆∞ m·ª•c trong ƒë√≠ch: ${error.message}`);
    });
    
    let newFolder;
    if (existingFolders.data.files && existingFolders.data.files.length > 0) {
      newFolder = { data: existingFolders.data.files[0] };
      console.log(`${indent}üìÇ S·ª≠ d·ª•ng th∆∞ m·ª•c t·ªìn t·∫°i: ${newFolder.data.name} (${newFolder.data.id})`);
      console.log(`${indent}üìÇ DEBUG: Link th∆∞ m·ª•c t·ªìn t·∫°i: ${newFolder.data.webViewLink}`);
    } else {
      console.log(`${indent}üìÇ C·∫ßn t·∫°o th∆∞ m·ª•c m·ªõi v·ªõi t√™n: ${folder.data.name}`);
      
      const folderMetadata = {
        name: folder.data.name,
        mimeType: 'application/vnd.google-apps.folder',
        parents: [newParentId]
      };
      
      try {
        newFolder = await uploadDrive.files.create({
          resource: folderMetadata,
          fields: 'id,name,webViewLink',
          supportsAllDrives: true
        });
        
        console.log(`${indent}üìÇ ƒê√£ t·∫°o th∆∞ m·ª•c m·ªõi: ${newFolder.data.name} (${newFolder.data.id})`);
        console.log(`${indent}üìÇ DEBUG: Link th∆∞ m·ª•c m·ªõi: ${newFolder.data.webViewLink}`);
      } catch (createError) {
        console.error(`${indent}‚ùå L·ªói t·∫°o th∆∞ m·ª•c: ${createError.message}`);
        throw new Error(`Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c m·ªõi: ${createError.message}`);
      }
    }
    
    // L·∫•y danh s√°ch file v√† th∆∞ m·ª•c con
    console.log(`${indent}üìÇ DEBUG: L·∫•y danh s√°ch file v√† th∆∞ m·ª•c con trong: ${folderId}`);
    
    // Chu·∫©n b·ªã tham s·ªë cho vi·ªác li·ªát k√™ file
    const listParams = {
      q: `'${folderId}' in parents and trashed = false`,
      fields: 'files(id, name, mimeType), nextPageToken',
      pageSize: 100,
      supportsAllDrives: true,
      includeItemsFromAllDrives: true
    };
    
    // Th√™m driveId n·∫øu c√≥
    if (folder.data.driveId) {
      console.log(`${indent}üìÇ DEBUG: S·ª≠ d·ª•ng driveId: ${folder.data.driveId}`);
      listParams.driveId = folder.data.driveId;
      listParams.corpora = 'drive';
    }
    
    // Th·ª±c hi·ªán API call
    console.log(`${indent}üìÇ DEBUG: G·ªçi API v·ªõi tham s·ªë: ${JSON.stringify(listParams)}`);
    const listResult = await downloadDrive.files.list(listParams).catch(error => {
      console.error(`${indent}‚ùå L·ªói l·∫•y danh s√°ch file: ${error.message}`);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch file trong th∆∞ m·ª•c: ${error.message}`);
    });
    
    let files = listResult.data.files || [];
    console.log(`${indent}üìÇ T√¨m th·∫•y ${files.length} file/folder trong th∆∞ m·ª•c ngu·ªìn`);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y file n√†o, th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø
    if (files.length === 0) {
      console.log(`${indent}‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file, th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø...`);
      
      try {
        // Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng corpora='allDrives'
        console.log(`${indent}üìÇ Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng corpora='allDrives'...`);
        const altParams = {
          q: `'${folderId}' in parents and trashed = false`,
          fields: 'files(id, name, mimeType)',
          pageSize: 100,
          supportsAllDrives: true,
          includeItemsFromAllDrives: true,
          corpora: 'allDrives'
        };
        
        console.log(`${indent}üìÇ DEBUG: G·ªçi API thay th·∫ø v·ªõi tham s·ªë: ${JSON.stringify(altParams)}`);
        const alternativeListResult = await downloadDrive.files.list(altParams);
        const alternativeFiles = alternativeListResult.data.files || [];
        
        if (alternativeFiles.length > 0) {
          console.log(`${indent}‚úÖ Ph∆∞∆°ng ph√°p thay th·∫ø th√†nh c√¥ng: T√¨m th·∫•y ${alternativeFiles.length} file/folder`);
          files = alternativeFiles;
        } else {
          // Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng corpora='user'
          console.log(`${indent}üìÇ Ph∆∞∆°ng ph√°p 2: Th·ª≠ v·ªõi corpora='user'...`);
          const altParams2 = {
            q: `'${folderId}' in parents and trashed = false`,
            fields: 'files(id, name, mimeType)',
            pageSize: 100,
            corpora: 'user'
          };
          
          const alternativeListResult2 = await downloadDrive.files.list(altParams2);
          const alternativeFiles2 = alternativeListResult2.data.files || [];
          
          if (alternativeFiles2.length > 0) {
            console.log(`${indent}‚úÖ Ph∆∞∆°ng ph√°p 2 th√†nh c√¥ng: T√¨m th·∫•y ${alternativeFiles2.length} file/folder`);
            files = alternativeFiles2;
          } else {
            // Ph∆∞∆°ng ph√°p 3: Ki·ªÉm tra chi ti·∫øt v·ªÅ th∆∞ m·ª•c ƒë∆∞·ª£c chia s·∫ª v√† th·ª≠ truy c·∫≠p v·ªõi token kh√°c
            console.log(`${indent}üìÇ Ph∆∞∆°ng ph√°p 3: Ki·ªÉm tra chi ti·∫øt th∆∞ m·ª•c ƒë∆∞·ª£c chia s·∫ª...`);
            
            try {
              // Import h√†m checkSharedFolderDetails t·ª´ utils
              const { checkSharedFolderDetails } = await import('./utils.js');
              const sharedDetails = await checkSharedFolderDetails(folderId);
              
              if (sharedDetails.success && sharedDetails.fileCount > 0) {
                console.log(`${indent}üìÇ Ph√°t hi·ªán ${sharedDetails.fileCount} file trong ki·ªÉm tra chi ti·∫øt`);
                
                if (sharedDetails.driveId) {
                  console.log(`${indent}üìÇ Th·ª≠ li·ªát k√™ v·ªõi driveId: ${sharedDetails.driveId}`);
                  
                  const tokenType = sharedDetails.tokenType || 'download';
                  const token = await getTokenByType(tokenType);
                  
                  if (token) {
                    const oauth2Client = new google.auth.OAuth2(
                      process.env.GOOGLE_CLIENT_ID,
                      process.env.GOOGLE_CLIENT_SECRET,
                      process.env.GOOGLE_REDIRECT_URI
                    );
                    oauth2Client.setCredentials(token);
                    const detailDrive = google.drive({ version: 'v3', auth: oauth2Client });
                    
                    const detailListResult = await detailDrive.files.list({
                      q: `'${folderId}' in parents and trashed = false`,
                      fields: 'files(id, name, mimeType)',
                      pageSize: 100,
                      supportsAllDrives: true,
                      includeItemsFromAllDrives: true,
                      driveId: sharedDetails.driveId,
                      corpora: 'drive'
                    });
                    
                    const detailFiles = detailListResult.data.files || [];
                    console.log(`${indent}üìÇ Li·ªát k√™ v·ªõi ph∆∞∆°ng ph√°p 3: T√¨m th·∫•y ${detailFiles.length} file/folder`);
                    
                    if (detailFiles.length > 0) {
                      files = detailFiles;
                    }
                  }
                }
              }
            } catch (error) {
              console.error(`${indent}‚ùå L·ªói v·ªõi ph∆∞∆°ng ph√°p 3: ${error.message}`);
            }
          }
        }
      } catch (altError) {
        console.error(`${indent}‚ùå L·ªói khi th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø: ${altError.message}`);
        // Kh√¥ng throw error, ti·∫øp t·ª•c v·ªõi files r·ªóng
      }
      
      console.log(`${indent}üìÇ Sau khi th·ª≠ c√°c ph∆∞∆°ng ph√°p: T√¨m th·∫•y ${files.length} file/folder`);
    }
    
    // K·∫øt qu·∫£ x·ª≠ l√Ω
    const results = {
      success: true,
      isFolder: true,
      folderId: folderId,
      folderName: folder.data.name,
      originalFolderLink: options.originalFolderLink || `https://drive.google.com/drive/folders/${folderId}`,
      folderLink: newFolder.data.webViewLink,
      processedFolderLink: newFolder.data.webViewLink,
      processedFiles: [],
      skippedFiles: [],
      errors: [],
      subFolders: []
    };
    
    // X·ª≠ l√Ω c√°c th∆∞ m·ª•c con tr∆∞·ªõc
    const subFolders = files.filter(file => file.mimeType === 'application/vnd.google-apps.folder');
    for (const subFolder of subFolders) {
      try {
        console.log(`${indent}üìÇ X·ª≠ l√Ω th∆∞ m·ª•c con: ${subFolder.name} (${subFolder.id})`);
        const subFolderResult = await processFolder(
          subFolder.id,
          options,
          {
            id: newFolder.data.id,
            name: newFolder.data.name
          },
          depth + 1
        );
        
        results.subFolders.push({
          id: subFolder.id,
          name: subFolder.name,
          processedFiles: subFolderResult.processedFiles ? subFolderResult.processedFiles.length : 0,
          skippedFiles: subFolderResult.skippedFiles ? subFolderResult.skippedFiles.length : 0,
          errors: subFolderResult.errors ? subFolderResult.errors.length : 0
        });
        
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ t·ªïng
        if (subFolderResult.processedFiles) {
          results.processedFiles = results.processedFiles.concat(subFolderResult.processedFiles);
        }
        if (subFolderResult.skippedFiles) {
          results.skippedFiles = results.skippedFiles.concat(subFolderResult.skippedFiles);
        }
        if (subFolderResult.errors) {
          results.errors = results.errors.concat(subFolderResult.errors);
        }
      } catch (folderError) {
        console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω th∆∞ m·ª•c con ${subFolder.name}:`, folderError);
        results.errors.push({
          id: subFolder.id,
          name: subFolder.name,
          error: folderError.message
        });
      }
    }
    
    // X·ª≠ l√Ω c√°c file
    const nonFolders = files.filter(file => file.mimeType !== 'application/vnd.google-apps.folder');
    for (const file of nonFolders) {
      try {
        console.log(`${indent}üìÑ X·ª≠ l√Ω file: ${file.name} (${file.id})`);
        
        // Ki·ªÉm tra MIME type
        const mimeTypeResult = await checkMimeType(file.id);
        
        if (mimeTypeResult.success && (mimeTypeResult.isPdf || file.mimeType.includes('video'))) {
          const fileOptions = {
            ...options,
            targetFolderId: newFolder.data.id
          };
          
          const fileResult = await processSingleFile(file, fileOptions);
          
          if (fileResult.success && !fileResult.skipped) {
            console.log(`${indent}‚úÖ File ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: ${file.name}`);
            results.processedFiles.push({
              id: file.id,
              name: file.name,
              type: mimeTypeResult.isPdf ? 'pdf' : 'video',
              result: fileResult
            });
          } else if (fileResult.skipped) {
            console.log(`${indent}‚ö†Ô∏è File ƒë√£ b·ªã b·ªè qua: ${file.name}`);
            results.skippedFiles.push({
              id: file.id,
              name: file.name,
              reason: fileResult.reason || 'Kh√¥ng r√µ l√Ω do'
            });
          } else {
            console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω: ${file.name}`);
            results.errors.push({
              id: file.id,
              name: file.name,
              error: fileResult.error
            });
          }
        } else {
          console.log(`${indent}‚ö†Ô∏è B·ªè qua file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${file.name}`);
          results.skippedFiles.push({
            id: file.id,
            name: file.name,
            reason: `Kh√¥ng ph·∫£i file PDF ho·∫∑c video (${mimeTypeResult.mimeType})`
          });
        }
      } catch (fileError) {
        console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω file ${file.name}:`, fileError);
        results.errors.push({
          id: file.id,
          name: file.name,
          error: fileError.message
        });
      }
    }
    
    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t sheet n·∫øu ƒë√¢y l√† th∆∞ m·ª•c g·ªëc v√† c·∫ßn c·∫≠p nh·∫≠t
    if (!parentFolderInfo && options.updateSheet) {
      try {
        console.log(`\n${indent}üìù C·∫≠p nh·∫≠t li√™n k·∫øt th∆∞ m·ª•c trong sheet...`);
        
        // ƒê·∫£m b·∫£o c√≥ folderLink ƒë·ªÉ c·∫≠p nh·∫≠t
        const linkToUpdate = results.folderLink || results.originalFolderLink;
        if (!linkToUpdate) {
          console.warn(`${indent}‚ö†Ô∏è Kh√¥ng c√≥ li√™n k·∫øt th∆∞ m·ª•c ƒë·ªÉ c·∫≠p nh·∫≠t trong sheet`);
          results.sheetUpdate = {
            success: false,
            message: 'Kh√¥ng c√≥ li√™n k·∫øt th∆∞ m·ª•c ƒë·ªÉ c·∫≠p nh·∫≠t'
          };
        } else {
          let sheetUpdateResult;
          if (options.courseId && options.sheetIndex !== undefined && 
              options.rowIndex !== undefined && options.cellIndex !== undefined) {
              
            sheetUpdateResult = await updateSheetCell(
              options.courseId,
              options.sheetIndex,
              options.rowIndex,
              options.cellIndex,
              results.originalFolderLink,
              linkToUpdate,
              options.displayText || results.folderName,
              options.request
            );
            
          } else if (options.sheetId && options.googleSheetName && 
                    options.rowIndex !== undefined && options.cellIndex !== undefined) {
                    
            sheetUpdateResult = await updateGoogleSheetCell(
              options.sheetId,
              options.googleSheetName,
              options.rowIndex,
              options.cellIndex,
              options.displayText || results.folderName,
              linkToUpdate,
              results.originalFolderLink,
              options.request
            );
          }
          
          if (!sheetUpdateResult || !sheetUpdateResult.success) {
            results.sheetUpdate = {
              success: false,
              message: `L·ªói c·∫≠p nh·∫≠t sheet: ${sheetUpdateResult?.error || 'Kh√¥ng r√µ l·ªói'}`,
              details: sheetUpdateResult
            };
          } else {
            results.sheetUpdate = {
              success: true,
              message: 'Sheet ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
              details: sheetUpdateResult
            };
          }
        }
      } catch (sheetError) {
        results.sheetUpdate = {
          success: false,
          message: `L·ªói c·∫≠p nh·∫≠t sheet: ${sheetError.message}`,
          error: sheetError
        };
      }
    }
    
    return results;
  } catch (error) {
    console.error(`${indent}‚ùå L·ªói x·ª≠ l√Ω th∆∞ m·ª•c ${folderId}:`, error);
    
    // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£ v·ªõi th√¥ng tin l·ªói
    let folderName = 'Unknown Folder';
    let originalFolderLink = `https://drive.google.com/drive/folders/${folderId}`;
    
    // ƒê·∫£m b·∫£o bi·∫øn folder t·ªìn t·∫°i tr∆∞·ªõc khi s·ª≠ d·ª•ng
    if (options && options.originalFolderLink) {
      originalFolderLink = options.originalFolderLink;
    }
    
    // N·∫øu folder ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a, s·ª≠ d·ª•ng t√™n c·ªßa n√≥
    try {
      if (typeof folder !== 'undefined' && folder && folder.data && folder.data.name) {
        folderName = folder.data.name;
      }
    } catch (nameError) {
      console.error(`${indent}‚ùå Kh√¥ng th·ªÉ l·∫•y t√™n th∆∞ m·ª•c:`, nameError);
    }
    
    return {
      success: false,
      isFolder: true,
      folderId: folderId,
      folderName: folderName,
      originalFolderLink: originalFolderLink,
      folderLink: null, // Kh√¥ng c√≥ link ƒë√£ x·ª≠ l√Ω v√¨ x·ª≠ l√Ω th·∫•t b·∫°i
      processedFolderLink: null, // Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ tr√°nh l·ªói undefined
      error: error.message,
      processedFiles: [],
      skippedFiles: [],
      errors: [{ message: error.message }],
      subFolders: []
    };
  }
} 
