import fs from 'fs';
import path from 'path';
import { google } from 'googleapis';

/**
 * L·∫•y token theo lo·∫°i
 * @param {string} type - 'download' ho·∫∑c 'upload'
 * @returns {Promise<object|null>} - Token ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
export async function getTokenByType(type = 'download') {
  try {
    // ƒê∆∞·ªùng d·∫´n t·ªõi c√°c file token
    const tokenFiles = {
      'download': path.join(process.cwd(), 'drive_token_download.json'),
      'upload': path.join(process.cwd(), 'drive_token_upload.json')
    };
    
    const tokenFile = tokenFiles[type];
    
    if (!tokenFile) {
      console.error(`‚ùå Lo·∫°i token kh√¥ng h·ª£p l·ªá: ${type}`);
      return null;
    }
    
    if (!fs.existsSync(tokenFile)) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file token ${type} t·∫°i: ${tokenFile}`);
      return null;
    }
    
    console.log(`üîë DEBUG: ƒêang ƒë·ªçc file token ${type} t·ª´ ${tokenFile}`);
    
    // ƒê·ªçc token t·ª´ file
    const tokenContent = fs.readFileSync(tokenFile, 'utf8');
    
    // Parse token
    const token = JSON.parse(tokenContent);
    
    // Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
    if (!token || !token.access_token) {
      console.error(`‚ùå Token ${type} kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu access_token`);
      return null;
    }
    
    // Ki·ªÉm tra th·ªùi h·∫°n
    const expiryDate = token.expiry_date;
    if (expiryDate) {
      const now = Date.now();
      if (expiryDate < now) {
        console.log(`üîÑ Token ${type} ƒë√£ h·∫øt h·∫°n t·ª´ ${new Date(expiryDate).toLocaleString()}, ƒëang l√†m m·ªõi...`);
        // Th·ª≠ l√†m m·ªõi token
        const refreshedToken = await refreshToken(token, type, tokenFile);
        if (refreshedToken) {
          console.log(`‚úÖ ƒê√£ l√†m m·ªõi th√†nh c√¥ng token ${type}`);
          return refreshedToken;
        } else {
          console.error(`‚ùå Kh√¥ng th·ªÉ l√†m m·ªõi token ${type}`);
          return null;
        }
      }
      
      // Hi·ªÉn th·ªã th·ªùi h·∫°n c√≤n l·∫°i
      const remainingTime = (expiryDate - now) / (1000 * 60);
      console.log(`üîë DEBUG: Token ${type} c√≤n h·∫°n ${remainingTime.toFixed(2)} ph√∫t`);
    }
    
    return token;
  } catch (error) {
    console.error(`‚ùå L·ªói khi ƒë·ªçc token ${type}: ${error.message}`);
    return null;
  }
}

/**
 * L√†m m·ªõi token s·ª≠ d·ª•ng refresh_token
 * @param {object} token - Token c≈© ƒë√£ h·∫øt h·∫°n
 * @param {string} type - Lo·∫°i token ('download' ho·∫∑c 'upload')
 * @param {string} tokenFile - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file token
 * @returns {Promise<object|null>} - Token m·ªõi ho·∫∑c null n·∫øu th·∫•t b·∫°i
 */
async function refreshToken(token, type, tokenFile) {
  try {
    if (!token.refresh_token) {
      console.error(`‚ùå Kh√¥ng th·ªÉ l√†m m·ªõi token ${type}: thi·∫øu refresh_token`);
      return null;
    }

    console.log(`üîÑ ƒêang l√†m m·ªõi token ${type} s·ª≠ d·ª•ng refresh_token...`);

    // T·∫°o OAuth2 client
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );

    // Thi·∫øt l·∫≠p refresh token
    oauth2Client.setCredentials({
      refresh_token: token.refresh_token
    });

    try {
      // L√†m m·ªõi token
      const { credentials } = await oauth2Client.refreshAccessToken();
      
      if (!credentials || !credentials.access_token) {
        console.error('‚ùå L√†m m·ªõi token th·∫•t b·∫°i: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c credentials h·ª£p l·ªá');
        return null;
      }
      
      // ƒê·∫£m b·∫£o gi·ªØ l·∫°i refresh_token n·∫øu kh√¥ng c√≥ trong credentials m·ªõi
      if (!credentials.refresh_token && token.refresh_token) {
        credentials.refresh_token = token.refresh_token;
      }
      
      // L∆∞u token m·ªõi
      fs.writeFileSync(tokenFile, JSON.stringify(credentials, null, 2));
      
      return credentials;
    } catch (refreshError) {
      console.error(`‚ùå L·ªói khi l√†m m·ªõi token: ${refreshError.message}`);
      if (refreshError.response && refreshError.response.data) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(refreshError.response.data, null, 2));
      }
      return null;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi l√†m m·ªõi token ${type}: ${error.message}`);
    return null;
  }
}

/**
 * Ki·ªÉm tra t·∫•t c·∫£ token
 * @returns {Promise<object>} - Tr·∫°ng th√°i c·ªßa c√°c token
 */
export async function checkAllTokens() {
  console.log('üîç ƒêang ki·ªÉm tra t·∫•t c·∫£ token...');
  
  const downloadToken = await getTokenByType('download');
  const uploadToken = await getTokenByType('upload');
  
  const results = {
    download: downloadToken ? true : false,
    upload: uploadToken ? true : false
  };
  
  if (results.download && results.upload) {
    console.log('‚úÖ T·∫•t c·∫£ token ƒë·ªÅu h·ª£p l·ªá');
  } else {
    console.error('‚ùå M·ªôt ho·∫∑c nhi·ªÅu token kh√¥ng h·ª£p l·ªá');
  }
  
  return results;
} 

/**
 * Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√†o th∆∞ m·ª•c Google Drive
 * @param {string} folderId - ID c·ªßa th∆∞ m·ª•c c·∫ßn ki·ªÉm tra
 * @param {string} tokenType - Lo·∫°i token ('download' ho·∫∑c 'upload')
 * @returns {Promise<object>} - K·∫øt qu·∫£ ki·ªÉm tra
 */
export async function checkFolderAccess(folderId, tokenType = 'download') {
  try {
    console.log(`üîí Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√†o th∆∞ m·ª•c ${folderId} v·ªõi token ${tokenType}`);
    
    // L·∫•y token
    const token = await getTokenByType(tokenType);
    if (!token) {
      return {
        success: false,
        error: `Kh√¥ng t√¨m th·∫•y token ${tokenType} h·ª£p l·ªá`
      };
    }
    
    // T·∫°o OAuth2 client
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    
    // Thi·∫øt l·∫≠p credentials
    oauth2Client.setCredentials(token);
    
    // Kh·ªüi t·∫°o Google Drive API
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    
    // Th·ª≠ l·∫•y th√¥ng tin th∆∞ m·ª•c
    console.log(`üîí ƒêang l·∫•y th√¥ng tin th∆∞ m·ª•c: ${folderId}`);
    const folderInfo = await drive.files.get({
      fileId: folderId,
      fields: 'id,name,mimeType,capabilities(canEdit,canShare,canAddChildren),shared,permissions',
      supportsAllDrives: true,
      includeItemsFromAllDrives: true
    });
    
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√†o c√°c file trong th∆∞ m·ª•c
    console.log(`üîí Ki·ªÉm tra quy·ªÅn li·ªát k√™ file trong th∆∞ m·ª•c: ${folderId}`);
    const listResult = await drive.files.list({
      q: `'${folderId}' in parents and trashed = false`,
      fields: 'files(id,name)',
      pageSize: 1,
      supportsAllDrives: true,
      includeItemsFromAllDrives: true
    });
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return {
      success: true,
      folderInfo: folderInfo.data,
      canListFiles: true,
      fileCount: listResult.data.files ? listResult.data.files.length : 0,
      capabilities: folderInfo.data.capabilities || {}
    };
  } catch (error) {
    console.error(`‚ùå L·ªói ki·ªÉm tra quy·ªÅn truy c·∫≠p: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
} 

/**
 * Ki·ªÉm tra chi ti·∫øt v·ªÅ th∆∞ m·ª•c ƒë∆∞·ª£c chia s·∫ª
 * @param {string} folderId - ID c·ªßa th∆∞ m·ª•c c·∫ßn ki·ªÉm tra
 * @returns {Promise<object>} - K·∫øt qu·∫£ ki·ªÉm tra
 */
export async function checkSharedFolderDetails(folderId) {
  try {
    console.log(`üîç Ki·ªÉm tra chi ti·∫øt th∆∞ m·ª•c ƒë∆∞·ª£c chia s·∫ª: ${folderId}`);
    
    // L·∫•y token download v√† upload ƒë·ªÉ ki·ªÉm tra
    const downloadToken = await getTokenByType('download');
    const uploadToken = await getTokenByType('upload');
    
    if (!downloadToken && !uploadToken) {
      return {
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y token h·ª£p l·ªá'
      };
    }
    
    // S·ª≠ d·ª•ng token n√†o c√≥ s·∫µn
    const token = downloadToken || uploadToken;
    const tokenType = downloadToken ? 'download' : 'upload';
    
    // T·∫°o OAuth2 client
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    
    // Thi·∫øt l·∫≠p credentials
    oauth2Client.setCredentials(token);
    
    // Kh·ªüi t·∫°o Google Drive API
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    
    // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ th∆∞ m·ª•c
    console.log(`üîç ƒêang l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ th∆∞ m·ª•c: ${folderId} v·ªõi token ${tokenType}`);
    const folderInfo = await drive.files.get({
      fileId: folderId,
      fields: 'id,name,mimeType,shared,sharingUser,owners,permissions,capabilities,driveId,teamDriveId',
      supportsAllDrives: true,
      includeItemsFromAllDrives: true
    });
    
    // L·∫•y danh s√°ch quy·ªÅn c·ªßa th∆∞ m·ª•c
    console.log(`üîç ƒêang l·∫•y danh s√°ch quy·ªÅn c·ªßa th∆∞ m·ª•c: ${folderId}`);
    const permissionsResponse = await drive.permissions.list({
      fileId: folderId,
      fields: 'permissions(id,type,emailAddress,role,displayName)',
      supportsAllDrives: true
    });
    
    const permissions = permissionsResponse.data.permissions || [];
    
    // Ki·ªÉm tra xem c√≥ th·ªÉ li·ªát k√™ file kh√¥ng
    let canListFiles = false;
    let fileListError = null;
    let fileCount = 0;
    
    try {
      const listResult = await drive.files.list({
        q: `'${folderId}' in parents and trashed = false`,
        fields: 'files(id,name)',
        pageSize: 10,
        supportsAllDrives: true,
        includeItemsFromAllDrives: true
      });
      
      canListFiles = true;
      fileCount = listResult.data.files ? listResult.data.files.length : 0;
    } catch (error) {
      fileListError = error.message;
    }
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return {
      success: true,
      folderInfo: folderInfo.data,
      permissions,
      canListFiles,
      fileCount,
      fileListError,
      isShared: folderInfo.data.shared || false,
      driveId: folderInfo.data.driveId || folderInfo.data.teamDriveId,
      tokenType
    };
  } catch (error) {
    console.error(`‚ùå L·ªói ki·ªÉm tra th∆∞ m·ª•c ƒë∆∞·ª£c chia s·∫ª: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
} 