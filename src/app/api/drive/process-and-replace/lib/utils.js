import fs from 'fs';
import path from 'path';

/**
 * L·∫•y token theo lo·∫°i
 * @param {string} type - 'download' ho·∫∑c 'upload'
 * @returns {object|null} - Token ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
export function getTokenByType(type = 'download') {
  try {
    // ƒê∆∞·ªùng d·∫´n t·ªõi c√°c file token
    const tokenFiles = {
      'download': path.join(process.cwd(), 'drive_token_download.json'),
      'upload': path.join(process.cwd(), 'drive_token_upload.json')
    };
    
    const tokenFile = tokenFiles[type];
    
    if (!tokenFile) {
      console.error(`‚ùå Lo·∫°i token kh√¥ng h·ª£p l·ªá: ${type}`);
      return null;
    }
    
    if (!fs.existsSync(tokenFile)) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file token ${type} t·∫°i: ${tokenFile}`);
      return null;
    }
    
    console.log(`üîë DEBUG: ƒêang ƒë·ªçc file token ${type} t·ª´ ${tokenFile}`);
    
    // ƒê·ªçc token t·ª´ file
    const tokenContent = fs.readFileSync(tokenFile, 'utf8');
    
    // Parse token
    const token = JSON.parse(tokenContent);
    
    // Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
    if (!token || !token.access_token) {
      console.error(`‚ùå Token ${type} kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu access_token`);
      return null;
    }
    
    // Ki·ªÉm tra th·ªùi h·∫°n
    const expiryDate = token.expiry_date;
    if (expiryDate) {
      const now = Date.now();
      if (expiryDate < now) {
        console.error(`‚ùå Token ${type} ƒë√£ h·∫øt h·∫°n t·ª´ ${new Date(expiryDate).toLocaleString()}`);
        return null;
      }
      
      // Hi·ªÉn th·ªã th·ªùi h·∫°n c√≤n l·∫°i
      const remainingTime = (expiryDate - now) / (1000 * 60);
      console.log(`üîë DEBUG: Token ${type} c√≤n h·∫°n ${remainingTime.toFixed(2)} ph√∫t`);
    }
    
    return token;
  } catch (error) {
    console.error(`‚ùå L·ªói khi ƒë·ªçc token ${type}: ${error.message}`);
    return null;
  }
}

/**
 * Ki·ªÉm tra t·∫•t c·∫£ token
 * @returns {object} - Tr·∫°ng th√°i c·ªßa c√°c token
 */
export function checkAllTokens() {
  console.log('üîç ƒêang ki·ªÉm tra t·∫•t c·∫£ token...');
  
  const downloadToken = getTokenByType('download');
  const uploadToken = getTokenByType('upload');
  
  const results = {
    download: downloadToken ? true : false,
    upload: uploadToken ? true : false
  };
  
  if (results.download && results.upload) {
    console.log('‚úÖ T·∫•t c·∫£ token ƒë·ªÅu h·ª£p l·ªá');
  } else {
    console.error('‚ùå M·ªôt ho·∫∑c nhi·ªÅu token kh√¥ng h·ª£p l·ªá');
  }
  
  return results;
} 