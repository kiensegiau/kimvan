import fs from 'fs';
import path from 'path';
import { google } from 'googleapis';
import { processPDFWatermark } from './watermark-service';
import { getNextApiKey } from '../../../../../utils/watermark-api-keys';
import { listFilesInFolder } from './download-service';
import { downloadFromGoogleDrive } from './download-service';
import { findOrCreateFolder, uploadToGoogleDrive } from './upload-service';
import { removeHeaderFooterWatermark, addLogoToPDF } from './pdf-service';
import { createOAuth2Client } from '../../../../../utils/drive-utils';
import VideoProcessor from './video-processor';

// Kh·ªüi t·∫°o VideoProcessor
let videoProcessor = null;

/**
 * Kh·ªüi t·∫°o VideoProcessor n·∫øu ch∆∞a c√≥
 */
async function initVideoProcessor() {
  if (!videoProcessor) {
    const oAuth2Client = await createOAuth2Client();
    videoProcessor = new VideoProcessor(oAuth2Client, 'temp');
  }
  return videoProcessor;
}

/**
 * X·ª≠ l√Ω file (v√≠ d·ª•: lo·∫°i b·ªè watermark)
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫ßn x·ª≠ l√Ω
 * @param {string} mimeType - MIME type c·ªßa file
 * @param {string} apiKey - API key cho d·ªãch v·ª• x√≥a watermark (t√πy ch·ªçn)
 * @param {string} originalFileId - File ID g·ªëc t·ª´ Google Drive (t√πy ch·ªçn)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω file
 */
export async function processFile(filePath, mimeType, apiKey, originalFileId) {
  console.log(`ƒêang x·ª≠ l√Ω file: ${filePath}`);
  
  // T·∫°o ƒë∆∞·ªùng d·∫´n cho file ƒë√£ x·ª≠ l√Ω
  const fileDir = path.dirname(filePath);
  const fileExt = path.extname(filePath);
  const fileName = path.basename(filePath, fileExt);
  const processedPath = path.join(fileDir, `${fileName}_processed${fileExt}`);
  
  try {
    // Ki·ªÉm tra n·∫øu file c√≥ ƒëu√¥i .pdf, lu√¥n x·ª≠ l√Ω nh∆∞ file PDF b·∫•t k·ªÉ MIME type
    const isPdf = mimeType.includes('pdf') || fileExt.toLowerCase() === '.pdf';
    
    // X√°c ƒë·ªãnh lo·∫°i file v√† √°p d·ª•ng x·ª≠ l√Ω ph√π h·ª£p
    if (isPdf) {
      // X·ª≠ l√Ω file PDF - s·ª≠ d·ª•ng API techhk.aoscdn.com ƒë·ªÉ x√≥a watermark
      console.log('ƒêang x·ª≠ l√Ω file PDF v·ªõi API x√≥a watermark...');
      
      // L·∫•y API key t·ª´ h·ªá th·ªëng qu·∫£n l√Ω API key
      const apiKeyToUse = apiKey || await getNextApiKey();
      
      if (!apiKeyToUse) {
        console.error('Kh√¥ng c√≥ API key kh·∫£ d·ª•ng ƒë·ªÉ x√≥a watermark');
        throw new Error('Kh√¥ng c√≥ API key kh·∫£ d·ª•ng ƒë·ªÉ x√≥a watermark');
      }
      
      console.log(`S·ª≠ d·ª•ng API key: ${apiKeyToUse.substring(0, 5)}... ƒë·ªÉ x√≥a watermark`);
      
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file ƒë·ªÉ c·∫£nh b√°o n·∫øu qu√° l·ªõn
      const fileStats = fs.statSync(filePath);
      const fileSizeMB = fileStats.size / (1024 * 1024);
      if (fileSizeMB > 50) {
        console.log(`‚ö†Ô∏è C·∫£nh b√°o: File c√≥ k√≠ch th∆∞·ªõc l·ªõn (${fileSizeMB.toFixed(2)} MB), qu√° tr√¨nh x·ª≠ l√Ω c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian`);
        console.log(`Th·ªùi gian x·ª≠ l√Ω ∆∞·ªõc t√≠nh: ${Math.ceil(fileSizeMB * 15 / 60)} ph√∫t`);
      }
      
      // G·ªçi API x√≥a watermark
      let processingStartTime = Date.now();
      console.log(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω PDF l√∫c: ${new Date(processingStartTime).toLocaleTimeString()}`);
      
      // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra cho file PDF b·ªã ch·∫∑n
      const outputDir = path.dirname(processedPath);
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      try {
        // Th·ª≠ x·ª≠ l√Ω v·ªõi API watermark tr∆∞·ªõc
        /*
        const result = await processPDFWatermark(filePath, processedPath, apiKeyToUse);
        
        // Ki·ªÉm tra k·∫øt qu·∫£ x·ª≠ l√Ω t·ª´ API watermark
        if (result && result.success !== false && result.processedPath && fs.existsSync(result.processedPath)) {
          console.log(`PDF ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng sau ${Math.round((Date.now() - processingStartTime)/1000)} gi√¢y`);
        
          // X√≥a watermark d·∫°ng text ·ªü header v√† footer v√† th√™m logo
          await removeHeaderFooterWatermark(result.processedPath, result.processedPath);
          console.log(`ƒê√£ x√≥a watermark d·∫°ng text ·ªü header v√† footer v√† th√™m logo`);
          
          return {
            success: true,
            processedPath: result.processedPath || processedPath,
            webViewLink: result.webViewLink,
            inputSize: result.inputSize || 0,
            outputSize: result.outputSize || 0,
            pages: result.pages || 0
          };
        }
        
        // Ki·ªÉm tra n·∫øu k·∫øt qu·∫£ cho th·∫•y ƒë√£ b·ªè qua do k√≠ch th∆∞·ªõc
        if (result && result.skippedDueToSize) {
          console.log(`‚ö†Ô∏è ƒê√£ b·ªè qua x·ª≠ l√Ω watermark do file qu√° l·ªõn (${result.message || 'Unknown reason'})`);
          return {
            success: true,
            processedPath: result.processedPath || filePath,
            message: result.message || 'ƒê√£ b·ªè qua x·ª≠ l√Ω watermark do file qu√° l·ªõn',
            skipReason: 'FILE_TOO_LARGE',
            fileSizeMB: result.inputSize ? (result.inputSize / (1024 * 1024)).toFixed(2) : 'Unknown'
          };
        }
        
        // Ki·ªÉm tra n·∫øu k·∫øt qu·∫£ cho th·∫•y ƒë√¢y l√† file video
        if (result && !result.success && result.isVideo && !result.shouldRetry) {
          console.log(`üé• Ph√°t hi·ªán file video, chuy·ªÉn sang x·ª≠ l√Ω video...`);
          return {
            success: false,
            error: 'FILE_IS_VIDEO',
            isVideo: true,
            fileId: result.fileId,
            fileName: result.fileName,
            shouldRetry: false
          };
        }
        
        // N·∫øu API x·ª≠ l√Ω watermark th·∫•t b·∫°i, chuy·ªÉn sang ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n
        if (!result || !result.success) {
          console.log(`‚ö†Ô∏è Ph√°t hi·ªán l·ªói "${result?.error || 'X·ª≠ l√Ω th·∫•t b·∫°i'}", ph√¢n t√≠ch s√¢u h∆°n...`);
          console.log(`üìä K√≠ch th∆∞·ªõc file: ${fileSizeMB.toFixed(2)} MB`);
          
          if (result.error && (result.error.includes('X·ª≠ l√Ω th·∫•t b·∫°i') || result.error.includes('L·ªói khi x·ª≠ l√Ω PDF'))) {
            console.log(`üîÑ Th·ª≠ l·∫°i l·∫ßn 1 v·ªõi API key kh√°c do l·ªói x·ª≠ l√Ω th·∫•t b·∫°i...`);
            
            // Th·ª≠ l·∫°i v·ªõi API key kh√°c
            const newApiKey = await getNextApiKey(true); // true ƒë·ªÉ l·∫•y key kh√°c
            
            if (newApiKey && newApiKey !== apiKeyToUse) {
              console.log(`üîÑ Chuy·ªÉn sang ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n do l·ªói x·ª≠ l√Ω th·∫•t b·∫°i...`);
            }
        */
            
        // S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n
        console.log(`‚ö†Ô∏è S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n ƒë·ªÉ x·ª≠ l√Ω file PDF (b·ªè qua m·ªçi x·ª≠ l√Ω)`);
        
        // B·ªè ƒëo·∫°n ƒë·ªçc PDF ƒë·ªÉ l·∫•y s·ªë trang v√¨ c√≥ th·ªÉ g·∫∑p l·ªói v·ªõi file encrypted
        /*
        // ƒê·ªçc PDF ƒë·ªÉ l·∫•y s·ªë trang
        const PDFDocument = require('pdf-lib').PDFDocument;
        const pdfBytes = fs.readFileSync(filePath);
        const pdfDoc = await PDFDocument.load(pdfBytes);
        const pageCount = pdfDoc.getPageCount();
        console.log(`S·ªë trang PDF: ${pageCount}`);
        */
        
        // Sao ch√©p file g·ªëc sang file ƒë√≠ch thay v√¨ x·ª≠ l√Ω
        fs.copyFileSync(filePath, processedPath);
        console.log(`ƒê√£ sao ch√©p file g·ªëc sang file ƒë√≠ch: ${processedPath}`);
        console.log(`‚úÖ ƒê√£ sao ch√©p file m√† kh√¥ng th·ª±c hi·ªán x·ª≠ l√Ω g√¨ th√™m`);
        
        // Gi·ªØ nguy√™n originalFileName ƒë∆∞·ª£c truy·ªÅn t·ª´ b√™n ngo√†i (n·∫øu c√≥)
        const fileName = originalFileId ? `file_${originalFileId}${fileExt}` : path.basename(filePath);
        
        return {
          success: true,
          processedPath: processedPath,
          message: 'ƒê√£ b·ªè qua m·ªçi x·ª≠ l√Ω, ch·ªâ sao ch√©p file g·ªëc',
          skipWatermark: true,
          // originalFileName s·∫Ω ƒë∆∞·ª£c thi·∫øt l·∫≠p ·ªü processAndUploadFile
        };
        
        /* 
        // N·∫øu l√† l·ªói kh√°c li√™n quan ƒë·∫øn vi·ªác t·∫£i file (kh√¥ng ph·∫£i l·ªói x·ª≠ l√Ω watermark),
        // m·ªõi chuy·ªÉn sang Chrome
        if (result.shouldRetry !== false && 
            (result.error && (result.error.includes('download') || 
                            result.error.includes('t·∫£i') || 
                            result.error.includes('access') || 
                            result.error.includes('permission')))) {
          console.log('üîÑ Th·ª≠ l·∫°i v·ªõi Chrome do l·ªói t·∫£i file...');
          
          // Import c√°c module c·∫ßn thi·∫øt
          const { processPDF } = await import('../../remove-watermark/lib/drive-fix-blockdown.js');
          const { google } = await import('googleapis');
          
          // S·ª≠ d·ª•ng originalFileId ƒë∆∞·ª£c truy·ªÅn v√†o n·∫øu c√≥
          let fileId = originalFileId;
          
          // N·∫øu kh√¥ng c√≥ originalFileId, c·ªë g·∫Øng tr√≠ch xu·∫•t t·ª´ t√™n file
          if (!fileId) {
            const fileIdMatch = fileName.match(/T√ÄI LI·ªÜU(.*?)(_processed)?$/);
            fileId = fileIdMatch ? fileIdMatch[1] : null;
            
            // N·∫øu v·∫´n kh√¥ng t√¨m ƒë∆∞·ª£c fileId, th·ª≠ l·∫•y t·ª´ t√™n file kh√°c
            if (!fileId) {
              // Tr√≠ch xu·∫•t fileId t·ª´ ƒë∆∞·ªùng d·∫´n file
              const pathMatch = filePath.match(/([a-zA-Z0-9_-]{25,})/);
              fileId = pathMatch ? pathMatch[1] : null;
            }
          }
          
          if (!fileId) {
            console.error('Kh√¥ng t√¨m th·∫•y file ID t·ª´ t√™n file ho·∫∑c ƒë∆∞·ªùng d·∫´n. B·ªè qua x·ª≠ l√Ω Chrome.');
            return {
              success: false,
              error: 'FILE_ID_NOT_FOUND',
              message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh file ID ƒë·ªÉ x·ª≠ l√Ω v·ªõi Chrome',
              processedPath: filePath
            };
          }
          
          console.log(`T√¨m th·∫•y File ID ƒë·ªÉ x·ª≠ l√Ω v·ªõi Chrome: ${fileId}`);
          
          // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra r√µ r√†ng
          const outputDir = path.dirname(processedPath);
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
            console.log(`ƒê√£ t·∫°o th∆∞ m·ª•c ƒë·∫ßu ra: ${outputDir}`);
          }
          
          try {
            // Truy·ªÅn google object v√†o h√†m processPDF qua config
            const chromeResult = await processPDF(
              null, // inputPath
              processedPath, // outputPath
              { 
                debugMode: true,
                google: google, // Truy·ªÅn ƒë·ªëi t∆∞·ª£ng Google API
                skipWatermarkRemoval: true // T·∫°m th·ªùi b·ªè qua x·ª≠ l√Ω watermark ƒë·ªÉ t·∫≠p trung v√†o vi·ªác t·∫£i xu·ªëng
              }, 
              true, // isBlocked
              fileId // fileId
            );
          
            if (!chromeResult.success) {
              console.error(`L·ªói x·ª≠ l√Ω Chrome: ${chromeResult.error}`);
              
              if (chromeResult.error === 'NO_IMAGES_DOWNLOADED' || chromeResult.error === 'NO_IMAGES_CONVERTED') {
                throw new Error(`Kh√¥ng th·ªÉ t·∫£i c√°c trang PDF: ${chromeResult.message}`);
              }
              
              throw new Error(chromeResult.error || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω file b·∫±ng Chrome');
            }
            
            // L·∫•y link m·ªõi t·ª´ k·∫øt qu·∫£ Chrome
            const newLink = chromeResult.webViewLink || chromeResult.filePath;
            if (!newLink) {
              throw new Error('Kh√¥ng th·ªÉ l·∫•y link m·ªõi t·ª´ k·∫øt qu·∫£ x·ª≠ l√Ω Chrome');
            }
            
            return {
              success: true,
              processedPath: chromeResult.filePath || processedPath,
              webViewLink: newLink // Th√™m link m·ªõi v√†o k·∫øt qu·∫£
            };
          } catch (error) {
            console.error(`L·ªói khi x·ª≠ l√Ω v·ªõi Chrome: ${error.message}`);
            return {
              success: false,
              error: error.message,
              processedPath: filePath
            };
          }
        } else {
          // L·ªói x·ª≠ l√Ω watermark kh√¥ng c·∫ßn thi·∫øt ph·∫£i m·ªü Chrome
          console.log(`‚ö†Ô∏è S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n do l·ªói x·ª≠ l√Ω watermark: ${result.error}`);
          
          // X√≥a watermark d·∫°ng text ·ªü header v√† footer v√† th√™m logo
          await removeHeaderFooterWatermark(filePath, processedPath);
          console.log(`ƒê√£ c·∫Øt header v√† footer c·ªßa PDF v√† th√™m logo: ${processedPath}`);
          console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω file b·∫±ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n (ch·ªâ th√™m logo)`);
          
          return {
            success: true,
            processedPath: processedPath,
            message: `ƒê√£ x·ª≠ l√Ω b·∫±ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n: ${result.error}`,
            skipWatermark: true
          };
        }
        */
      } catch (watermarkError) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω watermark: ${watermarkError.message}`);
        
        // S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n khi g·∫∑p l·ªói - ch·ªâ sao ch√©p file g·ªëc
        console.log(`‚ö†Ô∏è S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n do l·ªói x·ª≠ l√Ω watermark: ch·ªâ sao ch√©p file g·ªëc`);
        
        // Sao ch√©p file g·ªëc sang file ƒë√≠ch thay v√¨ x·ª≠ l√Ω
        fs.copyFileSync(filePath, processedPath);
        console.log(`ƒê√£ sao ch√©p file g·ªëc sang file ƒë√≠ch do l·ªói: ${processedPath}`);
        console.log(`‚úÖ ƒê√£ sao ch√©p file m√† kh√¥ng th·ª±c hi·ªán x·ª≠ l√Ω g√¨ th√™m`);
        
        return {
          success: true,
          processedPath: processedPath,
          message: `Ch·ªâ sao ch√©p file g·ªëc do l·ªói: ${watermarkError.message}`,
          skipWatermark: true
          // originalFileName s·∫Ω ƒë∆∞·ª£c thi·∫øt l·∫≠p ·ªü processAndUploadFile
        };
      }
    } else if (mimeType.includes('video')) {
      // X·ª≠ l√Ω file video
      console.log('üé• ƒêang x·ª≠ l√Ω file video...');
      const processor = await initVideoProcessor();
      return await processor.processVideo(filePath, fileName, targetFolderId);
    } else if (mimeType.includes('image')) {
      // X·ª≠ l√Ω file h√¨nh ·∫£nh - hi·ªán t·∫°i ch·ªâ sao ch√©p
      console.log('ƒêang x·ª≠ l√Ω file h√¨nh ·∫£nh (ch·ªâ sao ch√©p)...');
      fs.copyFileSync(filePath, processedPath);
    } else if (mimeType.includes('spreadsheet') || mimeType.includes('excel')) {
      // X·ª≠ l√Ω file b·∫£ng t√≠nh - hi·ªán t·∫°i ch·ªâ sao ch√©p
      console.log('ƒêang x·ª≠ l√Ω file b·∫£ng t√≠nh (ch·ªâ sao ch√©p)...');
      fs.copyFileSync(filePath, processedPath);
    } else if (mimeType.includes('document') || mimeType.includes('word')) {
      // X·ª≠ l√Ω file vƒÉn b·∫£n - hi·ªán t·∫°i ch·ªâ sao ch√©p
      console.log('ƒêang x·ª≠ l√Ω file vƒÉn b·∫£n (ch·ªâ sao ch√©p)...');
      fs.copyFileSync(filePath, processedPath);
    } else if (mimeType.includes('presentation') || mimeType.includes('powerpoint')) {
      // X·ª≠ l√Ω file tr√¨nh chi·∫øu - hi·ªán t·∫°i ch·ªâ sao ch√©p
      console.log('ƒêang x·ª≠ l√Ω file tr√¨nh chi·∫øu (ch·ªâ sao ch√©p)...');
      fs.copyFileSync(filePath, processedPath);
    } else if (mimeType.includes('video') || mimeType.includes('audio')) {
      // X·ª≠ l√Ω file media - hi·ªán t·∫°i ch·ªâ sao ch√©p
      console.log('ƒêang x·ª≠ l√Ω file media (ch·ªâ sao ch√©p)...');
      fs.copyFileSync(filePath, processedPath);
    } else {
      // C√°c lo·∫°i file kh√°c - ch·ªâ sao ch√©p
      console.log(`Kh√¥ng c√≥ x·ª≠ l√Ω ƒë·∫∑c bi·ªát cho lo·∫°i file: ${mimeType}, th·ª±c hi·ªán sao ch√©p ƒë∆°n gi·∫£n`);
      fs.copyFileSync(filePath, processedPath);
    }
    
    console.log(`File ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† l∆∞u t·∫°i: ${processedPath}`);
    
    return {
      success: true,
      processedPath: processedPath
    };
  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω file:', error);
    throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω file: ${error.message}`);
  }
}

/**
 * X·ª≠ l√Ω folder Google Drive
 * @param {string} folderId - ID c·ªßa folder c·∫ßn x·ª≠ l√Ω
 * @param {string} folderName - T√™n c·ªßa folder
 * @param {string} targetFolderId - ID c·ªßa folder ƒë√≠ch ƒë·ªÉ upload k·∫øt qu·∫£
 * @param {string} apiKey - API key cho d·ªãch v·ª• x√≥a watermark (t√πy ch·ªçn)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω folder
 */
export async function processFolder(folderId, folderName, targetFolderId, apiKey) {
  console.log(`X·ª≠ l√Ω folder: ${folderName} (${folderId})`);
  
  // K·∫øt qu·∫£ x·ª≠ l√Ω
  const results = {
    success: true,
    folderName: folderName,
    folderId: folderId,
    targetFolderId: targetFolderId,
    processedFiles: 0,
    processedFolders: 0,
    skippedFiles: 0,
    errors: [],
    files: []
  };
  
  try {
    // Li·ªát k√™ t·∫•t c·∫£ c√°c file trong folder
    const listResult = await listFilesInFolder(folderId);
    
    if (!listResult.success) {
      // Ki·ªÉm tra l·ªói quy·ªÅn truy c·∫≠p
      if (listResult.error && (
          listResult.error.includes('403') || 
          listResult.error.includes('permission') || 
          listResult.error.includes('quy·ªÅn truy c·∫≠p')
      )) {
        throw new Error(`Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o folder: ${folderName} (${folderId})`);
      }
      
      throw new Error(`Kh√¥ng th·ªÉ li·ªát k√™ c√°c file trong folder: ${listResult.error}`);
    }
    
    // Ki·ªÉm tra n·∫øu folder tr·ªëng
    if (!listResult.files || listResult.files.length === 0) {
      console.log(`Folder ${folderName} (${folderId}) tr·ªëng, kh√¥ng c√≥ file n√†o ƒë·ªÉ x·ª≠ l√Ω`);
      return {
        ...results,
        isEmpty: true,
        message: 'Folder tr·ªëng, kh√¥ng c√≥ file n√†o ƒë·ªÉ x·ª≠ l√Ω'
      };
    }
    
    // T·∫°o folder ƒë√≠ch t∆∞∆°ng ·ª©ng
    const targetFolderResult = await findOrCreateFolder(folderName, targetFolderId, true);
    
    if (!targetFolderResult.success) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o folder ƒë√≠ch: ${targetFolderResult.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    }
    
    const newTargetFolderId = targetFolderResult.folder.id;
    console.log(`ƒê√£ t·∫°o/t√¨m folder ƒë√≠ch: ${folderName} (${newTargetFolderId})`);
    
    // X·ª≠ l√Ω t·ª´ng file trong folder
    for (const file of listResult.files) {
      try {
        if (file.mimeType === 'application/vnd.google-apps.folder') {
          // X·ª≠ l√Ω ƒë·ªá quy n·∫øu l√† folder con
          console.log(`Ph√°t hi·ªán folder con: ${file.name} (${file.id})`);
          
          const subFolderResult = await processFolder(
            file.id, 
            file.name, 
            newTargetFolderId, 
            apiKey
          );
          
          results.processedFolders++;
          results.processedFiles += subFolderResult.processedFiles;
          results.skippedFiles += subFolderResult.skippedFiles;
          
          // Th√™m l·ªói t·ª´ folder con n·∫øu c√≥
          if (subFolderResult.errors && subFolderResult.errors.length > 0) {
            results.errors = [...results.errors, ...subFolderResult.errors.map(err => `[${file.name}] ${err}`)];
          }
          
          // T·∫°o th√¥ng tin chi ti·∫øt v·ªÅ folder con ƒë√£ x·ª≠ l√Ω
          const folderInfo = {
            name: file.name,
            id: file.id,
            type: 'folder',
            success: subFolderResult.success,
            processedFiles: subFolderResult.processedFiles,
            isEmpty: subFolderResult.isEmpty || false,
            link: `https://drive.google.com/drive/folders/${newTargetFolderId}`,
            targetFolderId: newTargetFolderId,
            newFileId: newTargetFolderId // S·ª≠ d·ª•ng ID c·ªßa folder ƒë√≠ch
          };
          
          // Log th√¥ng tin chi ti·∫øt v·ªÅ folder con
          console.log(`Th√¥ng tin chi ti·∫øt folder con: name=${folderInfo.name}, id=${folderInfo.id}, newFileId=${folderInfo.newFileId}, link=${folderInfo.link}`);
          
          results.files.push(folderInfo);
          
          console.log(`ƒê√£ x·ª≠ l√Ω folder con: ${file.name} - ${subFolderResult.processedFiles} files`);
        } else {
          // X·ª≠ l√Ω file
          console.log(`ƒêang x·ª≠ l√Ω file: ${file.name} (${file.id})`);
          
          // Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
          try {
            console.log(`Ki·ªÉm tra xem file "${file.name}" ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a...`);
            
            // T·∫°o OAuth2 client v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông refresh token
            const oauth2Client = createOAuth2Client(0);
            
            // Kh·ªüi t·∫°o Drive API
            const drive = google.drive({ version: 'v3', auth: oauth2Client });
            
            // X·ª≠ l√Ω t√™n file ƒë·ªÉ s·ª≠ d·ª•ng trong truy v·∫•n
            const escapedFileName = file.name.replace(/'/g, "\\'");
            
            // T√¨m c√°c file tr√πng t√™n trong folder ƒë√≠ch
            const existingFileResponse = await drive.files.list({
              q: `name='${escapedFileName}' and '${newTargetFolderId}' in parents and trashed=false`,
              fields: 'files(id, name, webViewLink, webContentLink)',
              spaces: 'drive'
            });
            
            // N·∫øu file ƒë√£ t·ªìn t·∫°i, b·ªè qua x·ª≠ l√Ω
            if (existingFileResponse.data.files && existingFileResponse.data.files.length > 0) {
              const existingFile = existingFileResponse.data.files[0];
              console.log(`‚úÖ File "${file.name}" ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch (ID: ${existingFile.id}), b·ªè qua x·ª≠ l√Ω`);
              
              results.files.push({
                name: file.name,
                id: file.id,
                type: 'file',
                mimeType: file.mimeType,
                success: true,
                newFileId: existingFile.id,
                link: existingFile.webViewLink,
                alreadyExists: true
              });
              
              // TƒÉng s·ªë file ƒë√£ x·ª≠ l√Ω
              results.processedFiles++;
              
              // B·ªè qua c√°c b∆∞·ªõc c√≤n l·∫°i
              continue;
            }
            
            console.log(`File "${file.name}" ch∆∞a t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch, ti·∫øn h√†nh x·ª≠ l√Ω...`);
          } catch (checkExistingError) {
            console.error(`L·ªói khi ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i: ${checkExistingError.message}`);
            console.log(`Ti·∫øp t·ª•c x·ª≠ l√Ω file...`);
          }
          
          // T·∫£i xu·ªëng file
          const downloadResult = await downloadFromGoogleDrive(file.id);
          
          if (!downloadResult.success) {
            console.error(`Kh√¥ng th·ªÉ t·∫£i xu·ªëng file: ${file.name}`);
            results.skippedFiles++;
            results.errors.push(`Kh√¥ng th·ªÉ t·∫£i xu·ªëng: ${file.name}`);
            continue;
          }
          
          // Ki·ªÉm tra k√≠ch th∆∞·ªõc file qu√° l·ªõn
          const fileSizeMB = downloadResult.fileSize ? downloadResult.fileSize / (1024 * 1024) : 0;
          if (fileSizeMB > 100) {
            console.warn(`File qu√° l·ªõn (${fileSizeMB.toFixed(2)} MB), c√≥ th·ªÉ g·∫∑p v·∫•n ƒë·ªÅ khi x·ª≠ l√Ω: ${file.name}`);
          }
          
          // X·ª≠ l√Ω file theo lo·∫°i MIME
          let processedFilePath;
          const mimeType = downloadResult.mimeType;
          
          try {
            if (mimeType.includes('pdf')) {
              // X·ª≠ l√Ω file PDF
              const processResult = await processFile(downloadResult.filePath, mimeType, apiKey, file.id);
              processedFilePath = processResult.processedPath;
              
              // Ki·ªÉm tra xem processedPath c√≥ ph·∫£i l√† ƒë·ªëi t∆∞·ª£ng kh√¥ng
              if (typeof processedFilePath === 'object' && processedFilePath !== null) {
                console.log('Ph√°t hi·ªán processedPath l√† ƒë·ªëi t∆∞·ª£ng, kh√¥ng ph·∫£i chu·ªói. ƒêang chuy·ªÉn ƒë·ªïi...');
                
                // N·∫øu ƒë·ªëi t∆∞·ª£ng c√≥ thu·ªôc t√≠nh path, s·ª≠ d·ª•ng n√≥
                if (processedFilePath.path) {
                  processedFilePath = processedFilePath.path;
                } else {
                  // N·∫øu kh√¥ng, t·∫°o ƒë∆∞·ªùng d·∫´n m·ªõi d·ª±a tr√™n filePath g·ªëc
                  const fileDir = path.dirname(downloadResult.filePath);
                  const fileExt = path.extname(downloadResult.filePath);
                  const fileName = path.basename(downloadResult.filePath, fileExt);
                  processedFilePath = path.join(fileDir, `${fileName}_processed${fileExt}`);
                  
                  console.log(`ƒê√£ t·∫°o ƒë∆∞·ªùng d·∫´n m·ªõi: ${processedFilePath}`);
                  
                  // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
                  if (!fs.existsSync(processedFilePath)) {
                    console.error(`L·ªói: File kh√¥ng t·ªìn t·∫°i t·∫°i ƒë∆∞·ªùng d·∫´n ${processedFilePath}`);
                    throw new Error(`File ƒë√£ x·ª≠ l√Ω kh√¥ng t·ªìn t·∫°i t·∫°i ƒë∆∞·ªùng d·∫´n ${processedFilePath}`);
                  }
                }
              }
            } else {
              // C√°c lo·∫°i file kh√°c - ch·ªâ sao ch√©p
              const fileDir = path.dirname(downloadResult.filePath);
              const fileExt = path.extname(downloadResult.filePath);
              const fileName = path.basename(downloadResult.filePath, fileExt);
              processedFilePath = path.join(fileDir, `${fileName}_uploaded${fileExt}`);
              fs.copyFileSync(downloadResult.filePath, processedFilePath);
            }
            
            // Upload file ƒë√£ x·ª≠ l√Ω
            const uploadResult = await uploadToGoogleDrive(
              processedFilePath,
              downloadResult.fileName,
              downloadResult.mimeType,
              newTargetFolderId
            );
            
            // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
            try {
              fs.rmdirSync(downloadResult.outputDir, { recursive: true });
            } catch (cleanupError) {
              console.error(`L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
            }
            
            results.processedFiles++;
            results.files.push({
              name: file.name,
              id: file.id,
              type: 'file',
              mimeType: mimeType,
              success: true,
              newFileId: uploadResult.fileId,
              link: uploadResult.webViewLink
            });
            
            console.log(`ƒê√£ x·ª≠ l√Ω file: ${file.name} -> ${uploadResult.fileName}`);
          } catch (processingError) {
            // X·ª≠ l√Ω l·ªói khi x·ª≠ l√Ω ho·∫∑c upload file
            console.error(`L·ªói khi x·ª≠ l√Ω ho·∫∑c upload file ${file.name}:`, processingError);
            
            // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m n·∫øu c√≥
            if (downloadResult.outputDir) {
              try {
                fs.rmdirSync(downloadResult.outputDir, { recursive: true });
              } catch (cleanupError) {
                console.error(`L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
              }
            }
            
            results.skippedFiles++;
            results.errors.push(`L·ªói khi x·ª≠ l√Ω ${file.name}: ${processingError.message}`);
            
            results.files.push({
              name: file.name,
              id: file.id,
              type: 'file',
              mimeType: mimeType,
              success: false,
              error: processingError.message
            });
          }
        }
      } catch (fileError) {
        console.error(`L·ªói khi x·ª≠ l√Ω ${file.mimeType === 'application/vnd.google-apps.folder' ? 'folder' : 'file'}: ${file.name}`, fileError);
        
        results.skippedFiles++;
        results.errors.push(`L·ªói khi x·ª≠ l√Ω ${file.name}: ${fileError.message}`);
        
        results.files.push({
          name: file.name,
          id: file.id,
          type: file.mimeType === 'application/vnd.google-apps.folder' ? 'folder' : 'file',
          success: false,
          error: fileError.message
        });
      }
    }
    
    console.log(`Ho√†n t·∫•t x·ª≠ l√Ω folder: ${folderName} - ƒê√£ x·ª≠ l√Ω ${results.processedFiles} files, ${results.processedFolders} folders, b·ªè qua ${results.skippedFiles} files`);
    
  } catch (error) {
    console.error(`L·ªói khi x·ª≠ l√Ω folder ${folderName}:`, error);
    
    results.success = false;
    results.error = error.message;
  }
  
  return results;
} 