import { google } from 'googleapis';
import { dbMiddleware } from '@/utils/db-middleware';
import Course from '@/models/Course';
import Sheet from '@/models/Sheet';
import { ObjectId } from 'mongodb';
import fs from 'fs';
import path from 'path';
import os from 'os';

/**
 * C·∫≠p nh·∫≠t link ƒë√£ x·ª≠ l√Ω v√†o sheet
 * @param {string} courseId - ID c·ªßa kh√≥a h·ªçc
 * @param {number} sheetIndex - Index c·ªßa sheet trong kh√≥a h·ªçc
 * @param {number} rowIndex - Index c·ªßa h√†ng c·∫ßn c·∫≠p nh·∫≠t
 * @param {number} cellIndex - Index c·ªßa √¥ c·∫ßn c·∫≠p nh·∫≠t
 * @param {string} originalUrl - URL g·ªëc
 * @param {string} newUrl - URL m·ªõi sau khi x·ª≠ l√Ω
 * @param {string} displayText - Text hi·ªÉn th·ªã (n·∫øu c√≥)
 * @param {Request} request - Request object t·ª´ Next.js
 * @returns {Promise<Object>} - K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function updateSheetCell(courseId, sheetIndex, rowIndex, cellIndex, originalUrl, newUrl, displayText, request, options = {}) {
  try {
    const { skipProcessing = false, originalLink = null, processedTime = null } = options;

    console.log(`\nüìù C·∫≠p nh·∫≠t sheet s·ª≠ d·ª•ng Google Sheets API tr·ª±c ti·∫øp:`);
    console.log(`- courseId: ${courseId}`);
    console.log(`- sheetIndex: ${sheetIndex}`);
    console.log(`- rowIndex: ${rowIndex}`);
    console.log(`- cellIndex: ${cellIndex}`);
    console.log(`- displayText: ${displayText}`);
    console.log(`- originalUrl: ${originalUrl}`);
    console.log(`- newUrl: ${newUrl || '(undefined)'}`);
    
    // Ki·ªÉm tra URL m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
    if (!newUrl) {
      console.warn('‚ö†Ô∏è URL m·ªõi kh√¥ng ƒë∆∞·ª£c cung c·∫•p, s·ª≠ d·ª•ng URL g·ªëc thay th·∫ø');
      newUrl = originalUrl || '#';
    }

    // Tr∆∞·ªõc ti√™n l·∫•y th√¥ng tin sheet t·ª´ database
    await dbMiddleware(request);
    const course = await Course.findById(courseId).populate('sheets');
    
    if (!course) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc v·ªõi ID: ${courseId}`);
    }

    if (!course.sheets || !course.sheets[sheetIndex]) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y sheet v·ªõi index: ${sheetIndex}`);
    }

    const sheet = course.sheets[sheetIndex];
    const sheetId = sheet.sheetId;
    const sheetName = sheet.name || `Sheet ${sheetIndex + 1}`;
    
    console.log(`üîç ƒê√£ t√¨m th·∫•y sheet: ${sheetName} (ID: ${sheetId})`);

    // Thi·∫øt l·∫≠p Google Sheets API
    let auth;
    
    // Ki·ªÉm tra xem c√≥ file credentials kh√¥ng
    const credentialsPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;
    if (credentialsPath && fs.existsSync(credentialsPath)) {
      // X√°c th·ª±c v·ªõi file credentials
      auth = new google.auth.GoogleAuth({
        keyFile: credentialsPath,
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
    } else if (process.env.GOOGLE_CLIENT_EMAIL && process.env.GOOGLE_PRIVATE_KEY) {
      // X√°c th·ª±c v·ªõi bi·∫øn m√¥i tr∆∞·ªùng
      auth = new google.auth.GoogleAuth({
        credentials: {
          client_email: process.env.GOOGLE_CLIENT_EMAIL,
          private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n')
        },
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
    } else {
      throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c Google API');
    }
    
    const sheets = google.sheets({ version: 'v4', auth });

    // L·∫•y th√¥ng tin th·ª±c t·∫ø v·ªÅ sheet
    let actualSheetId = 0;
    try {
      const sheetInfo = await sheets.spreadsheets.get({
        spreadsheetId: sheetId,
        fields: 'sheets.properties'
      });
      
      if (sheetInfo.data.sheets && sheetInfo.data.sheets[0].properties) {
        actualSheetId = sheetInfo.data.sheets[0].properties.sheetId;
        console.log(`‚úÖ T√¨m th·∫•y sheet ID th·ª±c t·∫ø: ${actualSheetId}`);
      }
    } catch (sheetLookupError) {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sheet ID, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh 0: ${sheetLookupError.message}`);
    }

    // L·∫•y th·ªùi gian hi·ªán t·∫°i ƒë·ªÉ ghi ch√∫
    const currentTime = new Date().toLocaleString('vi-VN');
    
    // Chu·∫©n b·ªã ghi ch√∫
    const noteContent = skipProcessing 
      ? `Link g·ªëc: ${originalLink || originalUrl}\nƒê√£ b·ªè qua x·ª≠ l√Ω l√∫c: ${currentTime}\nL√Ω do: File g·ªëc t·ª´ khoahocshare6.0@gmail.com`
      : `Link g·ªëc: ${originalUrl}\nƒê√£ x·ª≠ l√Ω l√∫c: ${currentTime}`;

    // S·ª≠ d·ª•ng batchUpdate ƒë·ªÉ c·∫≠p nh·∫≠t √¥ v·ªõi ƒë·∫ßy ƒë·ªß ƒë·ªãnh d·∫°ng v√† ghi ch√∫
    console.log(`üîÑ C·∫≠p nh·∫≠t √¥ [${rowIndex + 1},${cellIndex + 1}] b·∫±ng batchUpdate...`);
    
    try {
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: sheetId,
        requestBody: {
          requests: [
            {
              updateCells: {
                range: {
                  sheetId: actualSheetId, 
                  startRowIndex: rowIndex,
                  endRowIndex: rowIndex + 1,
                  startColumnIndex: cellIndex,
                  endColumnIndex: cellIndex + 1
                },
                rows: [
                  {
                    values: [
                      {
                        userEnteredValue: {
                          stringValue: displayText // Gi·ªØ nguy√™n text hi·ªÉn th·ªã
                        },
                        userEnteredFormat: {
                          backgroundColor: {
                            red: 0.9,
                            green: 0.6,  // M√†u xanh d∆∞∆°ng n·ªïi b·∫≠t
                            blue: 1.0
                          },
                          textFormat: {
                            link: { uri: skipProcessing ? (originalLink || originalUrl) : newUrl },
                            foregroundColor: { 
                              red: 0.0,
                              green: 0.0,
                              blue: 0.7  // Ch·ªØ m√†u xanh ƒë·∫≠m
                            },
                            bold: true  // In ƒë·∫≠m text
                          }
                        },
                        note: noteContent
                      }
                    ]
                  }
                ],
                fields: 'userEnteredValue,userEnteredFormat.backgroundColor,userEnteredFormat.textFormat.link,userEnteredFormat.textFormat.foregroundColor,userEnteredFormat.textFormat.bold,note'
              }
            }
          ]
        }
      });
      
      console.log(`‚úÖ C·∫≠p nh·∫≠t √¥ th√†nh c√¥ng!`);
      return {
        success: true,
        message: skipProcessing ? 'ƒê√£ c·∫≠p nh·∫≠t cell (b·ªè qua x·ª≠ l√Ω)' : 'ƒê√£ c·∫≠p nh·∫≠t cell',
        sheetId: sheetId,
        rowIndex,
        cellIndex,
        displayText
      };
    } catch (batchUpdateError) {
      console.error(`‚ùå L·ªói khi s·ª≠ d·ª•ng batchUpdate: ${batchUpdateError.message}`);
      
      // Ph∆∞∆°ng ph√°p thay th·∫ø s·ª≠ d·ª•ng values.update v·ªõi HYPERLINK
      console.log(`‚ö†Ô∏è Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø v·ªõi values.update...`);
      
      try {
        // T·∫°o c√¥ng th·ª©c hyperlink
        const formula = `=HYPERLINK("${skipProcessing ? (originalLink || originalUrl) : newUrl}","${displayText.replace(/"/g, '""')}")`;
        
        const cellLetter = String.fromCharCode(65 + cellIndex);
        const cellNumber = rowIndex + 1;
        
        // C·∫≠p nh·∫≠t gi√° tr·ªã v·ªõi c√¥ng th·ª©c hyperlink
        await sheets.spreadsheets.values.update({
          spreadsheetId: sheetId,
          range: `${cellLetter}${cellNumber}`,
          valueInputOption: 'USER_ENTERED',
          requestBody: {
            values: [[formula]]
          }
        });
        
        // C·∫≠p nh·∫≠t ƒë·ªãnh d·∫°ng v√† ghi ch√∫ ri√™ng
        await sheets.spreadsheets.batchUpdate({
          spreadsheetId: sheetId,
          requestBody: {
            requests: [{
              updateCells: {
                range: {
                  sheetId: actualSheetId,
                  startRowIndex: rowIndex,
                  endRowIndex: rowIndex + 1,
                  startColumnIndex: cellIndex,
                  endColumnIndex: cellIndex + 1
                },
                rows: [{
                  values: [{
                    userEnteredFormat: {
                      backgroundColor: { red: 0.9, green: 0.6, blue: 1.0 },
                      textFormat: { bold: true }
                    },
                    note: noteContent
                  }]
                }],
                fields: 'userEnteredFormat.backgroundColor,userEnteredFormat.textFormat.bold,note'
              }
            }]
          }
        });
        
        console.log(`‚úÖ C·∫≠p nh·∫≠t √¥ th√†nh c√¥ng v·ªõi ph∆∞∆°ng ph√°p thay th·∫ø!`);
        return {
          success: true,
          message: 'ƒê√£ c·∫≠p nh·∫≠t cell v·ªõi ph∆∞∆°ng ph√°p thay th·∫ø',
          sheetId: sheetId,
          rowIndex,
          cellIndex,
          displayText
        };
      } catch (error) {
        console.error(`‚ùå L·ªói khi s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p thay th·∫ø: ${error.message}`);
        throw error;
      }
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t cell: ${error.message}`);
    return {
      success: false,
      error: `L·ªói khi c·∫≠p nh·∫≠t cell: ${error.message}`
    };
  }
}

/**
 * C·∫≠p nh·∫≠t link trong Google Sheets API
 * @param {string} sheetId - ID c·ªßa Google Sheet
 * @param {string} sheetName - T√™n c·ªßa sheet
 * @param {number} rowIndex - Index c·ªßa h√†ng (0-based)
 * @param {number} colIndex - Index c·ªßa c·ªôt (0-based)
 * @param {string} displayText - Text hi·ªÉn th·ªã
 * @param {string} url - URL c·∫ßn th√™m v√†o √¥
 * @param {string} originalUrl - URL g·ªëc tr∆∞·ªõc khi x·ª≠ l√Ω
 * @param {Request} request - Request object t·ª´ Next.js
 * @returns {Promise<Object>} - K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function updateGoogleSheetCell(sheetId, sheetName, rowIndex, cellIndex, displayText, newUrl, originalUrl, request, options = {}) {
  try {
    const { skipProcessing = false, originalLink, processedTime } = options;
    
    console.log(`\nüìù C·∫≠p nh·∫≠t Google Sheet tr·ª±c ti·∫øp v·ªõi Google API:`);
    console.log(`- sheetId: ${sheetId}`);
    console.log(`- sheetName: ${sheetName || 'Kh√¥ng c√≥ t√™n'}`);
    console.log(`- rowIndex: ${rowIndex}`);
    console.log(`- cellIndex: ${cellIndex}`);
    console.log(`- displayText: ${displayText}`);
    console.log(`- originalUrl: ${originalUrl}`);
    console.log(`- newUrl: ${newUrl || '(undefined)'}`);

    // Ki·ªÉm tra URL m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
    if (!newUrl) {
      console.warn('‚ö†Ô∏è URL m·ªõi kh√¥ng ƒë∆∞·ª£c cung c·∫•p, s·ª≠ d·ª•ng URL g·ªëc thay th·∫ø');
      newUrl = originalUrl || '#';
    }

    // Thi·∫øt l·∫≠p Google Sheets API
    let auth;
    
    // Ki·ªÉm tra xem c√≥ file credentials kh√¥ng
    const credentialsPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;
    if (credentialsPath && fs.existsSync(credentialsPath)) {
      // X√°c th·ª±c v·ªõi file credentials
      auth = new google.auth.GoogleAuth({
        keyFile: credentialsPath,
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
    } else if (process.env.GOOGLE_CLIENT_EMAIL && process.env.GOOGLE_PRIVATE_KEY) {
      // X√°c th·ª±c v·ªõi bi·∫øn m√¥i tr∆∞·ªùng
      auth = new google.auth.GoogleAuth({
        credentials: {
          client_email: process.env.GOOGLE_CLIENT_EMAIL,
          private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n')
        },
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
    } else {
      throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c Google API');
    }
    
    const sheets = google.sheets({ version: 'v4', auth });

    // L·∫•y th√¥ng tin th·ª±c t·∫ø v·ªÅ sheet
    let actualSheetId = 0;
    try {
      const sheetInfo = await sheets.spreadsheets.get({
        spreadsheetId: sheetId,
        fields: 'sheets.properties'
      });
      
      if (sheetInfo.data.sheets && sheetInfo.data.sheets.length > 0) {
        // T√¨m sheet c√≥ t√™n tr√πng v·ªõi sheetName n·∫øu c√≥
        if (sheetName) {
          const targetSheet = sheetInfo.data.sheets.find(s => 
            s.properties && s.properties.title && s.properties.title.toLowerCase() === sheetName.toLowerCase()
          );
          
          if (targetSheet && targetSheet.properties) {
            actualSheetId = targetSheet.properties.sheetId;
            console.log(`‚úÖ T√¨m th·∫•y sheet '${sheetName}' v·ªõi ID: ${actualSheetId}`);
          } else {
            actualSheetId = sheetInfo.data.sheets[0].properties.sheetId;
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sheet '${sheetName}', s·ª≠ d·ª•ng sheet ƒë·∫ßu ti√™n v·ªõi ID: ${actualSheetId}`);
          }
        } else {
          actualSheetId = sheetInfo.data.sheets[0].properties.sheetId;
          console.log(`‚úÖ S·ª≠ d·ª•ng sheet ƒë·∫ßu ti√™n v·ªõi ID: ${actualSheetId}`);
        }
      }
    } catch (sheetLookupError) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin sheet, s·ª≠ d·ª•ng ID m·∫∑c ƒë·ªãnh 0: ${sheetLookupError.message}`);
    }

    // L·∫•y th·ªùi gian hi·ªán t·∫°i ƒë·ªÉ ghi ch√∫
    const currentTime = new Date().toLocaleString('vi-VN');
    
    // Chu·∫©n b·ªã ghi ch√∫
    const noteContent = skipProcessing 
      ? `Link g·ªëc: ${originalLink || originalUrl}\nƒê√£ b·ªè qua x·ª≠ l√Ω l√∫c: ${currentTime}\nL√Ω do: File g·ªëc t·ª´ khoahocshare6.0@gmail.com`
      : `Link g·ªëc: ${originalUrl}\nƒê√£ x·ª≠ l√Ω l√∫c: ${currentTime}`;

    // S·ª≠ d·ª•ng batchUpdate ƒë·ªÉ c·∫≠p nh·∫≠t √¥ v·ªõi ƒë·∫ßy ƒë·ªß ƒë·ªãnh d·∫°ng v√† ghi ch√∫
    console.log(`üîÑ C·∫≠p nh·∫≠t √¥ [${rowIndex + 1},${cellIndex + 1}] b·∫±ng batchUpdate...`);
    
    try {
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: sheetId,
        requestBody: {
          requests: [
            {
              updateCells: {
                range: {
                  sheetId: actualSheetId, 
                  startRowIndex: rowIndex,
                  endRowIndex: rowIndex + 1,
                  startColumnIndex: cellIndex,
                  endColumnIndex: cellIndex + 1
                },
                rows: [
                  {
                    values: [
                      {
                        userEnteredValue: {
                          stringValue: displayText // Gi·ªØ nguy√™n text hi·ªÉn th·ªã
                        },
                        userEnteredFormat: {
                          backgroundColor: {
                            red: 0.9,
                            green: 0.6,  // M√†u xanh d∆∞∆°ng n·ªïi b·∫≠t
                            blue: 1.0
                          },
                          textFormat: {
                            link: { uri: skipProcessing ? (originalLink || originalUrl) : newUrl },
                            foregroundColor: { 
                              red: 0.0,
                              green: 0.0,
                              blue: 0.7  // Ch·ªØ m√†u xanh ƒë·∫≠m
                            },
                            bold: true  // In ƒë·∫≠m text
                          }
                        },
                        note: noteContent
                      }
                    ]
                  }
                ],
                fields: 'userEnteredValue,userEnteredFormat.backgroundColor,userEnteredFormat.textFormat.link,userEnteredFormat.textFormat.foregroundColor,userEnteredFormat.textFormat.bold,note'
              }
            }
          ]
        }
      });
      
      console.log(`‚úÖ C·∫≠p nh·∫≠t √¥ th√†nh c√¥ng!`);
      return {
        success: true,
        message: skipProcessing ? 'ƒê√£ c·∫≠p nh·∫≠t cell (b·ªè qua x·ª≠ l√Ω)' : 'ƒê√£ c·∫≠p nh·∫≠t cell',
        sheetId,
        rowIndex,
        cellIndex,
        displayText
      };
    } catch (batchUpdateError) {
      console.error(`‚ùå L·ªói khi s·ª≠ d·ª•ng batchUpdate: ${batchUpdateError.message}`);
      
      // Ph∆∞∆°ng ph√°p thay th·∫ø s·ª≠ d·ª•ng values.update v·ªõi HYPERLINK
      console.log(`‚ö†Ô∏è Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø v·ªõi values.update...`);
      
      try {
        // T·∫°o c√¥ng th·ª©c hyperlink
        const formula = `=HYPERLINK("${skipProcessing ? (originalLink || originalUrl) : newUrl}","${displayText.replace(/"/g, '""')}")`;
        
        const cellLetter = String.fromCharCode(65 + cellIndex);
        const cellNumber = rowIndex + 1;
        
        // C·∫≠p nh·∫≠t gi√° tr·ªã v·ªõi c√¥ng th·ª©c hyperlink
        await sheets.spreadsheets.values.update({
          spreadsheetId: sheetId,
          range: `${sheetName ? `${sheetName}!` : ''}${cellLetter}${cellNumber}`,
          valueInputOption: 'USER_ENTERED',
          requestBody: {
            values: [[formula]]
          }
        });
        
        // C·∫≠p nh·∫≠t ƒë·ªãnh d·∫°ng v√† ghi ch√∫ ri√™ng
        await sheets.spreadsheets.batchUpdate({
          spreadsheetId: sheetId,
          requestBody: {
            requests: [{
              updateCells: {
                range: {
                  sheetId: actualSheetId,
                  startRowIndex: rowIndex,
                  endRowIndex: rowIndex + 1,
                  startColumnIndex: cellIndex,
                  endColumnIndex: cellIndex + 1
                },
                rows: [{
                  values: [{
                    userEnteredFormat: {
                      backgroundColor: { red: 0.9, green: 0.6, blue: 1.0 },
                      textFormat: { bold: true }
                    },
                    note: noteContent
                  }]
                }],
                fields: 'userEnteredFormat.backgroundColor,userEnteredFormat.textFormat.bold,note'
              }
            }]
          }
        });
        
        console.log(`‚úÖ C·∫≠p nh·∫≠t √¥ th√†nh c√¥ng v·ªõi ph∆∞∆°ng ph√°p thay th·∫ø!`);
        return {
          success: true,
          message: 'ƒê√£ c·∫≠p nh·∫≠t cell v·ªõi ph∆∞∆°ng ph√°p thay th·∫ø',
          sheetId,
          rowIndex,
          cellIndex,
          displayText
        };
      } catch (error) {
        console.error(`‚ùå L·ªói khi s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p thay th·∫ø: ${error.message}`);
        throw error;
      }
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t Google Sheet cell: ${error.message}`);
    return {
      success: false,
      error: `L·ªói khi c·∫≠p nh·∫≠t Google Sheet cell: ${error.message}`
    };
  }
} 