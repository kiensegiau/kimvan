import { NextResponse } from 'next/server';
import path from 'path';
import fs from 'fs';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import { extractDriveFileId } from '@/utils/drive-utils';
import { 
  checkMimeType, 
  processSingleFile, 
  processFolder,
  processAndUploadFile,
  addToProcessingQueue,
  downloadWithCookie
} from './lib';

export const maxDuration = 1800; // 30 ph√∫t timeout
export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';

/**
 * API endpoint ƒë·ªÉ x·ª≠ l√Ω v√† thay th·∫ø file t·ª´ Google Drive
 * Endpoint n√†y x·ª≠ l√Ω c·∫£ file ƒë∆°n l·∫ª v√† folder ƒë·ªá quy
 */
export async function POST(request) {
  const startTime = Date.now();
  const tempDir = path.join(os.tmpdir(), uuidv4());
  
  // T·∫°o response stream ƒë·ªÉ g·ª≠i updates
  const encoder = new TextEncoder();
  const customStream = new TransformStream();
  const writer = customStream.writable.getWriter();
  
  // H√†m helper ƒë·ªÉ g·ª≠i updates
  const sendUpdate = async (message) => {
    try {
      await writer.write(encoder.encode(`data: ${JSON.stringify(message)}\n\n`));
    } catch (e) {
      console.error('L·ªói khi g·ª≠i update:', e);
    }
  };

  try {
    console.log('\n=== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù REQUEST PROCESS-AND-REPLACE ===');
    
    // Parse request body
    const requestBody = await request.json();
    
    // Log request body ƒë·ªÉ debug (·∫©n apiKey)
    console.log('üìù Request body:', JSON.stringify({
      ...requestBody,
      apiKey: requestBody.apiKey ? '[HIDDEN]' : undefined
    }, null, 2));
    
    // Tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t·ª´ request
    const {
      fileId,
      driveLink,
      targetFolderId,
      folderId,
      folderName,
      courseName,
      sheetName,
      apiKey,
      updateSheet = false,
      courseId,
      sheetIndex,
      rowIndex,
      cellIndex,
      sheetId,
      googleSheetName,
      displayText
    } = requestBody;

    // Chu·∫©n h√≥a c√°c tham s·ªë
    const finalTargetFolderId = targetFolderId || folderId;
    const finalFolderName = folderName || courseName || sheetName || 'Unknown';

    // Validation c√°c tham s·ªë b·∫Øt bu·ªôc
    if (!fileId && !driveLink) {
      throw new Error('Thi·∫øu fileId ho·∫∑c driveLink');
    }

    if (!finalTargetFolderId) {
      throw new Error('Thi·∫øu folder ID ƒë√≠ch (targetFolderId ho·∫∑c folderId)');
    }

    // Validation tham s·ªë c·∫≠p nh·∫≠t sheet
    if (updateSheet) {
      if (courseId) {
        if (sheetIndex === undefined || rowIndex === undefined || cellIndex === undefined) {
          throw new Error('Thi·∫øu th√¥ng tin c·∫≠p nh·∫≠t sheet (sheetIndex, rowIndex, cellIndex)');
        }
      } else if (sheetId && googleSheetName) {
        if (rowIndex === undefined || cellIndex === undefined) {
          throw new Error('Thi·∫øu th√¥ng tin c·∫≠p nh·∫≠t Google Sheet (rowIndex, cellIndex)');
        }
      } else {
        throw new Error('Thi·∫øu th√¥ng tin sheet (courseId ho·∫∑c sheetId + googleSheetName)');
      }
    }

    // L·∫•y ID file t·ª´ driveLink n·∫øu kh√¥ng c√≥ fileId
    const finalFileId = fileId || extractDriveFileId(driveLink);
    if (!finalFileId) {
      throw new Error('Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c file ID');
    }

    // Ki·ªÉm tra lo·∫°i file
    console.log('üîç Ki·ªÉm tra lo·∫°i file...');
    const mimeTypeResult = await checkMimeType(finalFileId);

    // X·ª≠ l√Ω k·∫øt qu·∫£ ki·ªÉm tra MIME type
    if (!mimeTypeResult.success) {
      console.log(`‚ö†Ô∏è L·ªói khi ki·ªÉm tra MIME type: ${mimeTypeResult.error}`);
      
      // Ki·ªÉm tra n·∫øu l√† l·ªói 403, c√≥ th·ªÉ b·ªè qua ph∆∞∆°ng ph√°p cookie
      let is403Error = mimeTypeResult.error && (
        mimeTypeResult.error.includes('403') || 
        mimeTypeResult.statusCode === 403
      );
      
      // N·∫øu kh√¥ng ph·∫£i l·ªói 403, th·ª≠ t·∫£i file b·∫±ng cookie tr∆∞·ªõc
      if (!is403Error) {
        console.log('üç™ Th·ª≠ t·∫£i file b·∫±ng cookie...');
        
        // T·∫°o th∆∞ m·ª•c t·∫°m cho file t·∫£i v·ªÅ
        if (!fs.existsSync(tempDir)) {
          fs.mkdirSync(tempDir, { recursive: true });
        }
        
        // T·∫°o ƒë∆∞·ªùng d·∫´n file t·∫°m v·ªõi ƒëu√¥i .pdf
        const tempFilePath = path.join(tempDir, `file_${finalFileId}`);
        
        try {
          // Th·ª≠ t·∫£i b·∫±ng cookie
          const cookieResult = await downloadWithCookie(finalFileId, tempFilePath);
          
          if (cookieResult.success) {
            console.log(`‚úÖ ƒê√£ t·∫£i file th√†nh c√¥ng b·∫±ng cookie!`);
            
            // X·ª≠ l√Ω file ƒë√£ t·∫£i th√†nh c√¥ng
            const fileResult = await processAndUploadFile({
              filePath: cookieResult.filePath, // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t·ª´ k·∫øt qu·∫£ cookie
              mimeType: cookieResult.mimeType || 'application/pdf', // S·ª≠ d·ª•ng MIME type t·ª´ k·∫øt qu·∫£ cookie
              fileId: finalFileId,
              driveLink,
              targetFolderId: finalTargetFolderId,
              folderName: finalFolderName,
              apiKey,
              updateSheet,
              courseId: null,
              sheetIndex,
              rowIndex,
              cellIndex,
              sheetId,
              googleSheetName,
              displayText: cookieResult.fileName || displayText || `file_${finalFileId}`,
              request,
              startTime,
              tempDir,
              sourceType: 'cookie'
            });
            
            return NextResponse.json({
              ...fileResult,
              processingMode: 'cookie',
              fileInfo: {
                name: cookieResult.fileName,
                extension: cookieResult.fileExtension,
                mimeType: cookieResult.mimeType,
                size: cookieResult.fileSizeMB
              }
            });
          }
          
          console.log(`‚ö†Ô∏è T·∫£i b·∫±ng cookie th·∫•t b·∫°i: ${cookieResult.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
          
          // N·∫øu l√† l·ªói 403 v·ªõi cookie, ƒë√°nh d·∫•u ƒë·ªÉ b·ªè qua ph∆∞∆°ng ph√°p n√†y
          if (cookieResult.error === 'HTTP_ERROR_403' || cookieResult.skipCookieMethod) {
            is403Error = true;
            console.log(`‚ö†Ô∏è Ph√°t hi·ªán l·ªói 403 v·ªõi cookie, chuy·ªÉn th·∫≥ng sang Chrome...`);
          }
        } catch (cookieError) {
          console.error(`‚ùå L·ªói khi t·∫£i file b·∫±ng cookie: ${cookieError.message}`);
        }
      } else {
        console.log(`‚ö†Ô∏è Ph√°t hi·ªán l·ªói 403, b·ªè qua ph∆∞∆°ng ph√°p t·∫£i b·∫±ng cookie...`);
      }
      
      // N·∫øu cookie th·∫•t b·∫°i ho·∫∑c b·ªã b·ªè qua do l·ªói 403, chuy·ªÉn sang Chrome
      console.log('üåê Chuy·ªÉn sang s·ª≠ d·ª•ng Chrome ƒë·ªÉ t·∫£i v√† x·ª≠ l√Ω file...');
      
      // X√°c ƒë·ªãnh lo·∫°i l·ªói ƒë·ªÉ ghi log
      const errorType = is403Error ? '403' : (mimeTypeResult.statusCode || 'unknown');
      console.log(`‚ö†Ô∏è Lo·∫°i l·ªói: ${errorType}`);
      
      // Th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
      const chromeResult = await addToProcessingQueue({
        fileId: finalFileId,
        fileName: `file_${finalFileId}`,
        driveLink,
        targetFolderId: finalTargetFolderId,
        targetFolderName: finalFolderName,
        errorType: errorType.toString(),
        updateSheet,
        courseId: null,
        sheetIndex,
        rowIndex,
        cellIndex,
        sheetId,
        googleSheetName,
        displayText,
        request,
        tempDir
      });
      
      if (chromeResult) {
        return NextResponse.json({
          ...chromeResult,
          processingMode: `chrome_${errorType}`
        });
      }
      
      return NextResponse.json({ 
        status: 'queued',
        message: 'File ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome'
      });
    }

    // N·∫øu l√† th∆∞ m·ª•c, x·ª≠ l√Ω ƒë·ªá quy
    if (mimeTypeResult.isFolder) {
      console.log('\nüìÇ PH√ÅT HI·ªÜN TH∆Ø M·ª§C - B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ƒê·ªÜ QUY');
      
      // T·∫°o c√°c options cho vi·ªác x·ª≠ l√Ω th∆∞ m·ª•c
      const folderOptions = {
        targetFolderId: finalTargetFolderId,
        apiKey,
        updateSheet,
        courseId,
        sheetIndex,
        rowIndex,
        cellIndex,
        sheetId,
        googleSheetName,
        displayText,
        request,
        originalFolderLink: driveLink,
        sheetFolderName: finalFolderName
      };
      
      // G·ªçi h√†m x·ª≠ l√Ω th∆∞ m·ª•c ƒë·ªá quy
      const folderResult = await processFolder(finalFileId, folderOptions);

      // Log total processing time
      const processingTime = Math.round((Date.now() - startTime) / 1000);
      console.log('\n=== HO√ÄN TH√ÄNH X·ª¨ L√ù TH∆Ø M·ª§C ===');
      console.log(`‚è±Ô∏è T·ªïng th·ªùi gian: ${processingTime} gi√¢y`);
      console.log(`üìä T·ªïng s·ªë file ƒë√£ x·ª≠ l√Ω: ${folderResult.processedFiles.length}`);
      console.log(`‚ö†Ô∏è T·ªïng s·ªë file ƒë√£ b·ªè qua: ${folderResult.skippedFiles.length}`);
      console.log(`‚ùå T·ªïng s·ªë l·ªói: ${folderResult.errors.length}`);

      return NextResponse.json({
        ...folderResult,
        processingTime
      });
    }

    // Check if it's a Google Doc
    if (mimeTypeResult.isGoogleDoc) {
      throw new Error('Kh√¥ng th·ªÉ x·ª≠ l√Ω Google Doc, ch·ªâ file PDF ƒë∆∞·ª£c h·ªó tr·ª£');
    }

    // N·∫øu kh√¥ng ph·∫£i PDF, b·ªè qua x·ª≠ l√Ω watermark
    if (!mimeTypeResult.isPdf) {
      console.log(`‚ö†Ô∏è File kh√¥ng ph·∫£i l√† PDF (${mimeTypeResult.mimeType}), b·ªè qua x·ª≠ l√Ω watermark`);
      return NextResponse.json({
        success: true,
        skipped: true,
        message: `File kh√¥ng ph·∫£i l√† PDF (${mimeTypeResult.mimeType}), b·ªè qua x·ª≠ l√Ω watermark`,
        originalFile: {
          id: finalFileId,
          link: driveLink
        }
      });
    }

    // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // X·ª≠ l√Ω file ƒë∆°n l·∫ª
    const fileOptions = {
      targetFolderId: finalTargetFolderId,
      apiKey,
      updateSheet,
      courseId,
      sheetIndex,
      rowIndex,
      cellIndex,
      sheetId,
      googleSheetName,
      displayText,
      request
    };
    
    try {
      console.log('\nüìÑ X·ª¨ L√ù FILE ƒê∆†N L·∫∫');
      
      // Th√™m x·ª≠ l√Ω l·ªói v·ªõi catch ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
      const fileResult = await processSingleFile(
        {
          id: finalFileId,
          name: displayText || `file_${finalFileId}`,
          mimeType: mimeTypeResult.mimeType
        },
        fileOptions
      ).catch(async error => {
        console.error(`‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω file: ${error.message}`);
        
        // Ki·ªÉm tra l·ªói t·ª´ API x·ª≠ l√Ω watermark
        if (error.message.includes('L·ªói khi x·ª≠ l√Ω PDF') || 
            error.message.includes('X·ª≠ l√Ω th·∫•t b·∫°i') || 
            error.message.includes('Kh√¥ng th·ªÉ x·ª≠ l√Ω PDF')) {
          
          console.log(`‚ö†Ô∏è Ph√°t hi·ªán l·ªói t·ª´ API x·ª≠ l√Ω watermark, th·ª≠ d√πng Chrome...`);
          
          // Chuy·ªÉn sang Chrome n·∫øu c√≥ l·ªói API watermark
          return { 
            error: error.message, 
            useChrome: true 
          };
        }
        
        // N·∫øu l√† l·ªói 403 ho·∫∑c l·ªói download, chuy·ªÉn sang Chrome
        if (error.message.includes('403') || 
            error.message.includes('cannotDownloadFile') || 
            error.message.includes('download failed') ||
            error.message.includes('kh√¥ng th·ªÉ t·∫£i')) {
          
          console.log(`‚ö†Ô∏è L·ªói t·∫£i xu·ªëng file, chuy·ªÉn sang d√πng Chrome...`);
          return { 
            error: error.message, 
            useChrome: true 
          };
        }
        
        // N·∫øu l√† l·ªói kh√°c kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c, n√©m ra ƒë·ªÉ x·ª≠ l√Ω ·ªü catch b√™n ngo√†i
        throw error;
      });
      
      // N·∫øu c·∫ßn s·ª≠ d·ª•ng Chrome ƒë·ªÉ x·ª≠ l√Ω
      if (fileResult && fileResult.error && fileResult.useChrome) {
        console.log('üåê Chuy·ªÉn sang Chrome ƒë·ªÉ t·∫£i v√† x·ª≠ l√Ω file...');
        
        // Th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
        const chromeResult = await addToProcessingQueue({
          fileId: finalFileId,
          fileName: displayText || `file_${finalFileId}`,
          driveLink,
          targetFolderId: finalTargetFolderId,
          targetFolderName: finalFolderName,
          errorType: '403',
          updateSheet,
            courseId,
            sheetIndex,
            rowIndex,
            cellIndex,
            sheetId,
            googleSheetName,
          displayText,
          request,
          tempDir
        });
        
        if (chromeResult) {
          return NextResponse.json({
            ...chromeResult,
            processingMode: 'chrome_after_error',
            originalError: fileResult.error
          });
      }
      
      return NextResponse.json({
          status: 'queued',
          message: 'File ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome sau khi g·∫∑p l·ªói API',
          originalError: fileResult.error
        });
      }
      
      // T√≠nh th·ªùi gian x·ª≠ l√Ω
      const processingTime = Math.round((Date.now() - startTime) / 1000);
      console.log(`\n‚úÖ Ho√†n th√†nh x·ª≠ l√Ω file: ${processingTime} gi√¢y`);
      
      return NextResponse.json({
        ...fileResult,
        processingTime
      });
    } catch (error) {
      // N·∫øu l·ªói 403, th·ª≠ d√πng Chrome
      if (error.message.includes('HTTP 403') || error.message.includes('cannotDownloadFile')) {
        console.log('‚ö†Ô∏è 403 ƒë∆∞·ª£c ph√°t hi·ªán - File b·ªã ch·∫∑n t·∫£i xu·ªëng');
        console.log('üåê Chuy·ªÉn sang Chrome ƒë·ªÉ t·∫£i v√† x·ª≠ l√Ω file...');
        
        // Th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
        const chromeResult = await addToProcessingQueue({
          fileId: finalFileId,
          fileName: displayText || `file_${finalFileId}`,
          driveLink,
          targetFolderId: finalTargetFolderId,
          targetFolderName: finalFolderName,
          errorType: '403',
          updateSheet,
          courseId,
          sheetIndex,
          rowIndex,
          cellIndex,
          sheetId,
          googleSheetName,
          displayText,
          request,
          tempDir
        });
        
        if (chromeResult) {
          return NextResponse.json(chromeResult);
        }
        
        return NextResponse.json({ 
          status: 'queued',
          message: 'File ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome'
        });
      }
      
      // N·∫øu l√† l·ªói kh√°c, n√©m l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü catch
      throw error;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω file: ${error.message}`);
    
    // G·ª≠i th√¥ng b√°o l·ªói
    await sendUpdate({
      type: 'error',
      error: error.message
    });
    
    // ƒê√≥ng stream
    await writer.close();
    
    return new Response(
      JSON.stringify({ error: `L·ªói x·ª≠ l√Ω file: ${error.message}` }), 
      { 
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  } finally {
    // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
    if (fs.existsSync(tempDir)) {
      try {
        fs.rmSync(tempDir, { recursive: true, force: true });
        console.log(`üßπ ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m: ${tempDir}`);
      } catch (cleanupError) {
        console.error(`‚ö†Ô∏è L·ªói d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
      }
    }
    
    // ƒê·∫£m b·∫£o stream ƒë∆∞·ª£c ƒë√≥ng
    try {
      await writer.close();
    } catch (e) {
      console.error('L·ªói ƒë√≥ng stream:', e);
    }
  }
  
  // Tr·∫£ v·ªÅ stream response
  return new Response(customStream.readable, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
    },
  });
}