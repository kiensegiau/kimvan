import { NextResponse } from 'next/server';
import path from 'path';
import fs from 'fs';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import { downloadFromGoogleDrive } from './lib/download-service.js';
import { processFile } from './lib/file-processor.js';
import { uploadToGoogleDrive } from './lib/upload-service.js';
import { updateSheetCell, updateGoogleSheetCell } from './lib/sheet-service.js';
import { processPDF } from '../remove-watermark/lib/drive-fix-blockdown.js';
import { extractDriveFileId } from '@/utils/drive-utils';
import { google } from 'googleapis';

/**
 * Ki·ªÉm tra th√¥ng tin file t·ª´ Google Drive API
 * @param {string} fileId - ID c·ªßa file c·∫ßn ki·ªÉm tra
 * @returns {Promise<Object>} - Th√¥ng tin file
 */
async function checkFileInfo(fileId) {
  try {
    console.log(`Ki·ªÉm tra th√¥ng tin file: ${fileId}`);
    
    // Import h√†m getTokenByType t·ª´ utils
    const { getTokenByType } = await import('../remove-watermark/lib/utils.js');
    
    // L·∫•y token t·∫£i xu·ªëng
    const downloadToken = getTokenByType('download');
    if (!downloadToken) {
      console.error('Kh√¥ng t√¨m th·∫•y token Google Drive t·∫£i xu·ªëng');
      throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive t·∫£i xu·ªëng');
    }
    
    // T·∫°o OAuth2 client
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    
    // Thi·∫øt l·∫≠p credentials
    oauth2Client.setCredentials(downloadToken);
    
    // Kh·ªüi t·∫°o Google Drive API
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    
    // L·∫•y th√¥ng tin file
    const fileMetadata = await drive.files.get({
      fileId: fileId,
      fields: 'id,name,mimeType,size,owners,fileExtension',
      supportsAllDrives: true,
      includeItemsFromAllDrives: true
    });
    
    return {
      success: true,
      fileInfo: fileMetadata.data
    };
  } catch (error) {
    console.error(`L·ªói khi ki·ªÉm tra th√¥ng tin file: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * H√†m x·ª≠ l√Ω v√† upload file ƒë√£ t·∫£i xu·ªëng b·∫±ng Chrome
 * S·ª≠ d·ª•ng cho c·∫£ tr∆∞·ªùng h·ª£p 404 v√† 403
 */
async function processAndUploadFile(
  filePath,
  mimeType,
  fileId,
  driveLink,
  targetFolderId,
  folderName,
  apiKey,
  updateSheet,
  courseId,
  sheetIndex,
  rowIndex,
  cellIndex,
  sheetId,
  googleSheetName,
  displayText,
  request,
  startTime,
  tempDir,
  sourceType // "404_chrome" ho·∫∑c "403_chrome"
) {
  try {
    console.log(`üîß X·ª≠ l√Ω watermark cho file PDF ƒë√£ t·∫£i b·∫±ng Chrome (${sourceType})...`);
    
    // X·ª≠ l√Ω file ƒë·ªÉ lo·∫°i b·ªè watermark
    const processResult = await processFile(filePath, mimeType || "application/pdf", apiKey);
    
    // Ki·ªÉm tra n·∫øu file l√† video
    if (processResult && !processResult.success && processResult.isVideo) {
      console.log(`üé• Ph√°t hi·ªán file video, b·ªè qua x·ª≠ l√Ω watermark...`);
      return {
        success: true,
        isVideo: true,
        originalFile: {
          id: fileId,
          link: driveLink
        },
        message: 'File video kh√¥ng c·∫ßn x·ª≠ l√Ω watermark',
        processingTime: Math.round((Date.now() - startTime) / 1000)
      };
    }
    
    // L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn file ƒë√£ x·ª≠ l√Ω
    let processedFilePath = processResult.processedPath;
    
    // Ki·ªÉm tra xem processedPath c√≥ ph·∫£i l√† ƒë·ªëi t∆∞·ª£ng kh√¥ng
    if (typeof processedFilePath === 'object' && processedFilePath !== null) {
      console.log('Ph√°t hi·ªán processedPath l√† ƒë·ªëi t∆∞·ª£ng, kh√¥ng ph·∫£i chu·ªói. ƒêang chuy·ªÉn ƒë·ªïi...');
      
      // N·∫øu ƒë·ªëi t∆∞·ª£ng c√≥ thu·ªôc t√≠nh path, s·ª≠ d·ª•ng n√≥
      if (processedFilePath.path) {
        processedFilePath = processedFilePath.path;
      } else {
        // N·∫øu kh√¥ng, t·∫°o ƒë∆∞·ªùng d·∫´n m·ªõi d·ª±a tr√™n filePath g·ªëc
        const fileDir = path.dirname(filePath);
        const fileExt = path.extname(filePath);
        const fileName = path.basename(filePath, fileExt);
        processedFilePath = path.join(fileDir, `${fileName}_processed${fileExt}`);
        
        console.log(`ƒê√£ t·∫°o ƒë∆∞·ªùng d·∫´n m·ªõi: ${processedFilePath}`);
        
        // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
        if (!fs.existsSync(processedFilePath)) {
          console.error(`L·ªói: File kh√¥ng t·ªìn t·∫°i t·∫°i ƒë∆∞·ªùng d·∫´n ${processedFilePath}`);
          throw new Error(`File ƒë√£ x·ª≠ l√Ω kh√¥ng t·ªìn t·∫°i t·∫°i ƒë∆∞·ªùng d·∫´n ${processedFilePath}`);
        }
      }
    }
    
    const processedFileName = path.basename(processedFilePath);
    
    console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω watermark cho file (${sourceType}): ${processedFilePath}`);
    
    // Upload file ƒë√£ x·ª≠ l√Ω
    const uploadResult = await uploadToGoogleDrive(
      processedFilePath,
      path.basename(processedFilePath),
      mimeType || "application/pdf",
      targetFolderId,
      folderName
    );
    
    // N·∫øu c√≥ y√™u c·∫ßu c·∫≠p nh·∫≠t sheet, th·ª±c hi·ªán c·∫≠p nh·∫≠t
    let sheetUpdateResult = null;
    if (updateSheet) {
      console.log('Y√™u c·∫ßu c·∫≠p nh·∫≠t sheet ƒë∆∞·ª£c k√≠ch ho·∫°t, ti·∫øn h√†nh c·∫≠p nh·∫≠t...');
      
      // Ki·ªÉm tra xem c·∫ßn c·∫≠p nh·∫≠t v√†o database hay tr·ª±c ti·∫øp v√†o Google Sheet
      if (courseId && sheetIndex !== undefined && rowIndex !== undefined && cellIndex !== undefined) {
        // C·∫≠p nh·∫≠t v√†o database
        sheetUpdateResult = await updateSheetCell(
          courseId,
          sheetIndex,
          rowIndex,
          cellIndex,
          driveLink, // URL g·ªëc
          uploadResult.webViewLink, // URL m·ªõi
          displayText, // Text hi·ªÉn th·ªã
          request // Pass the request object
        );
        
        console.log('K·∫øt qu·∫£ c·∫≠p nh·∫≠t sheet trong database:', sheetUpdateResult);
      } else if (sheetId && googleSheetName && rowIndex !== undefined && cellIndex !== undefined) {
        // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp v√†o Google Sheet
        const cellDisplayText = displayText || 'T√†i li·ªáu ƒë√£ x·ª≠ l√Ω';
        sheetUpdateResult = await updateGoogleSheetCell(
          sheetId,
          googleSheetName,
          rowIndex,
          cellIndex,
          cellDisplayText,
          uploadResult.webViewLink,
          driveLink, // URL g·ªëc
          request // Pass the request object
        );
        
        console.log('K·∫øt qu·∫£ c·∫≠p nh·∫≠t tr·ª±c ti·∫øp v√†o Google Sheet:', sheetUpdateResult);
      } else {
        console.warn('Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t sheet, b·ªè qua b∆∞·ªõc n√†y');
        sheetUpdateResult = {
          success: false,
          error: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t sheet'
        };
      }
    }
    
    // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
    if (tempDir) {
      try {
        fs.rmSync(tempDir, { recursive: true, force: true });
        console.log(`ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m: ${tempDir}`);
      } catch (cleanupError) {
        console.error('L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m:', cleanupError);
      }
    }
    
    // T·∫°o k·∫øt qu·∫£ ph√π h·ª£p v·ªõi lo·∫°i x·ª≠ l√Ω
    const result = {
      success: true,
      isFolder: false,
      originalFile: {
        id: fileId,
        link: driveLink
      },
      targetFolder: {
        id: targetFolderId,
        name: folderName
      },
      processedFile: {
        id: uploadResult.fileId,
        name: uploadResult.fileName,
        link: uploadResult.webViewLink
      },
      processingTime: Math.round((Date.now() - startTime) / 1000),
      sheetUpdate: updateSheet ? {
        success: sheetUpdateResult?.success || false,
        message: sheetUpdateResult?.message || sheetUpdateResult?.error || 'Kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t',
        details: sheetUpdateResult?.updatedCell || null
      } : null
    };
    
    // Th√™m c√°c tr∆∞·ªùng ph√π h·ª£p v·ªõi lo·∫°i x·ª≠ l√Ω
    if (sourceType === "404_chrome") {
      result.retrievedViaChrome = true;
      result.watermarkProcessed = true;
    } else if (sourceType === "403_chrome") {
      result.blockdownProcessed = true;
      result.watermarkProcessed = true;
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω v√† upload file (${sourceType}): ${error.message}`);
    
    // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m n·∫øu c√≥ l·ªói
    if (tempDir) {
      try {
        fs.rmSync(tempDir, { recursive: true, force: true });
        console.log(`ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m: ${tempDir}`);
      } catch (cleanupError) {
        console.error('L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m:', cleanupError);
      }
    }
    
    throw error; // N√©m l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü c·∫•p cao h∆°n
  }
}

/**
 * X·ª≠ l√Ω tu·∫ßn t·ª± file b·∫±ng Chrome
 */
async function processFileWithChrome(
  fileId,
  fileName,
  tempDir,
  driveLink,
  targetFolderId,
  targetFolderName,
  courseName,
  apiKey,
  updateSheet,
  courseId,
  sheetIndex,
  rowIndex,
  cellIndex,
  sheetId,
  googleSheetName,
  displayText,
  request,
  startTime,
  errorType // "404" ho·∫∑c "403"
) {
  console.log(`\n=== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù FILE B·∫∞NG CHROME (${errorType}) ===`);
  console.log(`üîç File ID: ${fileId}`);
  console.log(`üìÑ T√™n file: ${fileName}`);
  console.log(`üìÇ Th∆∞ m·ª•c t·∫°m: ${tempDir}`);
  
  try {
    // Th√™m import n·∫øu ch∆∞a c√≥
    const { downloadBlockedPDF } = await import('../remove-watermark/lib/drive-fix-blockdown.js');
    
    // T·∫°o t√™n file t·∫°m
    const tempFileName = `T√ÄI LI·ªÜU${fileId}.pdf`;
    
    console.log(`\nüåê ƒêang m·ªü Chrome ƒë·ªÉ t·∫£i file...`);
    console.log(`‚è≥ Vui l√≤ng ƒë·ª£i trong khi Chrome x·ª≠ l√Ω...`);
    
    // G·ªçi h√†m downloadBlockedPDF ƒë·ªÉ t·∫£i file
    const chromeDownloadResult = await downloadBlockedPDF(
      fileId, 
      tempFileName, 
      tempDir, 
      { debugMode: true }  // B·∫¨T ch·∫ø ƒë·ªô debug ƒë·ªÉ hi·ªÉn th·ªã Chrome
    );
    
    if (chromeDownloadResult.success) {
      console.log(`\n‚úÖ T·∫£i file th√†nh c√¥ng qua Chrome:`);
      console.log(`üìÑ File path: ${chromeDownloadResult.filePath}`);
      
      // X·ª≠ l√Ω file ƒë√£ t·∫£i
      console.log(`\nüîÑ ƒêang x·ª≠ l√Ω file ƒë√£ t·∫£i xu·ªëng...`);
      const result = await processAndUploadFile(
        chromeDownloadResult.filePath,
        "application/pdf",
        fileId,
        driveLink,
        targetFolderId,
        targetFolderName || courseName || `Chrome Download (${errorType})`,
        apiKey,
        updateSheet,
        courseId,
        sheetIndex,
        rowIndex,
        cellIndex,
        sheetId,
        googleSheetName,
        displayText,
        request,
        startTime,
        tempDir,
        `${errorType}_chrome`
      );
      
      console.log(`\n‚úÖ Ho√†n t·∫•t x·ª≠ l√Ω file b·∫±ng Chrome`);
      return result;
    } else {
      console.error(`\n‚ùå Kh√¥ng th·ªÉ t·∫£i file b·∫±ng Chrome:`);
      console.error(`üí¨ L·ªói: ${chromeDownloadResult.error}`);
      throw new Error(chromeDownloadResult.error);
    }
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi x·ª≠ l√Ω file b·∫±ng Chrome (${errorType}):`);
    console.error(`üí¨ ${error.message}`);
    throw error;
  }
}

let isProcessing = false;
const processingQueue = [];

/**
 * X·ª≠ l√Ω h√†ng ƒë·ª£i c√°c file c·∫ßn d√πng Chrome
 */
async function processNextInQueue() {
  if (isProcessing || processingQueue.length === 0) return;
  
  isProcessing = true;
  const task = processingQueue.shift();
  
  try {
    console.log(`\n=== ƒêANG X·ª¨ L√ù FILE TRONG H√ÄNG ƒê·ª¢I ===`);
    console.log(`‚è≥ C√≤n ${processingQueue.length} file ƒëang ch·ªù...`);
    
    // S·ª≠ d·ª•ng drive-fix-blockdown ƒë·ªÉ x·ª≠ l√Ω
    const chromeResult = await processPDF(null, null, {
      skipWatermarkRemoval: true,
      debugMode: true
    }, true, task.fileId);

    // Ki·ªÉm tra n·∫øu l√† file video
    if (!chromeResult.success && chromeResult.isVideo) {
      console.log(`üé• Ph√°t hi·ªán file video, chuy·ªÉn sang x·ª≠ l√Ω video...`);
      
      try {
        // S·ª≠ d·ª•ng VideoProcessor
        const VideoProcessor = require('./lib/video-processor');
        
        // Kh·ªüi t·∫°o VideoProcessor
        const videoProcessor = new VideoProcessor(task.tempDir || 'temp');
        
        console.log(`üé• B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video v·ªõi ID: ${task.fileId}`);
        
        // ƒê·∫£m b·∫£o c√≥ targetFolderId
        const targetFolderId = task.targetFolderId || '1Lt10aHyWp9VtPaImzInE0DmIcbrjJgpN'; // Folder m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
        console.log(`üìÇ Target folder ID: ${targetFolderId}`);
        
        // X·ª≠ l√Ω video
        const videoResult = await videoProcessor.handlePDFToVideo(
          task.fileId,
          task.fileName || `video_${task.fileId}.mp4`,
          targetFolderId
        );

        console.log(`üé• K·∫øt qu·∫£ x·ª≠ l√Ω video:`, JSON.stringify(videoResult, null, 2));

        if (!videoResult.success) {
          throw new Error(`L·ªói x·ª≠ l√Ω video: ${videoResult.error}`);
        }

        // ƒê·∫£m b·∫£o ƒë√≥ng browser sau khi ho√†n th√†nh
        await videoProcessor.close();

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        const resultObject = {
          success: true,
          isVideo: true,
          originalFile: {
            id: task.fileId,
            link: task.driveLink || `https://drive.google.com/file/d/${task.fileId}/view`
          },
          message: 'ƒê√£ x·ª≠ l√Ω file video th√†nh c√¥ng',
          processingTime: Math.round((Date.now() - task.startTime) / 1000)
        };

        // Th√™m th√¥ng tin v·ªÅ file ƒë√£ x·ª≠ l√Ω
        if (videoResult.uploadResult) {
          resultObject.processedFile = {
            id: videoResult.uploadResult.fileId,
            name: videoResult.uploadResult.fileName,
            link: videoResult.uploadResult.webViewLink
          };
          console.log(`‚úÖ Video ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng: ${videoResult.uploadResult.webViewLink}`);
          
          // C·∫≠p nh·∫≠t cell trong sheet n·∫øu c·∫ßn
          if (task.updateSheet && task.courseId && task.sheetIndex !== undefined && 
              task.rowIndex !== undefined && task.cellIndex !== undefined) {
            try {
              // X·ª≠ l√Ω URL g·ªëc ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ l√† URL h·ª£p l·ªá
              let originalUrl = task.driveLink || `https://drive.google.com/file/d/${task.fileId}/view`;
              
              // X·ª≠ l√Ω URL redirect t·ª´ Google Sheets
              if (originalUrl.startsWith('https://www.google.com/url?q=')) {
                try {
                  const urlObj = new URL(originalUrl);
                  const redirectUrl = urlObj.searchParams.get('q');
                  if (redirectUrl) {
                    // Decode URL (Google th∆∞·ªùng encode URL hai l·∫ßn)
                    let decodedUrl = redirectUrl;
                    try {
                      decodedUrl = decodeURIComponent(redirectUrl);
                      // Decode m·ªôt l·∫ßn n·ªØa n·∫øu URL v·∫´n ch·ª©a c√°c k√Ω t·ª± ƒë∆∞·ª£c m√£ h√≥a
                      if (decodedUrl.includes('%')) {
                        try {
                          decodedUrl = decodeURIComponent(decodedUrl);
                        } catch (e) {
                          console.log('Kh√¥ng th·ªÉ decode URL th√™m l·∫ßn n·ªØa:', e.message);
                        }
                      }
                    } catch (e) {
                      console.error('Error decoding URL:', e);
                    }
                    originalUrl = decodedUrl;
                  }
                } catch (urlError) {
                  console.error(`‚ùå L·ªói x·ª≠ l√Ω URL redirect: ${urlError.message}`);
                }
              }
              
              console.log(`üìù C·∫≠p nh·∫≠t sheet v·ªõi URL g·ªëc: ${originalUrl}`);
              console.log(`üìù URL m·ªõi: ${videoResult.uploadResult.webViewLink}`);
              
              const sheetUpdateResult = await updateSheetCell(
                task.courseId,
                task.sheetIndex,
                task.rowIndex,
                task.cellIndex,
                originalUrl, // URL g·ªëc ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                videoResult.uploadResult.webViewLink, // URL m·ªõi
                task.displayText || videoResult.uploadResult.fileName, // Text hi·ªÉn th·ªã
                task.request // Pass the request object
              );
              
              resultObject.sheetUpdate = {
                success: sheetUpdateResult?.success || false,
                message: sheetUpdateResult?.message || sheetUpdateResult?.error || 'ƒê√£ c·∫≠p nh·∫≠t sheet',
                details: sheetUpdateResult?.updatedCell || null
              };
              
              console.log(`üìù ƒê√£ c·∫≠p nh·∫≠t sheet: ${JSON.stringify(resultObject.sheetUpdate)}`);
            } catch (sheetError) {
              console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t sheet: ${sheetError.message}`);
              resultObject.sheetUpdate = {
                success: false,
                message: `L·ªói c·∫≠p nh·∫≠t sheet: ${sheetError.message}`
              };
            }
          }
        } else {
          resultObject.processedFile = {
            id: videoResult.fileId,
            name: videoResult.fileName,
            path: videoResult.filePath
          };
          console.log(`‚ö†Ô∏è Video ch·ªâ ƒë∆∞·ª£c t·∫£i xu·ªëng, ch∆∞a ƒë∆∞·ª£c upload: ${videoResult.filePath}`);
        }

        task.resolve(resultObject);
        return;
      } catch (videoError) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω video: ${videoError.message}`);
        throw videoError;
      }
    }

    if (chromeResult.success) {
      console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng file b·∫±ng Chrome: ${chromeResult.filePath}`);
      const result = await processAndUploadFile(
        chromeResult.filePath,
        'application/pdf',
        task.fileId,
        task.driveLink,
        task.targetFolderId,
        task.targetFolderName || task.courseName || 'Unknown',
        task.apiKey,
        task.updateSheet,
        task.courseId,
        task.sheetIndex,
        task.rowIndex,
        task.cellIndex,
        task.sheetId,
        task.googleSheetName,
        task.displayText,
        task.request,
        task.startTime,
        task.tempDir,
        task.errorType === "403" ? "403_chrome" : "404_chrome"
      );
      task.resolve(result);
    } else {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i file b·∫±ng Chrome: ${chromeResult.error}`);
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file trong h√†ng ƒë·ª£i: ${error.message}`);
    task.reject(error);
  } finally {
    isProcessing = false;
    processNextInQueue();
  }
}

/**
 * Th√™m file v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω
 */
function addToProcessingQueue(params) {
  return new Promise((resolve, reject) => {
    const task = {
      ...params,
      startTime: Date.now(),
      resolve,
      reject
    };
    
    console.log(`\nüìã Th√™m file v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome:`);
    console.log(`üîç File ID: ${params.fileId}`);
    console.log(`üìÑ T√™n file: ${params.fileName || 'Kh√¥ng c√≥ t√™n'}`);
    console.log(`üìÇ Target folder ID: ${params.targetFolderId || 'M·∫∑c ƒë·ªãnh'}`);
    console.log(`‚ö†Ô∏è Lo·∫°i l·ªói: ${params.errorType}`);
    
    if (params.updateSheet) {
      console.log(`üìù S·∫Ω c·∫≠p nh·∫≠t sheet sau khi x·ª≠ l√Ω`);
    }
    
    processingQueue.push(task);
    processNextInQueue(); // Th·ª≠ x·ª≠ l√Ω ngay n·∫øu kh√¥ng c√≥ file n√†o ƒëang x·ª≠ l√Ω
  });
}

// API Endpoint - POST
export async function POST(request) {
  let tempDir = null;
  const GLOBAL_TIMEOUT = 120 * 60 * 1000;
  const startTime = Date.now();
  
  const timeoutPromise = new Promise((_, reject) => {
    setTimeout(() => {
      reject(new Error(`Qu√° tr√¨nh x·ª≠ l√Ω v∆∞·ª£t qu√° th·ªùi gian cho ph√©p (${GLOBAL_TIMEOUT / 60000} ph√∫t)`));
    }, GLOBAL_TIMEOUT);
  });
  
  try {
    const requestBody = await request.json();
    const { 
      driveLink, 
      folderId, 
      apiKey, 
      courseName, 
      sheetName, 
      isSheetDocument,
      courseId,
      sheetIndex,
      rowIndex,
      cellIndex,
      sheetId,
      googleSheetName,
      updateSheet = false,
      displayText = null,
      useSheetNameDirectly = false,
      skipVideoProcessing = false
    } = requestBody;
    
    if (!driveLink) {
      return NextResponse.json(
        { error: 'Thi·∫øu li√™n k·∫øt Google Drive.' },
        { status: 400 }
      );
    }
    
    const fileId = extractDriveFileId(driveLink);
    if (!fileId) {
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID file t·ª´ URL. Vui l√≤ng ki·ªÉm tra l·∫°i li√™n k·∫øt.' },
        { status: 400 }
      );
    }

    // Ki·ªÉm tra th√¥ng tin file b·∫±ng API upload
    try {
      const fileInfo = await checkFileInfo(fileId);

      // Ki·ªÉm tra n·∫øu file l√† video
      if (fileInfo.success && fileInfo.fileInfo.mimeType && 
          (fileInfo.fileInfo.mimeType.includes('video/') || 
           skipVideoProcessing)) {
        console.log(`üé• Ph√°t hi·ªán file video, b·ªè qua x·ª≠ l√Ω: ${fileInfo.fileInfo.name}`);
        
        // N·∫øu c√≥ y√™u c·∫ßu c·∫≠p nh·∫≠t sheet, th·ª±c hi·ªán c·∫≠p nh·∫≠t v·ªõi link g·ªëc
        let sheetUpdateResult = null;
        if (updateSheet) {
          console.log('File video, c·∫≠p nh·∫≠t sheet v·ªõi link g·ªëc...');
          if (courseId && sheetIndex !== undefined && rowIndex !== undefined && cellIndex !== undefined) {
            sheetUpdateResult = await updateSheetCell(
              courseId,
              sheetIndex,
              rowIndex,
              cellIndex,
              driveLink,
              driveLink, // Gi·ªØ nguy√™n link g·ªëc
              displayText || fileInfo.fileInfo.name,
              request,
              {
                skipProcessing: true,
                originalLink: driveLink,
                processedTime: new Date().toISOString(),
                isVideo: true
              }
            );
          } else if (sheetId && googleSheetName && rowIndex !== undefined && cellIndex !== undefined) {
            sheetUpdateResult = await updateGoogleSheetCell(
              sheetId,
              googleSheetName,
              rowIndex,
              cellIndex,
              displayText || fileInfo.fileInfo.name,
              driveLink, // Gi·ªØ nguy√™n link g·ªëc
              driveLink,
              request,
              {
                skipProcessing: true,
                originalLink: driveLink,
                processedTime: new Date().toISOString(),
                isVideo: true
              }
            );
          }
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return NextResponse.json({
          success: true,
          skipped: true,
          isVideo: true,
          reason: 'File video kh√¥ng c·∫ßn x·ª≠ l√Ω',
          originalFile: {
            id: fileId,
            link: driveLink,
            info: fileInfo.fileInfo
          },
          sheetUpdate: updateSheet ? {
            success: sheetUpdateResult?.success || false,
            message: sheetUpdateResult?.message || sheetUpdateResult?.error || 'Kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t',
            details: sheetUpdateResult?.updatedCell || null
          } : null
        });
      }

      if (fileInfo.success && fileInfo.fileInfo.owners?.[0]?.emailAddress === 'khoahocshare6.0@gmail.com') {
        // X·ª≠ l√Ω c·∫≠p nh·∫≠t sheet n·∫øu c·∫ßn
        let sheetUpdateResult = null;
        if (updateSheet) {
          console.log('File thu·ªôc khoahocshare6.0@gmail.com, c·∫≠p nh·∫≠t sheet v·ªõi tr·∫°ng th√°i b·ªè qua...');
          if (courseId && sheetIndex !== undefined && rowIndex !== undefined && cellIndex !== undefined) {
            sheetUpdateResult = await updateSheetCell(
              courseId,
              sheetIndex,
              rowIndex,
              cellIndex,
              driveLink,
              driveLink, // Gi·ªØ nguy√™n link g·ªëc
              displayText || fileInfo.fileInfo.name,
              request,
              {
                skipProcessing: true,
                originalLink: driveLink,
                processedTime: new Date().toISOString()
              }
            );
          } else if (sheetId && googleSheetName && rowIndex !== undefined && cellIndex !== undefined) {
            sheetUpdateResult = await updateGoogleSheetCell(
              sheetId,
              googleSheetName,
              rowIndex,
              cellIndex,
              displayText || fileInfo.fileInfo.name,
              driveLink, // Gi·ªØ nguy√™n link g·ªëc
              driveLink,
              request,
              {
                skipProcessing: true,
                originalLink: driveLink,
                processedTime: new Date().toISOString()
              }
            );
          }
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return NextResponse.json({
          success: true,
          skipped: true,
          reason: 'File thu·ªôc s·ªü h·ªØu c·ªßa khoahocshare6.0@gmail.com',
          originalFile: {
            id: fileId,
            link: driveLink,
            info: fileInfo.fileInfo
          },
          sheetUpdate: updateSheet ? {
            success: sheetUpdateResult?.success || false,
            message: sheetUpdateResult?.message || sheetUpdateResult?.error || 'Kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t',
            details: sheetUpdateResult?.updatedCell || null
          } : null
        });
      }
    } catch (error) {
      // Ti·∫øp t·ª•c x·ª≠ l√Ω n·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c th√¥ng tin
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng tin file: ${error.message}`);
    }
    
    // X√°c ƒë·ªãnh folder ƒë√≠ch d·ª±a tr√™n th√¥ng tin request tr∆∞·ªõc khi ki·ªÉm tra file
    let targetFolderId = folderId || "1Lt10aHyWp9VtPaImzInE0DmIcbrjJgpN"; // M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
    let targetFolderName = "";

    try {
      console.log(`\nüîÑ Th·ª≠ t·∫£i file tr·ª±c ti·∫øp v·ªõi token download...`);
      
      // T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file
      tempDir = path.join(os.tmpdir(), uuidv4());
      fs.mkdirSync(tempDir, { recursive: true });
      
      try {
        // Th·ª≠ t·∫£i file tr·ª±c ti·∫øp
        const downloadResult = await downloadFromGoogleDrive(fileId);
        
        if (downloadResult.success) {
          console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng file: ${downloadResult.filePath}`);
          console.log(`üìÑ MIME type: ${downloadResult.mimeType}`);
          
          // Ki·ªÉm tra n·∫øu l√† file video
          if (downloadResult.mimeType && downloadResult.mimeType.includes('video/')) {
            console.log(`üé• Ph√°t hi·ªán file video t·ª´ MIME type: ${downloadResult.mimeType}`);
            
            // Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi file video
            return NextResponse.json({
              success: true,
              isVideo: true,
              skipped: true,
              reason: 'File video kh√¥ng c·∫ßn x·ª≠ l√Ω',
              originalFile: {
                id: fileId,
                link: driveLink,
                mimeType: downloadResult.mimeType
              },
              processingTime: Math.round((Date.now() - startTime) / 1000)
            });
          }
          
          // Ti·∫øp t·ª•c x·ª≠ l√Ω file nh∆∞ b√¨nh th∆∞·ªùng
          let processedFilePath;
          
          // Ki·ªÉm tra xem file c√≥ ph·∫£i l√† file b·ªã ch·∫∑n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω kh√¥ng
          const isBlockedFileProcessed = downloadResult.filePath.includes('T√ÄI LI·ªÜU');
          
          if (isBlockedFileProcessed) {
            processedFilePath = downloadResult.filePath;
          } else {
            const processResult = await processFile(downloadResult.filePath, downloadResult.mimeType);
            
            // Ki·ªÉm tra n·∫øu file l√† video
            if (processResult && !processResult.success && processResult.isVideo) {
              console.log(`üé• Ph√°t hi·ªán file video t·ª´ processFile, b·ªè qua x·ª≠ l√Ω...`);
              return NextResponse.json({
                success: true,
                isVideo: true,
                skipped: true,
                reason: 'File video kh√¥ng c·∫ßn x·ª≠ l√Ω',
                originalFile: {
                  id: fileId,
                  link: driveLink
                },
                processingTime: Math.round((Date.now() - startTime) / 1000)
              });
            }
            
            processedFilePath = processResult.processedPath;
            
            // Ki·ªÉm tra v√† x·ª≠ l√Ω n·∫øu processedPath l√† object
            if (typeof processedFilePath === 'object' && processedFilePath !== null) {
              if (processedFilePath.path) {
                processedFilePath = processedFilePath.path;
              } else {
                throw new Error('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n file ƒë√£ x·ª≠ l√Ω');
              }
            }
          }
          
          // Upload file ƒë√£ x·ª≠ l√Ω l√™n Drive
          const uploadResult = await uploadToGoogleDrive(
            processedFilePath,
            path.basename(processedFilePath),
            downloadResult.mimeType,
            targetFolderId,
            courseName
          );
          
          // C·∫≠p nh·∫≠t cell trong sheet
          let sheetUpdateResult = null;
          if (uploadResult.success && updateSheet) {
            if (courseId && sheetIndex !== undefined && rowIndex !== undefined && cellIndex !== undefined) {
              sheetUpdateResult = await updateSheetCell(
                courseId,
                sheetIndex,
                rowIndex,
                cellIndex,
                driveLink, // URL g·ªëc
                uploadResult.webViewLink, // URL m·ªõi
                displayText, // Text hi·ªÉn th·ªã
                request // Pass the request object
              );
            } else if (sheetId && googleSheetName && rowIndex !== undefined && cellIndex !== undefined) {
              sheetUpdateResult = await updateGoogleSheetCell(
                sheetId,
                googleSheetName,
                rowIndex,
                cellIndex,
                displayText || path.basename(processedFilePath),
                uploadResult.webViewLink, // URL m·ªõi
                driveLink, // URL g·ªëc
                request // Pass the request object
              );
            }
          }
          
          return NextResponse.json({
            success: true,
            isFolder: false,
            originalFile: {
              id: fileId,
              link: driveLink
            },
            processedFile: {
              id: uploadResult.fileId,
              name: uploadResult.fileName,
              link: uploadResult.webViewLink
            },
            sheetUpdate: updateSheet ? {
              success: sheetUpdateResult?.success || false,
              message: sheetUpdateResult?.message || sheetUpdateResult?.error || 'Kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t',
              details: sheetUpdateResult?.updatedCell || null
            } : null,
            processingTime: Math.round((Date.now() - startTime) / 1000)
          });
        }
      } catch (downloadError) {
        // X·ª≠ l√Ω l·ªói 403 ngay l·∫≠p t·ª©c
        if (downloadError.message.includes('HTTP 403') || downloadError.message.includes('cannotDownloadFile')) {
          console.log('‚ö†Ô∏è Ph√°t hi·ªán l·ªói 403 - File b·ªã ch·∫∑n download');
          console.log('üåê Chuy·ªÉn sang s·ª≠ d·ª•ng Chrome ƒë·ªÉ t·∫£i file...');
          
          // Th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome
          console.log('\nüìã Th√™m file v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome:');
          console.log(`üîç File ID: ${fileId}`);
          console.log(`üìÑ T√™n file: ${targetFolderName || courseName || 'Unknown'}`);
          console.log(`‚ö†Ô∏è Lo·∫°i l·ªói: 403`);
          
          // Th√™m v√†o h√†ng ƒë·ª£i v√† x·ª≠ l√Ω
          const chromeResult = await addToProcessingQueue({
            fileId,
            fileName: `video_${fileId}.mp4`,
            driveLink,
            targetFolderId: folderId || "1Lt10aHyWp9VtPaImzInE0DmIcbrjJgpN",
            targetFolderName: targetFolderName || courseName || 'Unknown',
            errorType: '403',
            updateSheet,
            courseId,
            sheetIndex,
            rowIndex,
            cellIndex,
            sheetId,
            googleSheetName,
            displayText,
            request
          });
          
          // N·∫øu l√† video, tr·∫£ v·ªÅ k·∫øt qu·∫£ ngay
          if (chromeResult && chromeResult.isVideo) {
            console.log(`üé• Chrome ph√°t hi·ªán file l√† video, tr·∫£ v·ªÅ k·∫øt qu·∫£ video`);
            return NextResponse.json(chromeResult);
          }
          
          // N·∫øu kh√¥ng ph·∫£i video, tr·∫£ v·ªÅ tr·∫°ng th√°i ƒë√£ x·∫øp h√†ng ƒë·ª£i
          return NextResponse.json({ 
            status: 'queued',
            message: 'File ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω Chrome'
          });
        }
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file tr·ª±c ti·∫øp: ${error.message}`);
      return NextResponse.json({ error: `L·ªói khi x·ª≠ l√Ω file tr·ª±c ti·∫øp: ${error.message}` }, { status: 500 });
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file: ${error.message}`);
    return NextResponse.json({ error: `L·ªói khi x·ª≠ l√Ω file: ${error.message}` }, { status: 500 });
  }
}