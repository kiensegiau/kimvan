/**
 * X·ª≠ l√Ω x√≥a watermark t·ª´ PDF
 */
import fs from 'fs';
import path from 'path';
import os from 'os';
import { execSync } from 'child_process';
import { PDFDocument } from 'pdf-lib';
import PDFKit from 'pdfkit';
import sharp from 'sharp';
import { DEFAULT_CONFIG } from './config.js';
import { findGhostscript, cleanupTempFiles, processBatches } from './utils.js';
import { countPdfPagesWithGhostscript, addImageToPdf } from './pdf-service.js';
import { createConvertWorker, createProcessWorker } from './workers.js';

// T·ªëi ∆∞u h√†m ch√≠nh ƒë·ªÉ x√≥a watermark
export async function cleanPdf(inputPath, outputPath, config = DEFAULT_CONFIG) {
  const startTime = Date.now();
  console.log('üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω x√≥a watermark...');
  
  // Ki·ªÉm tra xem sharp c√≥ kh·∫£ d·ª•ng kh√¥ng
  try {
    if (process.env.NODE_ENV === 'production') {
      // C√°c c·∫•u h√¨nh cho m√¥i tr∆∞·ªùng production n·∫øu c·∫ßn
    }
  } catch (error) {
    throw new Error('Th∆∞ vi·ªán x·ª≠ l√Ω h√¨nh ·∫£nh (Sharp) kh√¥ng kh·∫£ d·ª•ng tr√™n m√°y ch·ªß n√†y. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.');
  }
  
  // T√¨m GhostScript m·ªôt l·∫ßn v√† cache k·∫øt qu·∫£
  let gsPath;
  try {
    gsPath = findGhostscript();
  } catch (gsError) {
    throw gsError;
  }

  if (!inputPath) {
    throw new Error('Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o');
  }
  
  outputPath = outputPath || inputPath.replace('.pdf', '_clean.pdf');
  
  if (!fs.existsSync(inputPath)) {
    throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${inputPath}`);
  }
  
  // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
  const stats = fs.statSync(inputPath);
  const fileSizeInMB = stats.size / (1024 * 1024);
  
  // T·∫°o th∆∞ m·ª•c temp hi·ªáu qu·∫£ h∆°n
  const tempDir = path.join(os.tmpdir(), `pdf-watermark-removal-${Date.now()}`);
  fs.mkdirSync(tempDir, { recursive: true });
  
  try {
    // ƒê·∫øm s·ªë trang v·ªõi cache
    console.log('üîç ƒêang ph√¢n t√≠ch s·ªë trang c·ªßa PDF...');
    const numPages = await countPdfPagesWithGhostscript(inputPath, gsPath);
    console.log(`üìÑ Ph√°t hi·ªán ${numPages} trang, ƒëang t√°ch PDF...`);
    
    // T·ªëi ∆∞u bi·∫øn cho s·ªë l∆∞·ª£ng c√¥ng nh√¢n
    const optimalWorkers = Math.min(
      config.maxWorkers,
      Math.max(1, Math.min(os.cpus().length - 1, numPages))
    );
    
    // T√°ch PDF th√†nh t·ª´ng trang - s·ª≠ d·ª•ng t√πy ch·ªçn t·ªëi ∆∞u cho GhostScript
    const gsCommand = `"${gsPath}" -dALLOWPSTRANSPARENCY -dBATCH -dNOPAUSE -q -dNumRenderingThreads=${optimalWorkers} -sDEVICE=pdfwrite -dSAFER ` +
            `-dFirstPage=1 -dLastPage=${numPages} ` +
            `-sOutputFile="${path.join(tempDir, 'page_%d.pdf')}" "${inputPath}"`;
    
    execSync(gsCommand, { stdio: 'pipe' });
    
    // Ki·ªÉm tra k·∫øt qu·∫£ nhanh h∆°n b·∫±ng c√°ch d·ª±a v√†o readdir v√† l·ªçc
    const pdfFiles = fs.readdirSync(tempDir, { 
      withFileTypes: true 
    })
    .filter(entry => entry.isFile() && entry.name.endsWith('.pdf'))
    .map(entry => entry.name);
    
    if (pdfFiles.length === 0) {
      throw new Error('Kh√¥ng th·ªÉ t√°ch PDF th√†nh c√°c trang. GhostScript kh√¥ng t·∫°o ra file n√†o.');
    }
    
    // Chu·∫©n b·ªã danh s√°ch c√¥ng vi·ªác hi·ªáu qu·∫£ h∆°n
    const conversionTasks = [];
    
    // S·ª≠ d·ª•ng c√°ch t·ªëi ∆∞u h∆°n ƒë·ªÉ t·∫°o nhi·ªám v·ª•
    for (let page = 1; page <= numPages; page++) {
      const pdfPath = path.join(tempDir, `page_${page}.pdf`);
      if (fs.existsSync(pdfPath)) {
        conversionTasks.push({
          pdfPath,
          pngPath: path.join(tempDir, `page_${page}.png`),
          page
        });
      }
    }

    if (conversionTasks.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang PDF n√†o ƒë·ªÉ chuy·ªÉn ƒë·ªïi!');
    }

    // Chuy·ªÉn ƒë·ªïi PDF sang PNG theo batch nh·ªè, kh√¥ng ph·∫£i song song to√†n b·ªô
    console.log('üîÑ B∆∞·ªõc 1/3: Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh...');
    const batchSize = config.batchSize || 3; // X·ª≠ l√Ω t·ªëi ƒëa 3 trang c√πng l√∫c ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ
    
    // Chia trang th√†nh c√°c batch nh·ªè h∆°n ƒë·ªÉ x·ª≠ l√Ω
    const convertResults = [];
    for (let i = 0; i < conversionTasks.length; i += batchSize) {
      const currentBatch = conversionTasks.slice(i, i + batchSize);
      const progress = Math.round((i / conversionTasks.length) * 100);
      console.log(`üîÑ Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh: ${progress}% (${i}/${conversionTasks.length} trang)`);
      
      // X·ª≠ l√Ω batch hi·ªán t·∫°i
      const batchPromises = currentBatch.map(task => 
        createConvertWorker(gsPath, task.pdfPath, task.pngPath, task.page, numPages, config.dpi)
      );
      
      const batchResults = await Promise.allSettled(batchPromises);
      convertResults.push(...batchResults);
      
      // Th√∫c ƒë·∫©y GC sau m·ªói batch
      global.gc && global.gc();
      
      // T·∫°m d·ª´ng ƒë·ªÉ cho GC c√≥ c∆° h·ªôi ch·∫°y v√† gi·∫£i ph√≥ng b·ªô nh·ªõ
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    console.log(`üîÑ Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh: 100% (${conversionTasks.length}/${conversionTasks.length} trang)`);
    
    // L·ªçc v√† gi·∫£i ph√≥ng b·ªô nh·ªõ s·ªõm h∆°n
    const successfulConversions = convertResults
      .filter(result => result.status === 'fulfilled')
      .map(result => result.value);
    
    if (successfulConversions.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!');
    }
    
    // X·ª≠ l√Ω c√°c PNG theo t·ª´ng batch nh·ªè
    console.log('üîÑ B∆∞·ªõc 2/3: X·ª≠ l√Ω x√≥a watermark tr√™n h√¨nh ·∫£nh...');
    const processResults = [];
    
    for (let i = 0; i < successfulConversions.length; i += batchSize) {
      const currentBatch = successfulConversions.slice(i, i + batchSize);
      const progress = Math.round((i / successfulConversions.length) * 100);
      console.log(`üîÑ X·ª≠ l√Ω x√≥a watermark: ${progress}% (${i}/${successfulConversions.length} trang)`);
      
      // X·ª≠ l√Ω batch hi·ªán t·∫°i
      const batchPromises = currentBatch.map(conversion => 
        createProcessWorker(conversion.pngPath, conversion.page, numPages, config)
      );
      
      const batchResults = await Promise.allSettled(batchPromises);
      processResults.push(...batchResults);
      
      // Th√∫c ƒë·∫©y GC sau m·ªói batch
      global.gc && global.gc();
      
      // T·∫°m d·ª´ng ƒë·ªÉ cho GC c√≥ c∆° h·ªôi ch·∫°y v√† gi·∫£i ph√≥ng b·ªô nh·ªõ
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    console.log(`üîÑ X·ª≠ l√Ω x√≥a watermark: 100% (${successfulConversions.length}/${successfulConversions.length} trang)`);
    
    // L·ªçc v√† s·∫Øp x·∫øp hi·ªáu qu·∫£ h∆°n
    const successfulProcessing = processResults
      .filter(result => result.status === 'fulfilled')
      .map(result => result.value)
      .sort((a, b) => a.index - b.index);
    
    // L·∫•y danh s√°ch ƒë∆∞·ªùng d·∫´n PNG ƒë√£ x·ª≠ l√Ω
    const processedPngPaths = successfulProcessing.map(result => result.processedPngPath);
    
    if (processedPngPaths.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!');
    }
    
    // Gh√©p c√°c trang PNG th√†nh PDF hi·ªáu qu·∫£ h∆°n
    console.log('üîÑ B∆∞·ªõc 3/3: Gh√©p c√°c trang th√†nh PDF k·∫øt qu·∫£...');
    
    // T·∫°o PDF hi·ªáu qu·∫£ h∆°n
    const pdfDoc = await PDFDocument.create();
    
    // X·ª≠ l√Ω t·ª´ng trang m·ªôt ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ - thay v√¨ song song
    for (let i = 0; i < processedPngPaths.length; i++) {
      const progress = Math.round((i / processedPngPaths.length) * 100);
      if (i % 5 === 0 || i === processedPngPaths.length - 1) { // Log every 5 pages to reduce output
        console.log(`üîÑ T·∫°o PDF: ${progress}% (${i}/${processedPngPaths.length} trang)`);
      }
      
      await addImageToPdf(pdfDoc, processedPngPaths[i], i, processedPngPaths.length, config);
      
      // X√≥a file PNG ƒë√£ x·ª≠ l√Ω ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
      try {
        fs.unlinkSync(processedPngPaths[i]);
        fs.unlinkSync(processedPngPaths[i].replace('_processed.png', '.png'));
      } catch (error) {
        // Ignore error
      }
      
      // Th√∫c ƒë·∫©y GC sau m·ªói trang
      global.gc && global.gc();
    }
    
    // L∆∞u PDF v·ªõi t√πy ch·ªçn n√©n t·ªëi ∆∞u
    console.log('üíæ L∆∞u file PDF k·∫øt qu·∫£...');
    const pdfBytes = await pdfDoc.save({
      useObjectStreams: true,
      addDefaultPage: false
    });
    
    fs.writeFileSync(outputPath, pdfBytes);
    
    // D·ªçn d·∫πp file t·∫°m ngay khi c√≥ th·ªÉ ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
    if (config.cleanupTempFiles) {
      cleanupTempFiles(tempDir);
    }
    
    // Sau khi ho√†n th√†nh
    const endTime = Date.now();
    const processingTime = ((endTime - startTime) / 1000).toFixed(2);
    console.log(`‚úÖ Ho√†n th√†nh x·ª≠ l√Ω trong ${processingTime} gi√¢y`);
    
    return { 
      success: true, 
      outputPath, 
      processingTime,
      originalSize: fileSizeInMB.toFixed(2) + ' MB',
      processedSize: fs.existsSync(outputPath) ? (fs.statSync(outputPath).size / (1024 * 1024)).toFixed(2) + ' MB' : 'Unknown'
    };
  } catch (error) {
    console.log(`‚ùå L·ªói: ${error.message}`);
    
    // D·ªçn d·∫πp file t·∫°m
    try {
      cleanupTempFiles(tempDir);
    } catch (cleanupError) {
      // Ignore error
    }
    
    throw error;
  }
}

/**
 * X·ª≠ l√Ω m·ªôt h√¨nh ·∫£nh ƒë·ªÉ lo·∫°i b·ªè watermark
 * @param {string} inputPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë·∫ßu v√†o
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
 * @param {Object} config - C·∫•u h√¨nh x·ª≠ l√Ω watermark
 * @returns {Promise<boolean>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function processImage(inputPath, outputPath, config = DEFAULT_CONFIG) {
  try {
    // ƒê·ªçc h√¨nh ·∫£nh
    const image = sharp(inputPath);
    const metadata = await image.metadata();
    
    if (config.processCenter) {
      // X·ª≠ l√Ω v√πng trung t√¢m
      const centerX = Math.floor(metadata.width * 0.1);
      const centerY = Math.floor(metadata.height * 0.1);
      const centerWidth = Math.floor(metadata.width * config.centerSize);
      const centerHeight = Math.floor(metadata.height * config.centerSize);
      
      const center = await image
        .clone()
        .extract({
          left: centerX,
          top: centerY,
          width: centerWidth,
          height: centerHeight
        })
        .modulate({
          brightness: 1 + (15 / 100),  // C·ªë ƒë·ªãnh gi√° tr·ªã th·∫•p
        })
        .linear(
          1 + (25 / 100),  // C·ªë ƒë·ªãnh gi√° tr·ªã v·ª´a ph·∫£i
          -(25 / 3)
        )
        .toBuffer();
      
      let processedCenter = sharp(center);
      if (config.threshold > 0 && !config.keepColors) {
        processedCenter = processedCenter.threshold(config.threshold * 100);
      }
      
      const processedCenterBuffer = await processedCenter.toBuffer();
      
      await sharp(inputPath)
        .composite([{
          input: processedCenterBuffer,
          left: centerX,
          top: centerY
        }])
        .toFile(outputPath);
    } else {
      // X·ª≠ l√Ω to√†n b·ªô h√¨nh ·∫£nh v·ªõi c√°ch ti·∫øp c·∫≠n ƒë∆°n gi·∫£n h∆°n
      // Gi·∫£m s·ªë b∆∞·ªõc x·ª≠ l√Ω ƒë·ªÉ tr√°nh m·∫•t m√†u
      
      // C√°ch ti·∫øp c·∫≠n ƒë∆°n gi·∫£n: Ch·ªâ s·ª≠ d·ª•ng brightness v√† contrast nh·∫π
      // Tr√°nh to√†n b·ªô c√°c bi·∫øn ƒë·ªïi m√†u s·∫Øc ph·ª©c t·∫°p
      let processedImage = image
        .modulate({
          brightness: 1 + (15 / 100),  // Gi·∫£m xu·ªëng m·ª©c nh·∫π nh√†ng (15%)
        })
        .linear(
          1 + (25 / 100),  // M·ª©c ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π (25%)
          -(25 / 3)
        );
      
      // Ch·ªâ √°p d·ª•ng sharpen nh·∫π nh√†ng thay v√¨ nhi·ªÅu b∆∞·ªõc x·ª≠ l√Ω
      processedImage = processedImage.sharpen({
        sigma: 0.5,  // Sharpen nh·∫π
        m1: 0.3,
        m2: 0.2
      });
      
      await processedImage.toFile(outputPath);
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: ${error.message}`);
    throw error;
  }
}

/**
 * Th√™m h√¨nh n·ªÅn t√πy ch·ªânh v√†o PDF
 * @param {string} pdfPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
 * @param {string} backgroundPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh n·ªÅn
 * @param {Object} config - C·∫•u h√¨nh
 * @returns {Promise<string>} - ƒê∆∞·ªùng d·∫´n ƒë·∫øn PDF ƒë√£ x·ª≠ l√Ω
 */
export async function addCustomBackground(pdfPath, backgroundPath, config = DEFAULT_CONFIG) {
  try {
    if (!fs.existsSync(pdfPath)) {
      throw new Error(`File PDF kh√¥ng t·ªìn t·∫°i: ${pdfPath}`);
    }
    
    if (!fs.existsSync(backgroundPath)) {
      throw new Error(`File h√¨nh n·ªÅn kh√¥ng t·ªìn t·∫°i: ${backgroundPath}`);
    }
    
    const outputPath = pdfPath.replace('.pdf', '_with_bg.pdf');
    
    // ƒê·ªçc PDF g·ªëc
    const pdfBytes = fs.readFileSync(pdfPath);
    const pdfDoc = await PDFDocument.load(pdfBytes);
    
    // ƒê·ªçc h√¨nh n·ªÅn
    let backgroundImage;
    if (backgroundPath.toLowerCase().endsWith('.png')) {
      const backgroundData = fs.readFileSync(backgroundPath);
      backgroundImage = await pdfDoc.embedPng(backgroundData);
    } else if (backgroundPath.toLowerCase().endsWith('.jpg') || backgroundPath.toLowerCase().endsWith('.jpeg')) {
      const backgroundData = fs.readFileSync(backgroundPath);
      backgroundImage = await pdfDoc.embedJpg(backgroundData);
    } else {
      throw new Error('ƒê·ªãnh d·∫°ng h√¨nh n·ªÅn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng PNG ho·∫∑c JPG.');
    }
    
    // L·∫•y k√≠ch th∆∞·ªõc h√¨nh n·ªÅn
    const bgDimensions = backgroundImage.size();
    
    // X·ª≠ l√Ω t·ª´ng trang PDF
    const pages = pdfDoc.getPages();
    for (const page of pages) {
      const { width, height } = page.getSize();
      
      // T√≠nh k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ ƒë·ªÉ h√¨nh n·ªÅn v·ª´a v·ªõi trang
      const scale = Math.min(width / bgDimensions.width, height / bgDimensions.height);
      const bgWidth = bgDimensions.width * scale;
      const bgHeight = bgDimensions.height * scale;
      
      // ƒê·∫∑t h√¨nh n·ªÅn ·ªü gi·ªØa trang
      const xOffset = (width - bgWidth) / 2;
      const yOffset = (height - bgHeight) / 2;
      
      // V·∫Ω h√¨nh n·ªÅn
      page.drawImage(backgroundImage, {
        x: xOffset,
        y: yOffset,
        width: bgWidth,
        height: bgHeight,
        opacity: config.backgroundOpacity || 0.3
      });
    }
    
    // L∆∞u PDF ƒë√£ x·ª≠ l√Ω
    const modifiedPdfBytes = await pdfDoc.save();
    fs.writeFileSync(outputPath, modifiedPdfBytes);
    
    return outputPath;
  } catch (error) {
    console.error(`‚ùå L·ªói th√™m h√¨nh n·ªÅn: ${error.message}`);
    throw error;
  }
}

/**
 * T·∫°o file PDF t·ª´ c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω v·ªõi h√¨nh n·ªÅn t√πy ch·ªânh
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ x·ª≠ l√Ω
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n l∆∞u file PDF
 * @param {Object} config - C·∫•u h√¨nh
 * @returns {Promise<boolean>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function createPDFFromProcessedImages(images, outputPath, config = DEFAULT_CONFIG) {
  try {
    console.log(`üìë B·∫Øt ƒë·∫ßu t·∫°o PDF v·ªõi h√¨nh n·ªÅn t·ª´ ${images.length} ·∫£nh...`);
    
    // T·∫°o PDF m·ªõi
    const pdfDoc = await PDFDocument.create();
    
    // X·ª≠ l√Ω t·ª´ng ·∫£nh
    for (let i = 0; i < images.length; i++) {
      const imagePath = images[i];
      
      if (i % 5 === 0 || i === images.length - 1) {
        console.log(`üîÑ T·∫°o PDF: ${Math.round((i / images.length) * 100)}% (${i}/${images.length} trang)`);
      }
      
      // Th√™m ·∫£nh v√†o PDF v·ªõi h√¨nh n·ªÅn
      await addImageToPdf(pdfDoc, imagePath, i, images.length, config);
    }
    
    // L∆∞u PDF
    const pdfBytes = await pdfDoc.save({
      useObjectStreams: true,
      addDefaultPage: false
    });
    
    fs.writeFileSync(outputPath, pdfBytes);
    
    console.log(`‚úÖ ƒê√£ t·∫°o PDF th√†nh c√¥ng: ${outputPath}`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫°o PDF t·ª´ ·∫£nh: ${error.message}`);
    throw error;
  }
}

/**
 * T·∫°o file PDF t·ª´ c√°c ·∫£nh (kh√¥ng c·∫ßn th√™m h√¨nh n·ªÅn)
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n l∆∞u file PDF
 * @returns {Promise<boolean>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function createPDFFromRawImages(images, outputPath) {
  try {
    console.log(`üìë B·∫Øt ƒë·∫ßu t·∫°o PDF t·ª´ ${images.length} ·∫£nh...`);
    
    // S·ª≠ d·ª•ng PDFKit ƒë·ªÉ t·∫°o PDF
    const doc = new PDFKit({
      autoFirstPage: false,
      margin: 0,
      bufferPages: true
    });
    
    // T·∫°o write stream v√† promise ƒë·ªÉ theo d√µi khi n√†o ho√†n th√†nh
    const writeStream = fs.createWriteStream(outputPath);
    const streamFinished = new Promise((resolve, reject) => {
      writeStream.on('finish', resolve);
      writeStream.on('error', reject);
    });
    
    doc.pipe(writeStream);
    
    // X·ª≠ l√Ω t·ª´ng ·∫£nh
    for (const imagePath of images.sort((a, b) => {
      try {
        const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
        const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
        return pageA - pageB;
      } catch (error) {
        return 0;
      }
    })) {
      try {
        let imageBuffer = fs.readFileSync(imagePath);
        
        // N·∫øu l√† WebP, chuy·ªÉn sang PNG
        if (imagePath.endsWith('.webp')) {
          console.log(`üîÑ Chuy·ªÉn ƒë·ªïi WebP sang PNG...`);
          imageBuffer = await sharp(imageBuffer).png().toBuffer();
        }
        
        const img = doc.openImage(imageBuffer);
        doc.addPage({ size: [img.width, img.height] });
        doc.image(img, 0, 0);
        console.log(`‚úÖ ƒê√£ th√™m trang ${path.basename(imagePath)}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh ${imagePath}: ${error.message}`);
      }
    }
    
    // K·∫øt th√∫c document v√† ƒë·ª£i stream ho√†n th√†nh
    doc.end();
    await streamFinished;
    
    console.log(`‚úÖ ƒê√£ t·∫°o PDF th√†nh c√¥ng: ${outputPath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫°o PDF: ${error.message}`);
    throw error;
  }
} 