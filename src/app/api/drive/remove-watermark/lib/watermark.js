/**
 * X·ª≠ l√Ω x√≥a watermark t·ª´ PDF
 */
import fs from 'fs';
import path from 'path';
import os from 'os';
import { execSync } from 'child_process';
import { PDFDocument } from 'pdf-lib';
import { DEFAULT_CONFIG } from './config';
import { findGhostscript, cleanupTempFiles, processBatches } from './utils';
import { countPdfPagesWithGhostscript, addImageToPdf } from './pdf-service';
import { createConvertWorker, createProcessWorker } from './workers';

// T·ªëi ∆∞u h√†m ch√≠nh ƒë·ªÉ x√≥a watermark
export async function cleanPdf(inputPath, outputPath, config = DEFAULT_CONFIG) {
  const startTime = Date.now();
  console.log('üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω x√≥a watermark...');
  
  // Ki·ªÉm tra xem sharp c√≥ kh·∫£ d·ª•ng kh√¥ng
  let sharp;
  try {
    sharp = require('sharp');
    
    if (process.env.NODE_ENV === 'production') {
      // C√°c c·∫•u h√¨nh cho m√¥i tr∆∞·ªùng production n·∫øu c·∫ßn
    }
  } catch (error) {
    throw new Error('Th∆∞ vi·ªán x·ª≠ l√Ω h√¨nh ·∫£nh (Sharp) kh√¥ng kh·∫£ d·ª•ng tr√™n m√°y ch·ªß n√†y. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.');
  }
  
  // T√¨m GhostScript m·ªôt l·∫ßn v√† cache k·∫øt qu·∫£
  let gsPath;
  try {
    gsPath = findGhostscript();
  } catch (gsError) {
    throw gsError;
  }

  if (!inputPath) {
    throw new Error('Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o');
  }
  
  outputPath = outputPath || inputPath.replace('.pdf', '_clean.pdf');
  
  if (!fs.existsSync(inputPath)) {
    throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${inputPath}`);
  }
  
  // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
  const stats = fs.statSync(inputPath);
  const fileSizeInMB = stats.size / (1024 * 1024);
  
  // T·∫°o th∆∞ m·ª•c temp hi·ªáu qu·∫£ h∆°n
  const tempDir = path.join(os.tmpdir(), `pdf-watermark-removal-${Date.now()}`);
  fs.mkdirSync(tempDir, { recursive: true });
  
  try {
    // ƒê·∫øm s·ªë trang v·ªõi cache
    console.log('üîç ƒêang ph√¢n t√≠ch s·ªë trang c·ªßa PDF...');
    const numPages = await countPdfPagesWithGhostscript(inputPath, gsPath);
    console.log(`üìÑ Ph√°t hi·ªán ${numPages} trang, ƒëang t√°ch PDF...`);
    
    // T·ªëi ∆∞u bi·∫øn cho s·ªë l∆∞·ª£ng c√¥ng nh√¢n
    const optimalWorkers = Math.min(
      config.maxWorkers,
      Math.max(1, Math.min(os.cpus().length - 1, numPages))
    );
    
    // T√°ch PDF th√†nh t·ª´ng trang - s·ª≠ d·ª•ng t√πy ch·ªçn t·ªëi ∆∞u cho GhostScript
    const gsCommand = `"${gsPath}" -dALLOWPSTRANSPARENCY -dBATCH -dNOPAUSE -q -dNumRenderingThreads=${optimalWorkers} -sDEVICE=pdfwrite -dSAFER ` +
            `-dFirstPage=1 -dLastPage=${numPages} ` +
            `-sOutputFile="${path.join(tempDir, 'page_%d.pdf')}" "${inputPath}"`;
    
    execSync(gsCommand, { stdio: 'pipe' });
    
    // Ki·ªÉm tra k·∫øt qu·∫£ nhanh h∆°n b·∫±ng c√°ch d·ª±a v√†o readdir v√† l·ªçc
    const pdfFiles = fs.readdirSync(tempDir, { 
      withFileTypes: true 
    })
    .filter(entry => entry.isFile() && entry.name.endsWith('.pdf'))
    .map(entry => entry.name);
    
    if (pdfFiles.length === 0) {
      throw new Error('Kh√¥ng th·ªÉ t√°ch PDF th√†nh c√°c trang. GhostScript kh√¥ng t·∫°o ra file n√†o.');
    }
    
    // Chu·∫©n b·ªã danh s√°ch c√¥ng vi·ªác hi·ªáu qu·∫£ h∆°n
    const conversionTasks = [];
    
    // S·ª≠ d·ª•ng c√°ch t·ªëi ∆∞u h∆°n ƒë·ªÉ t·∫°o nhi·ªám v·ª•
    for (let page = 1; page <= numPages; page++) {
      const pdfPath = path.join(tempDir, `page_${page}.pdf`);
      if (fs.existsSync(pdfPath)) {
        conversionTasks.push({
          pdfPath,
          pngPath: path.join(tempDir, `page_${page}.png`),
          page
        });
      }
    }

    if (conversionTasks.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang PDF n√†o ƒë·ªÉ chuy·ªÉn ƒë·ªïi!');
    }

    // Chuy·ªÉn ƒë·ªïi PDF sang PNG theo batch nh·ªè, kh√¥ng ph·∫£i song song to√†n b·ªô
    console.log('üîÑ B∆∞·ªõc 1/3: Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh...');
    const batchSize = config.batchSize || 3; // X·ª≠ l√Ω t·ªëi ƒëa 3 trang c√πng l√∫c ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ
    
    // Chia trang th√†nh c√°c batch nh·ªè h∆°n ƒë·ªÉ x·ª≠ l√Ω
    const convertResults = [];
    for (let i = 0; i < conversionTasks.length; i += batchSize) {
      const currentBatch = conversionTasks.slice(i, i + batchSize);
      const progress = Math.round((i / conversionTasks.length) * 100);
      console.log(`üîÑ Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh: ${progress}% (${i}/${conversionTasks.length} trang)`);
      
      // X·ª≠ l√Ω batch hi·ªán t·∫°i
      const batchPromises = currentBatch.map(task => 
        createConvertWorker(gsPath, task.pdfPath, task.pngPath, task.page, numPages, config.dpi)
      );
      
      const batchResults = await Promise.allSettled(batchPromises);
      convertResults.push(...batchResults);
      
      // Th√∫c ƒë·∫©y GC sau m·ªói batch
      global.gc && global.gc();
      
      // T·∫°m d·ª´ng ƒë·ªÉ cho GC c√≥ c∆° h·ªôi ch·∫°y v√† gi·∫£i ph√≥ng b·ªô nh·ªõ
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    console.log(`üîÑ Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh: 100% (${conversionTasks.length}/${conversionTasks.length} trang)`);
    
    // L·ªçc v√† gi·∫£i ph√≥ng b·ªô nh·ªõ s·ªõm h∆°n
    const successfulConversions = convertResults
      .filter(result => result.status === 'fulfilled')
      .map(result => result.value);
    
    if (successfulConversions.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!');
    }
    
    // X·ª≠ l√Ω c√°c PNG theo t·ª´ng batch nh·ªè
    console.log('üîÑ B∆∞·ªõc 2/3: X·ª≠ l√Ω x√≥a watermark tr√™n h√¨nh ·∫£nh...');
    const processResults = [];
    
    for (let i = 0; i < successfulConversions.length; i += batchSize) {
      const currentBatch = successfulConversions.slice(i, i + batchSize);
      const progress = Math.round((i / successfulConversions.length) * 100);
      console.log(`üîÑ X·ª≠ l√Ω x√≥a watermark: ${progress}% (${i}/${successfulConversions.length} trang)`);
      
      // X·ª≠ l√Ω batch hi·ªán t·∫°i
      const batchPromises = currentBatch.map(conversion => 
        createProcessWorker(conversion.pngPath, conversion.page, numPages, config)
      );
      
      const batchResults = await Promise.allSettled(batchPromises);
      processResults.push(...batchResults);
      
      // Th√∫c ƒë·∫©y GC sau m·ªói batch
      global.gc && global.gc();
      
      // T·∫°m d·ª´ng ƒë·ªÉ cho GC c√≥ c∆° h·ªôi ch·∫°y v√† gi·∫£i ph√≥ng b·ªô nh·ªõ
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    console.log(`üîÑ X·ª≠ l√Ω x√≥a watermark: 100% (${successfulConversions.length}/${successfulConversions.length} trang)`);
    
    // L·ªçc v√† s·∫Øp x·∫øp hi·ªáu qu·∫£ h∆°n
    const successfulProcessing = processResults
      .filter(result => result.status === 'fulfilled')
      .map(result => result.value)
      .sort((a, b) => a.index - b.index);
    
    // L·∫•y danh s√°ch ƒë∆∞·ªùng d·∫´n PNG ƒë√£ x·ª≠ l√Ω
    const processedPngPaths = successfulProcessing.map(result => result.processedPngPath);
    
    if (processedPngPaths.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!');
    }
    
    // Gh√©p c√°c trang PNG th√†nh PDF hi·ªáu qu·∫£ h∆°n
    console.log('üîÑ B∆∞·ªõc 3/3: Gh√©p c√°c trang th√†nh PDF k·∫øt qu·∫£...');
    
    // T·∫°o PDF hi·ªáu qu·∫£ h∆°n
    const pdfDoc = await PDFDocument.create();
    
    // X·ª≠ l√Ω t·ª´ng trang m·ªôt ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ - thay v√¨ song song
    for (let i = 0; i < processedPngPaths.length; i++) {
      const progress = Math.round((i / processedPngPaths.length) * 100);
      if (i % 5 === 0 || i === processedPngPaths.length - 1) { // Log every 5 pages to reduce output
        console.log(`üîÑ T·∫°o PDF: ${progress}% (${i}/${processedPngPaths.length} trang)`);
      }
      
      await addImageToPdf(pdfDoc, processedPngPaths[i], i, processedPngPaths.length, config);
      
      // X√≥a file PNG ƒë√£ x·ª≠ l√Ω ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
      try {
        fs.unlinkSync(processedPngPaths[i]);
        fs.unlinkSync(processedPngPaths[i].replace('_processed.png', '.png'));
      } catch (error) {
        // Ignore error
      }
      
      // Th√∫c ƒë·∫©y GC sau m·ªói trang
      global.gc && global.gc();
    }
    
    // L∆∞u PDF v·ªõi t√πy ch·ªçn n√©n t·ªëi ∆∞u
    console.log('üíæ L∆∞u file PDF k·∫øt qu·∫£...');
    const pdfBytes = await pdfDoc.save({
      useObjectStreams: true,
      addDefaultPage: false
    });
    
    fs.writeFileSync(outputPath, pdfBytes);
    
    // D·ªçn d·∫πp file t·∫°m ngay khi c√≥ th·ªÉ ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
    if (config.cleanupTempFiles) {
      cleanupTempFiles(tempDir);
    }
    
    // Sau khi ho√†n th√†nh
    const endTime = Date.now();
    const processingTime = ((endTime - startTime) / 1000).toFixed(2);
    console.log(`‚úÖ Ho√†n th√†nh x·ª≠ l√Ω trong ${processingTime} gi√¢y`);
    
    return { 
      success: true, 
      outputPath, 
      processingTime,
      originalSize: fileSizeInMB.toFixed(2) + ' MB',
      processedSize: fs.existsSync(outputPath) ? (fs.statSync(outputPath).size / (1024 * 1024)).toFixed(2) + ' MB' : 'Unknown'
    };
  } catch (error) {
    console.log(`‚ùå L·ªói: ${error.message}`);
    
    // D·ªçn d·∫πp file t·∫°m
    try {
      cleanupTempFiles(tempDir);
    } catch (cleanupError) {
      // Ignore error
    }
    
    throw error;
  }
} 