/**
 * X·ª≠ l√Ω x√≥a watermark t·ª´ PDF
 */
import fs from 'fs';
import path from 'path';
import os from 'os';
import { execSync } from 'child_process';
import { PDFDocument } from 'pdf-lib';
import PDFKit from 'pdfkit';
import sharp from 'sharp';
import { DEFAULT_CONFIG } from './config.js';
import { findGhostscript, cleanupTempFiles, processBatches, forceGarbageCollection, optimizePerformance } from './utils.js';
import { countPdfPagesWithGhostscript, addImageToPdf } from './pdf-service.js';
import { createConvertWorker, createProcessWorker } from './workers.js';

// Flag ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ k·∫øt n·ªëi ƒë·∫øn MongoDB trong thread ch√≠nh
let mainThreadConnected = false;

// T·ªëi ∆∞u h√†m ch√≠nh ƒë·ªÉ x√≥a watermark
export async function cleanPdf(inputPath, outputPath, config = DEFAULT_CONFIG) {
  const startTime = Date.now();
  let tempDir = null;
  let gsPath = null;
  
  // TƒÉng th·ªùi gian ch·ªù t·ªëi ƒëa l√™n 1 gi·ªù
  const maxProcessingTime = 3600000; // 1 gi·ªù t√≠nh b·∫±ng mili gi√¢y
  
  console.log('üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω x√≥a watermark...');
  
  try {
    // Ki·ªÉm tra xem sharp c√≥ kh·∫£ d·ª•ng kh√¥ng
    try {
      if (process.env.NODE_ENV === 'production') {
        // C√°c c·∫•u h√¨nh cho m√¥i tr∆∞·ªùng production n·∫øu c·∫ßn
      }
    } catch (error) {
      throw new Error('Th∆∞ vi·ªán x·ª≠ l√Ω h√¨nh ·∫£nh (Sharp) kh√¥ng kh·∫£ d·ª•ng tr√™n m√°y ch·ªß n√†y. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.');
    }
    
    // T√¨m GhostScript m·ªôt l·∫ßn v√† cache k·∫øt qu·∫£
    try {
      gsPath = await findGhostscript();
    } catch (gsError) {
      throw gsError;
    }

    if (!inputPath) {
      throw new Error('Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o');
    }
    
    outputPath = outputPath || inputPath.replace('.pdf', '_clean.pdf');
    
    if (!fs.existsSync(inputPath)) {
      throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${inputPath}`);
    }
    
    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
    let stats;
    try {
      stats = fs.statSync(inputPath);
    } catch (statError) {
      throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin file: ${statError.message}`);
    }
    
    const fileSizeInMB = stats.size / (1024 * 1024);
    console.log(`üìä K√≠ch th∆∞·ªõc file: ${fileSizeInMB.toFixed(2)} MB`);
    
    // T·ªëi ∆∞u h√≥a c·∫•u h√¨nh d·ª±a tr√™n t√†i nguy√™n h·ªá th·ªëng
    const optimizedConfig = optimizePerformance(config);
    
    // T·∫°o th∆∞ m·ª•c temp hi·ªáu qu·∫£ h∆°n
    tempDir = path.join(os.tmpdir(), `pdf-watermark-removal-${Date.now()}`);
    try {
      fs.mkdirSync(tempDir, { recursive: true });
    } catch (mkdirError) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c t·∫°m: ${mkdirError.message}`);
    }
    
    // ƒê·∫øm s·ªë trang v·ªõi cache
    console.log('üîç ƒêang ph√¢n t√≠ch s·ªë trang c·ªßa PDF...');
    let numPages;
    try {
      numPages = await countPdfPagesWithGhostscript(inputPath, gsPath);
    } catch (countError) {
      throw new Error(`Kh√¥ng th·ªÉ ƒë·∫øm s·ªë trang PDF: ${countError.message}`);
    }
    
    console.log(`üìÑ Ph√°t hi·ªán ${numPages} trang, ƒëang t√°ch PDF...`);
    
    // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng worker t·ªëi ∆∞u d·ª±a tr√™n c·∫•u h√¨nh
    let optimalWorkers;
    
    // Ch·∫ø ƒë·ªô Ultra Performance cho h·ªá th·ªëng RAM cao
    if (optimizedConfig.ultra) {
      // V·ªõi ch·∫ø ƒë·ªô Ultra, s·ª≠ d·ª•ng nhi·ªÅu worker h∆°n v√† kh√¥ng gi·ªõi h·∫°n qu√° m·ª©c
      const maxPossibleWorkers = Math.min(numPages, optimizedConfig.maxWorkers);
      optimalWorkers = maxPossibleWorkers;
      console.log(`üî• CH·∫æ ƒê·ªò ULTRA: S·ª≠ d·ª•ng ${optimalWorkers} worker(s) ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô t·ªëi ƒëa`);
    } else if (optimizedConfig.highPerformanceMode) {
      // Ch·∫ø ƒë·ªô hi·ªáu su·∫•t cao
      optimalWorkers = Math.min(optimizedConfig.maxWorkers, numPages);
      console.log(`üß† S·ª≠ d·ª•ng ${optimalWorkers} worker(s) ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t cao`);
    } else {
      // Ch·∫ø ƒë·ªô c√¢n b·∫±ng
      optimalWorkers = Math.min(
        optimizedConfig.maxWorkers,
        Math.max(1, Math.min(Math.max(1, os.cpus().length - 2), Math.min(numPages, 2)))
      );
      console.log(`üß† S·ª≠ d·ª•ng ${optimalWorkers} worker(s) ƒë·ªÉ c√¢n b·∫±ng hi·ªáu su·∫•t v√† ·ªïn ƒë·ªãnh`);
    }
    
    // T√°ch PDF th√†nh t·ª´ng trang - s·ª≠ d·ª•ng t√πy ch·ªçn t·ªëi ∆∞u cho GhostScript
    const gsCommand = `"${gsPath}" -dALLOWPSTRANSPARENCY -dBATCH -dNOPAUSE -q -dNumRenderingThreads=${optimizedConfig.gsParallel || optimalWorkers} -sDEVICE=pdfwrite -dSAFER ` +
            `-dFirstPage=1 -dLastPage=${numPages} ` +
            `-sOutputFile="${path.join(tempDir, 'page_%d.pdf')}" "${inputPath}"`;
    
    try {
      execSync(gsCommand, { stdio: 'pipe' });
    } catch (gsError) {
      throw new Error(`L·ªói khi t√°ch PDF: ${gsError.message}`);
    }
    
    // Gi·∫£i ph√≥ng b·ªô nh·ªõ sau khi t√°ch PDF
    forceGarbageCollection();
    
    // Ki·ªÉm tra k·∫øt qu·∫£ nhanh h∆°n b·∫±ng c√°ch d·ª±a v√†o readdir v√† l·ªçc
    let pdfFiles;
    try {
      pdfFiles = fs.readdirSync(tempDir, { 
        withFileTypes: true 
      })
      .filter(entry => entry.isFile() && entry.name.endsWith('.pdf'))
      .map(entry => entry.name);
    } catch (readError) {
      throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc c√°c file PDF ƒë√£ t√°ch: ${readError.message}`);
    }
    
    if (pdfFiles.length === 0) {
      throw new Error('Kh√¥ng th·ªÉ t√°ch PDF th√†nh c√°c trang. GhostScript kh√¥ng t·∫°o ra file n√†o.');
    }
    
    // Chu·∫©n b·ªã danh s√°ch c√¥ng vi·ªác hi·ªáu qu·∫£ h∆°n
    const conversionTasks = [];
    
    // S·ª≠ d·ª•ng c√°ch t·ªëi ∆∞u h∆°n ƒë·ªÉ t·∫°o nhi·ªám v·ª•
    for (let page = 1; page <= numPages; page++) {
      const pdfPath = path.join(tempDir, `page_${page}.pdf`);
      if (fs.existsSync(pdfPath)) {
        conversionTasks.push({
          pdfPath,
          pngPath: path.join(tempDir, `page_${page}.png`),
          page
        });
      }
    }

    if (conversionTasks.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang PDF n√†o ƒë·ªÉ chuy·ªÉn ƒë·ªïi!');
    }

    // Chuy·ªÉn ƒë·ªïi PDF sang PNG theo batch nh·ªè, kh√¥ng ph·∫£i song song to√†n b·ªô
    console.log('üîÑ B∆∞·ªõc 1/3: Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh...');
    
    // S·ª≠ d·ª•ng batchSize t·ª´ c·∫•u h√¨nh ƒë√£ t·ªëi ∆∞u
    const batchSize = optimizedConfig.batchSize || Math.min(config.batchSize || 3, 2);
    
    // Chia trang th√†nh c√°c batch nh·ªè h∆°n ƒë·ªÉ x·ª≠ l√Ω
    const convertResults = [];
    
    // Ch·∫ø ƒë·ªô Ultra Performance cho h·ªá th·ªëng RAM cao
    if (optimizedConfig.ultra) {
      // Gi·∫£m k√≠ch th∆∞·ªõc batch xu·ªëng c√≤n 4 trang thay v√¨ 9 ƒë·ªÉ tr√°nh timeout
      const actualBatchSize = Math.min(batchSize, 4);
      console.log(`üöÄ Ch·∫ø ƒë·ªô ULTRA: X·ª≠ l√Ω t·ª´ng batch ${actualBatchSize} trang ƒë·ªÉ tr√°nh timeout (th·ªùi gian ch·ªù t·ªëi ƒëa: 1 gi·ªù)`);
      
      // X·ª≠ l√Ω nhi·ªÅu batch c√πng l√∫c
      const numBatches = Math.ceil(conversionTasks.length / actualBatchSize);
      const batches = [];
      
      for (let i = 0; i < numBatches; i++) {
        const startIdx = i * actualBatchSize;
        const endIdx = Math.min(startIdx + actualBatchSize, conversionTasks.length);
        batches.push(conversionTasks.slice(startIdx, endIdx));
      }
      
      console.log(`üß© ƒê√£ chia th√†nh ${numBatches} batch ƒë·ªÉ x·ª≠ l√Ω`);
      
      try {
        let processedCount = 0;
        
        // X·ª≠ l√Ω t·ª´ng batch m·ªôt thay v√¨ song song
        for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
          const batch = batches[batchIndex];
          // Th√™m log ƒë·ªÉ debug
          console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω batch ${batchIndex + 1}/${batches.length} (${batch.length} trang)`);
          
          const batchTasks = batch.map(task => 
            createConvertWorker(gsPath, task.pdfPath, task.pngPath, task.page, numPages, optimizedConfig.dpi)
          );
          
          try {
            // Thi·∫øt l·∫≠p timeout d√†i h∆°n cho x·ª≠ l√Ω batch
            const batchPromise = Promise.allSettled(batchTasks);
            
            // T·∫°o timeout promise ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ch·ªù qu√° l√¢u
            const timeoutPromise = new Promise((resolve) => {
              setTimeout(() => {
                resolve('timeout');
              }, maxProcessingTime);
            });
            
            // Ch·∫°y v·ªõi race ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã treo v√¥ th·ªùi h·∫°n
            const raceResult = await Promise.race([batchPromise, timeoutPromise]);
            
            // Ki·ªÉm tra n·∫øu b·ªã timeout
            const batchResults = raceResult === 'timeout' 
              ? batch.map(() => ({ status: 'rejected', reason: new Error('X·ª≠ l√Ω batch v∆∞·ª£t qu√° th·ªùi gian t·ªëi ƒëa') }))
              : raceResult;
            
            // X√≥a c√°c t·ªáp PDF ƒë√£ x·ª≠ l√Ω ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
            for (const task of batch) {
              try {
                if (fs.existsSync(task.pdfPath)) {
                  fs.unlinkSync(task.pdfPath);
                }
              } catch (unlinkError) {
                console.debug(`Kh√¥ng th·ªÉ x√≥a file PDF t·∫°m: ${unlinkError.message}`);
              }
            }
            
            processedCount += batch.length;
            console.log(`üîÑ Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh: ${Math.round((processedCount / conversionTasks.length) * 100)}% (${processedCount}/${conversionTasks.length} trang)`);
            
            // Th√™m k·∫øt qu·∫£ v√†o m·∫£ng k·∫øt qu·∫£ chung
            convertResults.push(...batchResults);
            
            // Th√∫c ƒë·∫©y GC sau m·ªói batch
            forceGarbageCollection();
            
            // TƒÉng th·ªùi gian ch·ªù gi·ªØa c√°c batch ƒë·ªÉ h·ªá th·ªëng c√≥ th·ªÉ ph·ª•c h·ªìi v√† tr√°nh timeout
            await new Promise(resolve => setTimeout(resolve, optimizedConfig.waitTime || 800));
          } catch (batchError) {
            console.error(`L·ªói x·ª≠ l√Ω batch chuy·ªÉn ƒë·ªïi ${batchIndex + 1}: ${batchError.message}`);
            // Th√™m k·∫øt qu·∫£ l·ªói v√†o m·∫£ng k·∫øt qu·∫£
            const errorResults = batch.map(() => ({
              status: 'rejected',
              reason: batchError
            }));
            convertResults.push(...errorResults);
          }
        }
        
        // Th√∫c ƒë·∫©y GC sau khi ho√†n th√†nh t·∫•t c·∫£
        forceGarbageCollection();
      } catch (parallelError) {
        console.error(`L·ªói khi x·ª≠ l√Ω batch: ${parallelError.message}`);
        throw parallelError;
      }
    } else {
      // Ph∆∞∆°ng ph√°p x·ª≠ l√Ω tu·∫ßn t·ª± d√πng cho h·ªá th·ªëng y·∫øu h∆°n
      for (let i = 0; i < conversionTasks.length; i += batchSize) {
        try {
          const currentBatch = conversionTasks.slice(i, i + batchSize);
          const progress = Math.round((i / conversionTasks.length) * 100);
          console.log(`üîÑ Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh: ${progress}% (${i}/${conversionTasks.length} trang)`);
        
          // X·ª≠ l√Ω batch hi·ªán t·∫°i
          const batchPromises = currentBatch.map(task => 
            createConvertWorker(gsPath, task.pdfPath, task.pngPath, task.page, numPages, optimizedConfig.dpi)
          );
        
          let batchResults;
          try {
            batchResults = await Promise.allSettled(batchPromises);
          } catch (batchError) {
            console.error(`L·ªói x·ª≠ l√Ω batch x√≥a watermark: ${batchError.message}`);
            continue;
          }
          
          convertResults.push(...batchResults);
        
          // D·ªçn d·∫πp c√°c file PDF trang ƒë√£ chuy·ªÉn ƒë·ªïi ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ ngay l·∫≠p t·ª©c
          for (const task of currentBatch) {
            try {
              if (fs.existsSync(task.pdfPath)) {
                fs.unlinkSync(task.pdfPath);
              }
            } catch (unlinkError) {
              console.debug(`Kh√¥ng th·ªÉ x√≥a file PDF t·∫°m: ${unlinkError.message}`);
            }
          }
          
          // Th√∫c ƒë·∫©y GC sau m·ªói batch
          forceGarbageCollection();
          
          // TƒÉng th·ªùi gian ch·ªù gi·ªØa c√°c batch ƒë·ªÉ tr√°nh timeout
          await new Promise(resolve => setTimeout(resolve, optimizedConfig.waitTime || 800));
        } catch (batchProcessError) {
          console.error(`L·ªói x·ª≠ l√Ω batch chuy·ªÉn ƒë·ªïi t·∫°i v·ªã tr√≠ ${i}: ${batchProcessError.message}`);
          // V·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω c√°c batch ti·∫øp theo
        }
      }
    }
    
    console.log(`üîÑ Chuy·ªÉn ƒë·ªïi PDF sang h√¨nh ·∫£nh: 100% (${conversionTasks.length}/${conversionTasks.length} trang)`);
    
    // L·ªçc v√† gi·∫£i ph√≥ng b·ªô nh·ªõ s·ªõm h∆°n
    const successfulConversions = convertResults
      .filter(result => result.status === 'fulfilled')
      .map(result => result.value);
    
    if (successfulConversions.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!');
    }
    
    // X·ª≠ l√Ω c√°c PNG theo t·ª´ng batch nh·ªè
    console.log('üîÑ B∆∞·ªõc 2/3: X·ª≠ l√Ω x√≥a watermark tr√™n h√¨nh ·∫£nh...');
    const processResults = [];
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i ch·∫ø ƒë·ªô Ultra kh√¥ng
    if (optimizedConfig.ultra) {
      // Gi·∫£m k√≠ch th∆∞·ªõc batch xu·ªëng c√≤n 4 trang thay v√¨ 9 ƒë·ªÉ tr√°nh timeout
      const actualBatchSize = Math.min(batchSize, 4);
      console.log(`üöÄ Ch·∫ø ƒë·ªô ULTRA: X·ª≠ l√Ω t·ª´ng batch x√≥a watermark cho ${actualBatchSize} trang ƒë·ªÉ tr√°nh timeout (th·ªùi gian ch·ªù t·ªëi ƒëa: 1 gi·ªù)`);
      
      // X·ª≠ l√Ω nhi·ªÅu batch song song t∆∞∆°ng t·ª± nh∆∞ ph·∫ßn chuy·ªÉn ƒë·ªïi PDF
      const numBatches = Math.ceil(successfulConversions.length / actualBatchSize);
      const batches = [];
      
      for (let i = 0; i < numBatches; i++) {
        const startIdx = i * actualBatchSize;
        const endIdx = Math.min(startIdx + actualBatchSize, successfulConversions.length);
        batches.push(successfulConversions.slice(startIdx, endIdx));
      }
      
      console.log(`üß© ƒê√£ chia th√†nh ${numBatches} batch ƒë·ªÉ x·ª≠ l√Ω watermark`);
      
      try {
        let processedCount = 0;
        
        // X·ª≠ l√Ω t·ª´ng batch m·ªôt thay v√¨ song song
        for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
          const batch = batches[batchIndex];
          // Th√™m log ƒë·ªÉ debug
          console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω watermark batch ${batchIndex + 1}/${batches.length} (${batch.length} trang)`);
          
          const batchTasks = batch.map(result => 
            createProcessWorker(result.pngPath, result.page, successfulConversions.length, optimizedConfig)
          );
          
          try {
            // Thi·∫øt l·∫≠p timeout d√†i h∆°n cho x·ª≠ l√Ω batch
            const batchPromise = Promise.allSettled(batchTasks);
            
            // T·∫°o timeout promise ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ch·ªù qu√° l√¢u
            const timeoutPromise = new Promise((resolve) => {
              setTimeout(() => {
                resolve('timeout');
              }, maxProcessingTime);
            });
            
            // Ch·∫°y v·ªõi race ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã treo v√¥ th·ªùi h·∫°n
            const raceResult = await Promise.race([batchPromise, timeoutPromise]);
            
            // Ki·ªÉm tra n·∫øu b·ªã timeout
            const batchResults = raceResult === 'timeout' 
              ? batch.map(() => ({ status: 'rejected', reason: new Error('X·ª≠ l√Ω batch v∆∞·ª£t qu√° th·ªùi gian t·ªëi ƒëa') }))
              : raceResult;
            
            // X√≥a c√°c t·ªáp PNG ƒë√£ x·ª≠ l√Ω ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
            for (const result of batch) {
              try {
                if (fs.existsSync(result.pngPath)) {
                  fs.unlinkSync(result.pngPath);
                }
              } catch (unlinkError) {
                console.debug(`Kh√¥ng th·ªÉ x√≥a file PNG t·∫°m: ${unlinkError.message}`);
              }
            }
            
            processedCount += batch.length;
            console.log(`üîÑ X·ª≠ l√Ω x√≥a watermark: ${Math.round((processedCount / successfulConversions.length) * 100)}% (${processedCount}/${successfulConversions.length} trang)`);
            
            // Th√™m k·∫øt qu·∫£ v√†o m·∫£ng k·∫øt qu·∫£ chung
            processResults.push(...batchResults);
            
            // Th√∫c ƒë·∫©y GC sau m·ªói batch
            forceGarbageCollection();
            
            // TƒÉng th·ªùi gian ch·ªù gi·ªØa c√°c batch ƒë·ªÉ h·ªá th·ªëng c√≥ th·ªÉ ph·ª•c h·ªìi v√† tr√°nh timeout
            await new Promise(resolve => setTimeout(resolve, optimizedConfig.waitTime || 800));
          } catch (batchError) {
            console.error(`L·ªói x·ª≠ l√Ω batch watermark ${batchIndex + 1}: ${batchError.message}`);
            // Th√™m k·∫øt qu·∫£ l·ªói v√†o m·∫£ng k·∫øt qu·∫£
            const errorResults = batch.map(() => ({
              status: 'rejected',
              reason: batchError
            }));
            processResults.push(...errorResults);
          }
        }
        
        // Th√∫c ƒë·∫©y GC sau khi ho√†n th√†nh t·∫•t c·∫£
        forceGarbageCollection();
      } catch (parallelError) {
        console.error(`L·ªói khi x·ª≠ l√Ω watermark: ${parallelError.message}`);
        throw parallelError;
      }
    } else {
      // Ph∆∞∆°ng ph√°p x·ª≠ l√Ω tu·∫ßn t·ª± d√πng cho h·ªá th·ªëng y·∫øu h∆°n
      for (let i = 0; i < successfulConversions.length; i += batchSize) {
        try {
          const currentBatch = successfulConversions.slice(i, i + batchSize);
          const progress = Math.round((i / successfulConversions.length) * 100);
          console.log(`üîÑ X·ª≠ l√Ω x√≥a watermark: ${progress}% (${i}/${successfulConversions.length} trang)`);
          
          // X·ª≠ l√Ω batch hi·ªán t·∫°i
          const batchPromises = currentBatch.map(task => 
            createProcessWorker(task.pngPath, task.page, numPages, optimizedConfig)
          );
          
          let batchResults;
          try {
            batchResults = await Promise.allSettled(batchPromises);
          } catch (batchError) {
            console.error(`L·ªói x·ª≠ l√Ω batch x√≥a watermark: ${batchError.message}`);
            continue;
          }
          
          processResults.push(...batchResults);
          
          // Th√∫c ƒë·∫©y GC sau m·ªói batch v√† x√≥a file PNG g·ªëc ƒë√£ x·ª≠ l√Ω
          for (const task of currentBatch) {
            try {
              if (fs.existsSync(task.pngPath)) {
                fs.unlinkSync(task.pngPath);
              }
            } catch (unlinkError) {
              console.debug(`Kh√¥ng th·ªÉ x√≥a file PNG g·ªëc: ${unlinkError.message}`);
            }
          }
          
          // Th√∫c ƒë·∫©y GC sau m·ªói batch
          forceGarbageCollection();
          
          // TƒÉng th·ªùi gian ch·ªù gi·ªØa c√°c batch ƒë·ªÉ tr√°nh timeout
          await new Promise(resolve => setTimeout(resolve, optimizedConfig.waitTime || 800));
        } catch (batchProcessError) {
          console.error(`L·ªói x·ª≠ l√Ω batch x√≥a watermark t·∫°i v·ªã tr√≠ ${i}: ${batchProcessError.message}`);
          // V·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω c√°c batch ti·∫øp theo
        }
      }
    }
    
    console.log(`üîÑ X·ª≠ l√Ω x√≥a watermark: 100% (${successfulConversions.length}/${successfulConversions.length} trang)`);
    
    // L·ªçc v√† s·∫Øp x·∫øp hi·ªáu qu·∫£ h∆°n
    const successfulProcessing = processResults
      .filter(result => result.status === 'fulfilled')
      .map(result => result.value)
      .sort((a, b) => a.index - b.index);
    
    // L·∫•y danh s√°ch ƒë∆∞·ªùng d·∫´n PNG ƒë√£ x·ª≠ l√Ω
    const processedPngPaths = successfulProcessing.map(result => result.processedPngPath);
    
    if (processedPngPaths.length === 0) {
      throw new Error('Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!');
    }
    
    // Gh√©p c√°c trang PNG th√†nh PDF hi·ªáu qu·∫£ h∆°n
    console.log('üîÑ B∆∞·ªõc 3/3: Gh√©p c√°c trang th√†nh PDF k·∫øt qu·∫£...');
    
    // T·∫°o PDF hi·ªáu qu·∫£ h∆°n
    let pdfDoc;
    try {
      pdfDoc = await PDFDocument.create();
    } catch (createError) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o t√†i li·ªáu PDF: ${createError.message}`);
    }
    
    // X·ª≠ l√Ω t·ª´ng trang m·ªôt ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ - thay v√¨ song song
    for (let i = 0; i < processedPngPaths.length; i++) {
      try {
        const progress = Math.round((i / processedPngPaths.length) * 100);
        if (i % 5 === 0 || i === processedPngPaths.length - 1) { // Log every 5 pages to reduce output
          console.log(`üîÑ T·∫°o PDF: ${progress}% (${i}/${processedPngPaths.length} trang)`);
        }
        
        const success = await addImageToPdf(pdfDoc, processedPngPaths[i], i, processedPngPaths.length, config);
        if (!success) {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m trang ${i+1} v√†o PDF`);
        }
        
        // X√≥a file PNG ƒë√£ x·ª≠ l√Ω ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
        try {
          fs.unlinkSync(processedPngPaths[i]);
          const originalPng = processedPngPaths[i].replace('_processed.png', '.png');
          if (fs.existsSync(originalPng)) {
            fs.unlinkSync(originalPng);
          }
        } catch (unlinkError) {
          // Ignore error
          console.debug(`Kh√¥ng th·ªÉ x√≥a file PNG t·∫°m: ${unlinkError.message}`);
        }
        
        // Th√∫c ƒë·∫©y GC sau m·ªói 3 trang
        if (i % 3 === 2) {
          forceGarbageCollection();
        }
      } catch (pageError) {
        console.error(`L·ªói khi th√™m trang ${i+1} v√†o PDF: ${pageError.message}`);
      }
    }
    
    // Gi·∫£i ph√≥ng b·ªô nh·ªõ tr∆∞·ªõc khi l∆∞u PDF l·ªõn
    forceGarbageCollection();
    
    // L∆∞u PDF v·ªõi t√πy ch·ªçn n√©n t·ªëi ∆∞u
    console.log('üíæ L∆∞u file PDF k·∫øt qu·∫£...');
    let pdfBytes;
    try {
      pdfBytes = await pdfDoc.save({
        useObjectStreams: true,
        addDefaultPage: false
      });
    } catch (saveError) {
      throw new Error(`Kh√¥ng th·ªÉ l∆∞u n·ªôi dung PDF: ${saveError.message}`);
    }
    
    try {
      fs.writeFileSync(outputPath, pdfBytes);
    } catch (writeError) {
      throw new Error(`Kh√¥ng th·ªÉ ghi file PDF: ${writeError.message}`);
    }
    
    // Gi·∫£i ph√≥ng bi·∫øn pdfBytes ngay sau khi ghi xong ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
    pdfBytes = null;
    forceGarbageCollection();
    
    // Sau khi ho√†n th√†nh
    const endTime = Date.now();
    const processingTime = ((endTime - startTime) / 1000).toFixed(2);
    console.log(`‚úÖ Ho√†n th√†nh x·ª≠ l√Ω trong ${processingTime} gi√¢y`);
    
    let processedSize;
    try {
      processedSize = fs.existsSync(outputPath) ? (fs.statSync(outputPath).size / (1024 * 1024)).toFixed(2) + ' MB' : 'Unknown';
    } catch (statError) {
      processedSize = 'Unknown (error reading file size)';
    }
    
    // Th√™m h√¨nh n·ªÅn/logo n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if (config.backgroundImage && fs.existsSync(config.backgroundImage)) {
      try {
        console.log(`üñºÔ∏è Th√™m h√¨nh n·ªÅn/logo t√πy ch·ªânh: ${config.backgroundImage}`);
        const bgOutputPath = await addCustomBackground(outputPath, config.backgroundImage, {
          ...config,
          backgroundOpacity: config.backgroundOpacity || 0.15, // S·ª≠ d·ª•ng ƒë·ªô m·ªù t·ª´ config ho·∫∑c m·∫∑c ƒë·ªãnh
          forceAddLogo: config.forceAddLogo // Chuy·ªÉn ti·∫øp tham s·ªë forceAddLogo
        });
        
        if (fs.existsSync(bgOutputPath)) {
          console.log(`‚úÖ ƒê√£ th√™m logo th√†nh c√¥ng: ${bgOutputPath}`);
          // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra
          outputPath = bgOutputPath;
          // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc file
          processedSize = (fs.statSync(outputPath).size / (1024 * 1024)).toFixed(2) + ' MB';
        }
      } catch (bgError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m h√¨nh n·ªÅn/logo: ${bgError.message}`);
      }
    } else {
      console.log(`‚ÑπÔ∏è Kh√¥ng c√≥ h√¨nh n·ªÅn/logo ƒë∆∞·ª£c c·∫•u h√¨nh ho·∫∑c file kh√¥ng t·ªìn t·∫°i`);
    }
    
    return { 
      success: true, 
      outputPath, 
      processingTime,
      originalSize: fileSizeInMB.toFixed(2) + ' MB',
      processedSize: processedSize
    };
  } catch (error) {
    console.log(`‚ùå L·ªói: ${error.message}`);
    throw error;
  } finally {
    // D·ªçn d·∫πp file t·∫°m trong finally ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n ƒë∆∞·ª£c th·ª±c hi·ªán
    if (tempDir && fs.existsSync(tempDir)) {
      try {
        cleanupTempFiles(tempDir);
      } catch (cleanupError) {
        console.error(`Kh√¥ng th·ªÉ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
      }
    }
    
    // Th√∫c ƒë·∫©y garbage collection l·∫ßn cu·ªëi
    forceGarbageCollection();
  }
}

/**
 * X·ª≠ l√Ω m·ªôt h√¨nh ·∫£nh ƒë·ªÉ lo·∫°i b·ªè watermark
 * @param {string} inputPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë·∫ßu v√†o
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
 * @param {Object} config - C·∫•u h√¨nh x·ª≠ l√Ω watermark
 * @returns {Promise<boolean>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function processImage(inputPath, outputPath, config = DEFAULT_CONFIG) {
  try {
    console.log(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ·∫£nh: ${inputPath}`);
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i ch·∫ø ƒë·ªô n√¢ng cao kh√¥ng
    const isEnhancedMode = config.enhancedMode === true;
    const isBlockedFile = config.isBlockedFile === true;
    
    if (isEnhancedMode) {
      console.log(`S·ª≠ d·ª•ng ch·∫ø ƒë·ªô x·ª≠ l√Ω n√¢ng cao${isBlockedFile ? ' cho file b·ªã kh√≥a' : ''}`);
    }
    
    // Ki·ªÉm tra t·ªáp ƒë·∫ßu v√†o t·ªìn t·∫°i
    if (!fs.existsSync(inputPath)) {
      console.error(`File ·∫£nh ƒë·∫ßu v√†o kh√¥ng t·ªìn t·∫°i: ${inputPath}`);
      // Fallback: t·∫°o file r·ªóng ƒë·ªÉ tr√°nh l·ªói
      try {
        fs.writeFileSync(outputPath, Buffer.alloc(0));
      } catch (writeError) {
        console.error(`Kh√¥ng th·ªÉ t·∫°o file r·ªóng: ${writeError.message}`);
      }
      return false;
    }
    
    // Ki·ªÉm tra th∆∞ m·ª•c ƒë·∫ßu ra t·ªìn t·∫°i
    try {
      const outputDir = path.dirname(outputPath);
      if (!fs.existsSync(outputDir)) {
        console.log(`T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra: ${outputDir}`);
        fs.mkdirSync(outputDir, { recursive: true });
      }
    } catch (mkdirError) {
      console.error(`Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c ƒë·∫ßu ra: ${mkdirError.message}`);
    }
    
    // ƒê·ªçc h√¨nh ·∫£nh
    let image;
    try {
      image = sharp(inputPath);
    } catch (sharpError) {
      console.error(`Kh√¥ng th·ªÉ t·∫°o ƒë·ªëi t∆∞·ª£ng sharp: ${sharpError.message}`);
      console.error(sharpError.stack);
      // Fallback: sao ch√©p file g·ªëc sang ƒë√≠ch
      try {
        fs.copyFileSync(inputPath, outputPath);
        console.log(`ƒê√£ sao ch√©p file g·ªëc thay v√¨ x·ª≠ l√Ω: ${inputPath} -> ${outputPath}`);
      } catch (copyError) {
        console.error(`Kh√¥ng th·ªÉ sao ch√©p file g·ªëc: ${copyError.message}`);
        try {
          // Th·ª≠ t·∫°o ·∫£nh tr·ªëng v·ªõi k√≠ch th∆∞·ªõc nh·ªè
          const blankImage = Buffer.from(
            'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=',
            'base64'
          );
          fs.writeFileSync(outputPath, blankImage);
          console.log(`ƒê√£ t·∫°o ·∫£nh tr·ªëng t·∫°i: ${outputPath}`);
        } catch (writeError) {
          console.error(`Kh√¥ng th·ªÉ t·∫°o ·∫£nh tr·ªëng: ${writeError.message}`);
        }
      }
      return false;
    }
    
    // ƒê·ªçc metadata c·ªßa ·∫£nh
    let metadata;
    try {
      metadata = await image.metadata();
      console.log(`Th√¥ng tin ·∫£nh: ${metadata.width}x${metadata.height}, format: ${metadata.format}`);
      
      // Ki·ªÉm tra metadata h·ª£p l·ªá
      if (!metadata.width || !metadata.height || metadata.width <= 0 || metadata.height <= 0) {
        throw new Error(`K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng h·ª£p l·ªá: ${metadata.width}x${metadata.height}`);
      }
    } catch (metadataError) {
      console.error(`Kh√¥ng th·ªÉ ƒë·ªçc metadata: ${metadataError.message}`);
      // Fallback: sao ch√©p file g·ªëc sang ƒë√≠ch
      try {
        fs.copyFileSync(inputPath, outputPath);
        console.log(`ƒê√£ sao ch√©p file g·ªëc sau l·ªói metadata: ${inputPath} -> ${outputPath}`);
      } catch (copyError) {
        console.error(`Kh√¥ng th·ªÉ sao ch√©p file g·ªëc: ${copyError.message}`);
      }
      return false;
    }
    
    // ƒêi·ªÉm ng·∫Øt ƒë√£ x√°c ƒë·ªãnh - th√™m b∆∞·ªõc ki·ªÉm tra ƒë·∫∑c bi·ªát sau khi ƒë·ªçc metadata
    console.log(`Ki·ªÉm tra ·∫£nh tr∆∞·ªõc khi x·ª≠ l√Ω: OK`);
    
    // Th√™m b∆∞·ªõc b·∫£o v·ªá ƒë·∫∑c bi·ªát - Sao ch√©p tr∆∞·ªõc file g·ªëc ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n c√≥ output
    try {
      fs.copyFileSync(inputPath, outputPath);
      console.log(`ƒê√£ t·∫°o b·∫£n sao d·ª± ph√≤ng: ${outputPath}`);
    } catch (backupError) {
      console.error(`Kh√¥ng th·ªÉ t·∫°o b·∫£n sao d·ª± ph√≤ng: ${backupError.message}`);
    }
    
    try {
      // T·∫°o m·ªôt b·∫£n sao c·ªßa h√¨nh ·∫£nh s·ª≠ d·ª•ng buffer ƒë·ªÉ tr√°nh s·ª≠ d·ª•ng ƒë·ªëi t∆∞·ª£ng Sharp g·ªëc
      console.log(`Chu·∫©n b·ªã b·ªô ƒë·ªám h√¨nh ·∫£nh ƒë·ªÉ x·ª≠ l√Ω an to√†n...`);
      
      // T·ªëi ∆∞u h√≥a: ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ƒë·∫ßu ra t·ªëi ƒëa ƒë·ªÉ tr√°nh l·ªói b·ªô nh·ªõ
      const MAX_DIMENSION = 3000; // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc t·ªëi ƒëa ƒë·ªÉ x·ª≠ l√Ω an to√†n
      let needResize = false;
      let newWidth = metadata.width;
      let newHeight = metadata.height;
      
      if (metadata.width > MAX_DIMENSION || metadata.height > MAX_DIMENSION) {
        console.log(`·∫¢nh qu√° l·ªõn (${metadata.width}x${metadata.height}), s·∫Ω gi·∫£m k√≠ch th∆∞·ªõc ƒë·ªÉ x·ª≠ l√Ω an to√†n`);
        const aspectRatio = metadata.width / metadata.height;
        
        if (metadata.width > metadata.height) {
          newWidth = MAX_DIMENSION;
          newHeight = Math.round(MAX_DIMENSION / aspectRatio);
        } else {
          newHeight = MAX_DIMENSION;
          newWidth = Math.round(MAX_DIMENSION * aspectRatio);
        }
        
        needResize = true;
        console.log(`K√≠ch th∆∞·ªõc x·ª≠ l√Ω m·ªõi: ${newWidth}x${newHeight}`);
      }
      
      // X·ª≠ l√Ω ·∫£nh v·ªõi c√°ch ti·∫øp c·∫≠n ph√π h·ª£p v·ªõi c·∫•u h√¨nh
      let processedImage;
      
      try {
        // B·ªè qua qu√° tr√¨nh clone ƒë·ªÉ tr√°nh l·ªói
        processedImage = sharp(inputPath);
        
        // Resize n·∫øu c·∫ßn
        if (needResize) {
          processedImage = processedImage.resize(newWidth, newHeight, {
            fit: 'inside',
            withoutEnlargement: true
          });
        }
        
        // √Åp d·ª•ng c√°c b∆∞·ªõc x·ª≠ l√Ω d·ª±a tr√™n ch·∫ø ƒë·ªô
        if (isEnhancedMode) {
          // Ch·∫ø ƒë·ªô n√¢ng cao cho file b·ªã kh√≥a
          try {
            // TƒÉng ƒë·ªô s√°ng v√† ƒë·ªô b√£o h√≤a
            const brightness = config.brightnessBoost || 1.05;  // Gi·∫£m t·ª´ 1.1 xu·ªëng 1.05 ƒë·ªÉ gi·ªØ n·ªôi dung
            const saturation = config.saturationAdjust || 1.3;  // TƒÉng t·ª´ 1.2 l√™n 1.3 ƒë·ªÉ tƒÉng m√†u s·∫Øc
            
            processedImage = processedImage.modulate({
              brightness: brightness,
              saturation: saturation
            });
            console.log(`ƒê√£ √°p d·ª•ng tƒÉng ƒë·ªô s√°ng (${brightness}) v√† ƒë·ªô b√£o h√≤a (${saturation})`);
          } catch (modulateError) {
            console.warn(`B·ªè qua b∆∞·ªõc modulate n√¢ng cao do l·ªói: ${modulateError.message}`);
          }
          
          try {
            // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n v·ª´a ph·∫£i
            const contrastBoost = config.contrastBoost || 1.2;  // Gi·∫£m t·ª´ 1.35 xu·ªëng 1.2 ƒë·ªÉ kh√¥ng m·∫•t chi ti·∫øt
            processedImage = processedImage.linear(
              contrastBoost, 
              -(128 * contrastBoost - 128) / 255 * 0.8  // Gi·∫£m h·ªá s·ªë xu·ªëng 80% ƒë·ªÉ gi·ªØ chi ti·∫øt
            );
            console.log(`ƒê√£ √°p d·ª•ng tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n (${contrastBoost})`);
          } catch (contrastError) {
            console.warn(`B·ªè qua b∆∞·ªõc tƒÉng t∆∞∆°ng ph·∫£n do l·ªói: ${contrastError.message}`);
          }
          
          try {
            // TƒÉng ƒë·ªô s·∫Øc n√©t m·∫°nh h∆°n
            const sharpenAmount = config.sharpenAmount || 1.8;  // TƒÉng t·ª´ 1.5 l√™n 1.8 ƒë·ªÉ tƒÉng ƒë·ªô n√©t t·ªëi ƒëa
            processedImage = processedImage.sharpen({
              sigma: sharpenAmount,
              m1: 0.6,  // TƒÉng t·ª´ 0.5 l√™n 0.6
              m2: 0.8,  // TƒÉng t·ª´ 0.7 l√™n 0.8
              x1: 2,
              y2: 7,    // TƒÉng t·ª´ 6 l√™n 7
              y3: 7     // TƒÉng t·ª´ 6 l√™n 7
            });
            console.log(`ƒê√£ √°p d·ª•ng tƒÉng ƒë·ªô n√©t n√¢ng cao (${sharpenAmount})`);
          } catch (sharpenError) {
            console.warn(`B·ªè qua b∆∞·ªõc sharpen n√¢ng cao do l·ªói: ${sharpenError.message}`);
          }
          
          // B·ªè qua b∆∞·ªõc c√¢n b·∫±ng m√†u n·∫øu c·∫ßn gi·ªØ m√†u s·∫Øc
          if (!config.preserveColors) {
            try {
              // C√¢n b·∫±ng m√†u
              processedImage = processedImage.normalise();
              console.log(`ƒê√£ √°p d·ª•ng c√¢n b·∫±ng m√†u`);
            } catch (normaliseError) {
              console.warn(`B·ªè qua b∆∞·ªõc c√¢n b·∫±ng m√†u do l·ªói: ${normaliseError.message}`);
            }
          } else {
            console.log(`ƒê√£ b·ªè qua b∆∞·ªõc c√¢n b·∫±ng m√†u ƒë·ªÉ gi·ªØ m√†u s·∫Øc`);
          }
          
          // N·∫øu l√† file b·ªã kh√≥a, th·ª≠ √°p d·ª•ng th√™m c√°c k·ªπ thu·∫≠t x·ª≠ l√Ω ƒë·∫∑c bi·ªát
          if (isBlockedFile) {
            try {
              // Th·ª≠ √°p d·ª•ng b·ªô l·ªçc medianFilter ƒë·ªÉ gi·∫£m nhi·ªÖu
              processedImage = processedImage.median(1);  // Gi·ªØ nguy√™n 1 ƒë·ªÉ gi·ªØ chi ti·∫øt
              console.log(`ƒê√£ √°p d·ª•ng b·ªô l·ªçc median ƒë·ªÉ gi·∫£m nhi·ªÖu`);
            } catch (medianError) {
              console.warn(`B·ªè qua b∆∞·ªõc l·ªçc median do l·ªói: ${medianError.message}`);
            }
            
            // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho watermark khi gi·ªØ m√†u s·∫Øc
            if (config.preserveColors === true) {
              try {
                console.log(`√Åp d·ª•ng x·ª≠ l√Ω gi·ªØ m√†u s·∫Øc cho file b·ªã kh√≥a...`);
                
                // TƒÉng ƒë·ªô s·∫Øc n√©t ƒë·ªÉ l√†m r√µ n·ªôi dung
                processedImage = processedImage.sharpen({
                  sigma: 1.8,  // TƒÉng t·ª´ 1.5 l√™n 1.8
                  m1: 0.6,     // TƒÉng t·ª´ 0.5 l√™n 0.6
                  m2: 0.8      // TƒÉng t·ª´ 0.7 l√™n 0.8
                });
                
                // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π ƒë·ªÉ l√†m r√µ vƒÉn b·∫£n
                processedImage = processedImage.linear(
                  1.25,  // TƒÉng t·ª´ 1.2 l√™n 1.25
                  -0.03  // Gi·ªØ nguy√™n
                );
                
                // TƒÉng ƒë·ªô b√£o h√≤a m√†u m·ªôt ch√∫t n·ªØa
                processedImage = processedImage.modulate({
                  saturation: 1.3, // TƒÉng t·ª´ 1.1 l√™n 1.3
                  brightness: 1.05 // Th√™m tham s·ªë ƒë·ªô s√°ng nh·∫π
                });
                
                console.log(`ƒê√£ √°p d·ª•ng x·ª≠ l√Ω gi·ªØ m√†u s·∫Øc cho file b·ªã kh√≥a`);
              } catch (colorError) {
                console.warn(`B·ªè qua b∆∞·ªõc x·ª≠ l√Ω gi·ªØ m√†u s·∫Øc do l·ªói: ${colorError.message}`);
              }
            }
          }
        } else {
          // Ch·∫ø ƒë·ªô c∆° b·∫£n
          try {
            processedImage = processedImage.modulate({
              brightness: 1.1,  // Gi·∫£m t·ª´ 1.15 xu·ªëng 1.1
              saturation: 1.2   // Th√™m tham s·ªë ƒë·ªô b√£o h√≤a
            });
            console.log(`ƒê√£ √°p d·ª•ng tƒÉng ƒë·ªô s√°ng v√† b√£o h√≤a c∆° b·∫£n`);
          } catch (modulateError) {
            console.warn(`B·ªè qua b∆∞·ªõc modulate do l·ªói: ${modulateError.message}`);
          }
          
          try {
            // TƒÉng ƒë·ªô s·∫Øc n√©t cho ch·∫ø ƒë·ªô c∆° b·∫£n
            processedImage = processedImage.sharpen({ 
              sigma: 1.5,  // TƒÉng t·ª´ 1.2 l√™n 1.5
              m1: 0.5,     // TƒÉng t·ª´ 0.4 l√™n 0.5
              m2: 0.7      // TƒÉng t·ª´ 0.6 l√™n 0.7
            });
            console.log(`ƒê√£ √°p d·ª•ng tƒÉng ƒë·ªô n√©t c∆° b·∫£n`);
          } catch (sharpenError) {
            console.warn(`B·ªè qua b∆∞·ªõc sharpen do l·ªói: ${sharpenError.message}`);
          }
          
          // Th√™m b∆∞·ªõc x·ª≠ l√Ω tƒÉng ƒë·ªô n√©t th·ª© hai cho ch·∫ø ƒë·ªô c∆° b·∫£n
          try {
            processedImage = processedImage.linear(
              1.15,  // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π
              -0.02  // ƒêi·ªÉm c·∫Øt √¢m nh·ªè ƒë·ªÉ gi·ªØ chi ti·∫øt
            );
            console.log(`ƒê√£ √°p d·ª•ng tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π cho ch·∫ø ƒë·ªô c∆° b·∫£n`);
          } catch (contrastError) {
            console.warn(`B·ªè qua b∆∞·ªõc tƒÉng t∆∞∆°ng ph·∫£n do l·ªói: ${contrastError.message}`);
          }
        }
        
        // ƒê·∫∑t ch·∫•t l∆∞·ª£ng ƒë·∫ßu ra v√† ƒë·ªãnh d·∫°ng ƒë·ªÉ t·ªëi ∆∞u k√≠ch th∆∞·ªõc
        if (metadata.format === 'jpeg' || metadata.format === 'jpg') {
          processedImage = processedImage.jpeg({ quality: 90 });
        } else if (metadata.format === 'png') {
          processedImage = processedImage.png({ compressionLevel: 6 });
        } else {
          // M·∫∑c ƒë·ªãnh chuy·ªÉn v·ªÅ JPEG n·∫øu format kh√¥ng ph·∫£i jpeg ho·∫∑c png
          processedImage = processedImage.jpeg({ quality: 90 });
        }
        
        // L∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
        console.log(`ƒêang l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω...`);
        try {
          // T·∫°o buffer tr∆∞·ªõc thay v√¨ ghi tr·ª±c ti·∫øp v√†o file
          const outputBuffer = await processedImage.toBuffer();
          console.log(`ƒê√£ t·∫°o buffer ·∫£nh ƒë√£ x·ª≠ l√Ω: ${outputBuffer.length} bytes`);
          
          // Ki·ªÉm tra buffer h·ª£p l·ªá
          if (!outputBuffer || outputBuffer.length < 100) {
            throw new Error(`Buffer ·∫£nh kh√¥ng h·ª£p l·ªá ho·∫∑c qu√° nh·ªè: ${outputBuffer ? outputBuffer.length : 0} bytes`);
          }
          
          // S·ª≠ d·ª•ng fs.writeFileSync thay v√¨ sharp.toFile
          fs.writeFileSync(outputPath, outputBuffer);
          console.log(`ƒê√£ l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: ${outputPath}`);
          
          return true;
        } catch (saveError) {
          console.error(`L·ªói khi l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω: ${saveError.message}`);
          console.error(saveError.stack);
          
          // Ki·ªÉm tra l·ªói c·ª• th·ªÉ
          if (saveError.message.includes('memory') || saveError.message.includes('heap')) {
            console.error(`C√≥ v·∫ª nh∆∞ l·ªói b·ªô nh·ªõ khi l∆∞u ·∫£nh l·ªõn, th·ª≠ v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n`);
            try {
              // Th·ª≠ l∆∞u ·∫£nh v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n nhi·ªÅu
              const MAX_DIMENSION_FALLBACK = 1200;
              console.log(`Th·ª≠ l·∫°i v·ªõi k√≠ch th∆∞·ªõc t·ªëi ƒëa ${MAX_DIMENSION_FALLBACK}px`);
              
              const imgFallbackBuffer = await sharp(inputPath)
                .resize(MAX_DIMENSION_FALLBACK, MAX_DIMENSION_FALLBACK, {
                  fit: 'inside',
                  withoutEnlargement: true
                })
                .jpeg({ quality: 85 })
                .toBuffer();
                
              fs.writeFileSync(outputPath, imgFallbackBuffer);
              console.log(`ƒê√£ l∆∞u ·∫£nh v·ªõi k√≠ch th∆∞·ªõc thu nh·ªè th√†nh c√¥ng: ${outputPath}`);
              return true;
            } catch (fallbackError) {
              console.error(`L·ªói khi l∆∞u ·∫£nh v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n: ${fallbackError.message}`);
              // Ti·∫øp t·ª•c xu·ªëng ph∆∞∆°ng √°n d·ª± ph√≤ng cu·ªëi c√πng
              try {
                console.log(`Th·ª≠ ph∆∞∆°ng ph√°p cu·ªëi c√πng: sao ch√©p file g·ªëc`);
                fs.copyFileSync(inputPath, outputPath);
                console.log(`ƒê√£ sao ch√©p file g·ªëc th√†nh c√¥ng: ${outputPath}`);
                return true;
              } catch (copyError) {
                console.error(`Kh√¥ng th·ªÉ sao ch√©p file g·ªëc: ${copyError.message}`);
              }
            }
          }
          
          // Ch√∫ng ta ƒë√£ c√≥ b·∫£n sao d·ª± ph√≤ng r·ªìi, kh√¥ng c·∫ßn sao ch√©p l·∫°i
          console.log(`S·ª≠ d·ª•ng b·∫£n sao d·ª± ph√≤ng ƒë√£ t·∫°o`);
          return false;
        }
      } catch (processingError) {
        console.error(`L·ªói khi x·ª≠ l√Ω ·∫£nh: ${processingError.message}`);
        console.error(processingError.stack);
        
        // Ch√∫ng ta ƒë√£ c√≥ b·∫£n sao d·ª± ph√≤ng r·ªìi, kh√¥ng c·∫ßn sao ch√©p l·∫°i
        console.log(`S·ª≠ d·ª•ng b·∫£n sao d·ª± ph√≤ng ƒë√£ t·∫°o`);
        return false;
      }
    } catch (outerError) {
      console.error(`L·ªói b√™n ngo√†i qu√° tr√¨nh x·ª≠ l√Ω: ${outerError.message}`);
      console.error(outerError.stack);
      
      // Ch√∫ng ta ƒë√£ c√≥ b·∫£n sao d·ª± ph√≤ng r·ªìi, kh√¥ng c·∫ßn sao ch√©p l·∫°i
      console.log(`S·ª≠ d·ª•ng b·∫£n sao d·ª± ph√≤ng ƒë√£ t·∫°o`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω ·∫£nh c·∫•p cao nh·∫•t: ${error.message}`);
    console.error(error.stack);
    
    // Fallback an to√†n nh·∫•t, ƒë·∫£m b·∫£o lu√¥n c√≥ file ƒë·∫ßu ra
    try {
      fs.copyFileSync(inputPath, outputPath);
      console.log(`ƒê√£ sao ch√©p file g·ªëc sau khi b·∫Øt l·ªói cu·ªëi c√πng: ${inputPath} -> ${outputPath}`);
      return false;
    } catch (copyError) {
      console.error(`Kh√¥ng th·ªÉ sao ch√©p file g·ªëc: ${copyError.message}`);
      
      // T·∫°o file r·ªóng n·∫øu kh√¥ng th·ªÉ sao ch√©p
      try {
        fs.writeFileSync(outputPath, Buffer.alloc(0));
        console.log(`ƒê√£ t·∫°o file r·ªóng sau khi kh√¥ng th·ªÉ sao ch√©p: ${outputPath}`);
      } catch (writeError) {
        console.error(`Kh√¥ng th·ªÉ t·∫°o file r·ªóng: ${writeError.message}`);
      }
    }
    return false;
  }
}

/**
 * Th√™m h√¨nh n·ªÅn t√πy ch·ªânh v√†o PDF
 * @param {string} pdfPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
 * @param {string} backgroundPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh n·ªÅn
 * @param {Object} config - C·∫•u h√¨nh
 * @returns {Promise<string>} - ƒê∆∞·ªùng d·∫´n ƒë·∫øn PDF ƒë√£ x·ª≠ l√Ω
 */
export async function addCustomBackground(pdfPath, backgroundPath, config = DEFAULT_CONFIG) {
  try {
    if (!fs.existsSync(pdfPath)) {
      throw new Error(`File PDF kh√¥ng t·ªìn t·∫°i: ${pdfPath}`);
    }
    
    if (!fs.existsSync(backgroundPath)) {
      throw new Error(`File h√¨nh n·ªÅn kh√¥ng t·ªìn t·∫°i: ${backgroundPath}`);
    }
    
    const outputPath = pdfPath.replace('.pdf', '_with_bg.pdf');
    console.log(`üñºÔ∏è Th√™m logo v√†o PDF: ${path.basename(pdfPath)} -> ${path.basename(outputPath)}`);
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i l√† file PDF ƒë√£ x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥ kh√¥ng
    const isProcessedFile = pdfPath.includes('_processed') || pdfPath.includes('_clean');
    
    // N·∫øu l√† file ƒë√£ x·ª≠ l√Ω v√† kh√¥ng c√≥ tham s·ªë forceAddLogo, b·ªè qua
    if (isProcessedFile && !config.forceAddLogo) {
      console.log(`‚ö†Ô∏è B·ªè qua th√™m logo v√¨ file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥: ${pdfPath}`);
      // Sao ch√©p file g·ªëc l√†m k·∫øt qu·∫£
      fs.copyFileSync(pdfPath, outputPath);
      return outputPath;
    }
    
    // ƒê·ªçc PDF g·ªëc
    let pdfBytes;
    try {
      pdfBytes = fs.readFileSync(pdfPath);
    } catch (readError) {
      throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc file PDF: ${readError.message}`);
    }
    
    let pdfDoc;
    try {
      pdfDoc = await PDFDocument.load(pdfBytes, { 
        ignoreEncryption: true,
        updateMetadata: false
      });
    } catch (loadError) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i file PDF: ${loadError.message}`);
    }
    
    // ƒê·ªçc h√¨nh n·ªÅn
    let backgroundImage;
    try {
      let backgroundData;
      try {
        backgroundData = fs.readFileSync(backgroundPath);
      } catch (readBgError) {
        throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc file h√¨nh n·ªÅn: ${readBgError.message}`);
      }
      
      if (backgroundPath.toLowerCase().endsWith('.png')) {
        backgroundImage = await pdfDoc.embedPng(backgroundData);
      } else if (backgroundPath.toLowerCase().endsWith('.jpg') || backgroundPath.toLowerCase().endsWith('.jpeg')) {
        backgroundImage = await pdfDoc.embedJpg(backgroundData);
      } else {
        throw new Error('ƒê·ªãnh d·∫°ng h√¨nh n·ªÅn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng PNG ho·∫∑c JPG.');
      }
    } catch (embedError) {
      throw new Error(`Kh√¥ng th·ªÉ nh√∫ng h√¨nh n·ªÅn: ${embedError.message}`);
    }
    
    // L·∫•y k√≠ch th∆∞·ªõc h√¨nh n·ªÅn
    const bgDimensions = backgroundImage.size();
    
    // X·ª≠ l√Ω t·ª´ng trang PDF
    try {
      const pages = pdfDoc.getPages();
      console.log(`üìÑ Th√™m logo v√†o ${pages.length} trang...`);
      
      // ƒê·ªô m·ªù c·ªßa logo
      const opacity = config.backgroundOpacity !== undefined ? config.backgroundOpacity : 0.15;
      console.log(`üîç S·ª≠ d·ª•ng ƒë·ªô m·ªù logo: ${opacity}`);
      
      for (const page of pages) {
        try {
          const { width, height } = page.getSize();
          
          // T√≠nh k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ ƒë·ªÉ h√¨nh n·ªÅn v·ª´a v·ªõi trang
          const scale = Math.min(width / bgDimensions.width, height / bgDimensions.height) * 0.5; // Gi·∫£m k√≠ch th∆∞·ªõc logo xu·ªëng 50%
          const bgWidth = bgDimensions.width * scale;
          const bgHeight = bgDimensions.height * scale;
          
          // ƒê·∫∑t logo ·ªü gi·ªØa trang
          const xOffset = (width - bgWidth) / 2;
          const yOffset = (height - bgHeight) / 2;
          
          // V·∫Ω h√¨nh n·ªÅn
          page.drawImage(backgroundImage, {
            x: xOffset,
            y: yOffset,
            width: bgWidth,
            height: bgHeight,
            opacity: opacity
          });
        } catch (pageError) {
          console.warn(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω logo tr√™n m·ªôt trang: ${pageError.message}`);
          // Ti·∫øp t·ª•c v·ªõi trang ti·∫øp theo
        }
      }
    } catch (pagesError) {
      throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω c√°c trang PDF: ${pagesError.message}`);
    }
    
    // L∆∞u PDF ƒë√£ x·ª≠ l√Ω
    try {
      const modifiedPdfBytes = await pdfDoc.save({
        updateMetadata: false,
        addDefaultPage: false
      });
      fs.writeFileSync(outputPath, modifiedPdfBytes);
      console.log(`‚úÖ ƒê√£ l∆∞u PDF v·ªõi logo: ${outputPath}`);
    } catch (saveError) {
      throw new Error(`Kh√¥ng th·ªÉ l∆∞u PDF ƒë√£ x·ª≠ l√Ω: ${saveError.message}`);
    }
    
    return outputPath;
  } catch (error) {
    console.error(`‚ùå L·ªói th√™m h√¨nh n·ªÅn: ${error.message}`);
    throw error;
  }
}

/**
 * T·∫°o file PDF t·ª´ c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω v·ªõi h√¨nh n·ªÅn t√πy ch·ªânh
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ x·ª≠ l√Ω
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n l∆∞u file PDF
 * @param {Object} config - C·∫•u h√¨nh
 * @returns {Promise<boolean>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function createPDFFromProcessedImages(images, outputPath, config = DEFAULT_CONFIG) {
  try {
    console.log(`üìë B·∫Øt ƒë·∫ßu t·∫°o PDF v·ªõi h√¨nh n·ªÅn t·ª´ ${images.length} ·∫£nh...`);
    
    // Ki·ªÉm tra xem c√°c ·∫£nh c√≥ ph·∫£i ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥ kh√¥ng
    const hasProcessedImages = images.some(img => img.includes('_processed'));
    
    if (hasProcessedImages) {
      console.log(`‚ö†Ô∏è Ph√°t hi·ªán ·∫£nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥, s·∫Ω kh√¥ng th√™m logo l·∫ßn n·ªØa ƒë·ªÉ tr√°nh l·∫∑p`);
    }
    
    // T·∫°o PDF m·ªõi
    let pdfDoc;
    try {
      pdfDoc = await PDFDocument.create();
    } catch (createError) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o t√†i li·ªáu PDF: ${createError.message}`);
    }
    
    // X·ª≠ l√Ω t·ª´ng ·∫£nh
    for (let i = 0; i < images.length; i++) {
      try {
        const imagePath = images[i];
        
        if (i % 5 === 0 || i === images.length - 1) {
          console.log(`üîÑ T·∫°o PDF: ${Math.round((i / images.length) * 100)}% (${i}/${images.length} trang)`);
        }
        
        // Th√™m ·∫£nh v√†o PDF v·ªõi h√¨nh n·ªÅn
        const success = await addImageToPdf(pdfDoc, imagePath, i, images.length, config);
        if (!success) {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m ·∫£nh ${imagePath} v√†o PDF`);
        }
      } catch (pageError) {
        console.error(`L·ªói khi th√™m ·∫£nh th·ª© ${i+1} v√†o PDF: ${pageError.message}`);
      }
    }
    
    // L∆∞u PDF
    try {
      const pdfBytes = await pdfDoc.save({
        useObjectStreams: true,
        addDefaultPage: false
      });
      
      fs.writeFileSync(outputPath, pdfBytes);
    } catch (saveError) {
      // N·∫øu l∆∞u PDF th·∫•t b·∫°i, th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø
      console.error(`L·ªói khi l∆∞u PDF: ${saveError.message}`);
      console.log(`‚ö†Ô∏è Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø ƒë·ªÉ t·∫°o PDF...`);
      
      // S·ª≠ d·ª•ng h√†m createPDFFromRawImages nh∆∞ m·ªôt ph∆∞∆°ng ph√°p thay th·∫ø
      return await createPDFFromRawImages(images, outputPath);
    }
    
    console.log(`‚úÖ ƒê√£ t·∫°o PDF th√†nh c√¥ng: ${outputPath}`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫°o PDF t·ª´ ·∫£nh: ${error.message}`);
    
    // Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø n·∫øu g·∫∑p l·ªói
    try {
      console.log(`‚ö†Ô∏è Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø ƒë·ªÉ t·∫°o PDF...`);
      return await createPDFFromRawImages(images, outputPath);
    } catch (fallbackError) {
      console.error(`‚ùå Ph∆∞∆°ng ph√°p thay th·∫ø c≈©ng th·∫•t b·∫°i: ${fallbackError.message}`);
      throw error; // N√©m l·ªói g·ªëc
    }
  }
}

/**
 * T·∫°o file PDF t·ª´ c√°c ·∫£nh (kh√¥ng c·∫ßn th√™m h√¨nh n·ªÅn)
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n l∆∞u file PDF
 * @returns {Promise<boolean>} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
export async function createPDFFromRawImages(images, outputPath) {
  try {
    console.log(`üìë B·∫Øt ƒë·∫ßu t·∫°o PDF t·ª´ ${images.length} ·∫£nh...`);
    
    // Th·ª≠ s·ª≠ d·ª•ng pdf-lib thay v√¨ PDFKit ƒë·ªÉ tr√°nh l·ªói font
    try {
      // T·∫°o PDF m·ªõi v·ªõi pdf-lib
      const pdfDoc = await PDFDocument.create();
      
      // S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª± trang
      const sortedImages = images.sort((a, b) => {
        try {
          const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
          const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
          return pageA - pageB;
        } catch (error) {
          return 0;
        }
      });
      
      // Th√™m t·ª´ng ·∫£nh v√†o PDF
      for (let i = 0; i < sortedImages.length; i++) {
        const imagePath = sortedImages[i];
        
        try {
          // ƒê·ªçc d·ªØ li·ªáu ·∫£nh
          let imageData;
          try {
            imageData = fs.readFileSync(imagePath);
          } catch (readError) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh ${imagePath}: ${readError.message}`);
            continue;
          }
          
          // X·ª≠ l√Ω WebP n·∫øu c·∫ßn
          if (imagePath.endsWith('.webp')) {
            try {
              console.log(`üîÑ Chuy·ªÉn ƒë·ªïi WebP sang PNG...`);
              imageData = await sharp(imageData).png().toBuffer();
            } catch (convertError) {
              console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi WebP sang PNG: ${convertError.message}`);
              continue;
            }
          }
          
          // Nh√∫ng ·∫£nh v√†o PDF
          let embeddedImage;
          try {
            embeddedImage = await pdfDoc.embedPng(imageData);
          } catch (embedError) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ nh√∫ng ·∫£nh v√†o PDF: ${embedError.message}`);
            continue;
          }
          
          // L·∫•y k√≠ch th∆∞·ªõc ·∫£nh
          const imgDimensions = embeddedImage.size();
          
          // Th√™m trang m·ªõi v·ªõi k√≠ch th∆∞·ªõc c·ªßa ·∫£nh
          const page = pdfDoc.addPage([imgDimensions.width, imgDimensions.height]);
          
          // V·∫Ω ·∫£nh l√™n trang
          page.drawImage(embeddedImage, {
            x: 0,
            y: 0,
            width: imgDimensions.width,
            height: imgDimensions.height
          });
          
          console.log(`‚úÖ ƒê√£ th√™m trang ${i+1}/${sortedImages.length} (${path.basename(imagePath)})`);
        } catch (pageError) {
          console.warn(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh ${imagePath}: ${pageError.message}`);
        }
      }
      
      // L∆∞u PDF
      const pdfBytes = await pdfDoc.save();
      fs.writeFileSync(outputPath, pdfBytes);
      
      console.log(`‚úÖ ƒê√£ t·∫°o PDF th√†nh c√¥ng v·ªõi pdf-lib: ${outputPath}`);
      return true;
    } catch (pdfLibError) {
      console.error(`‚ùå L·ªói khi t·∫°o PDF v·ªõi pdf-lib: ${pdfLibError.message}`);
      console.log(`‚ö†Ô∏è Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø...`);
      
      // Ph∆∞∆°ng ph√°p thay th·∫ø s·ª≠ d·ª•ng PDFKit v·ªõi c·∫•u h√¨nh kh√¥ng ph·ª• thu·ªôc font
      const doc = new PDFKit({
        autoFirstPage: false,
        margin: 0,
        bufferPages: true,
        font: null, // Kh√¥ng s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh
        compress: true
      });
      
      // T·∫°o write stream v√† promise ƒë·ªÉ theo d√µi khi n√†o ho√†n th√†nh
      let writeStream;
      try {
        writeStream = fs.createWriteStream(outputPath);
      } catch (streamError) {
        throw new Error(`Kh√¥ng th·ªÉ t·∫°o write stream: ${streamError.message}`);
      }
      
      const streamFinished = new Promise((resolve, reject) => {
        writeStream.on('finish', resolve);
        writeStream.on('error', reject);
      });
      
      doc.pipe(writeStream);
      
      // X·ª≠ l√Ω t·ª´ng ·∫£nh
      const sortedImages = images.sort((a, b) => {
        try {
          const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
          const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
          return pageA - pageB;
        } catch (error) {
          return 0;
        }
      });
      
      for (const imagePath of sortedImages) {
        try {
          let imageBuffer;
          try {
            imageBuffer = fs.readFileSync(imagePath);
          } catch (readError) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh ${imagePath}: ${readError.message}`);
            continue;
          }
          
          // N·∫øu l√† WebP, chuy·ªÉn sang PNG
          if (imagePath.endsWith('.webp')) {
            try {
              console.log(`üîÑ Chuy·ªÉn ƒë·ªïi WebP sang PNG...`);
              imageBuffer = await sharp(imageBuffer).png().toBuffer();
            } catch (convertError) {
              console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi WebP sang PNG: ${convertError.message}`);
              continue;
            }
          }
          
          try {
            // S·ª≠ d·ª•ng c√°ch thay th·∫ø kh√¥ng c·∫ßn openImage
            const metadata = await sharp(imageBuffer).metadata();
            doc.addPage({ size: [metadata.width, metadata.height] });
            
            // Chuy·ªÉn ƒë·ªïi buffer th√†nh base64
            const base64Image = imageBuffer.toString('base64');
            const imgFormat = imagePath.endsWith('.webp') ? 'png' : (metadata.format || 'png');
            const imgSrc = `data:image/${imgFormat};base64,${base64Image}`;
            
            // V·∫Ω ·∫£nh s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c image v·ªõi ngu·ªìn d·ªØ li·ªáu
            doc.image(imgSrc, 0, 0, {
              width: metadata.width,
              height: metadata.height
            });
            
            console.log(`‚úÖ ƒê√£ th√™m trang ${path.basename(imagePath)}`);
          } catch (imageError) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m ·∫£nh v√†o PDF: ${imageError.message}`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh ${imagePath}: ${error.message}`);
        }
      }
      
      // K·∫øt th√∫c document v√† ƒë·ª£i stream ho√†n th√†nh
      try {
        doc.end();
        await streamFinished;
      } catch (finishError) {
        throw new Error(`Kh√¥ng th·ªÉ ho√†n th√†nh t·∫°o PDF: ${finishError.message}`);
      }
      
      console.log(`‚úÖ ƒê√£ t·∫°o PDF th√†nh c√¥ng v·ªõi PDFKit (ph∆∞∆°ng ph√°p thay th·∫ø): ${outputPath}`);
      return true;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫°o PDF: ${error.message}`);
    throw error;
  }
} 