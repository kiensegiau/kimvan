/**
 * C√°c h√†m ti·ªán √≠ch cho API x√≥a watermark
 */
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { TOKEN_PATH, TOKEN_PATHS } from './config.js';
import os from 'os';

// ƒê·ªçc token t·ª´ file
export function getStoredToken() {
  try {
    if (fs.existsSync(TOKEN_PATH)) {
      const tokenContent = fs.readFileSync(TOKEN_PATH, 'utf8');
      
      if (tokenContent.length === 0) {
        return null;
      }
      
      try {
        const parsedToken = JSON.parse(tokenContent);
        return parsedToken;
      } catch (parseError) {
        console.error(`L·ªói ph√¢n t√≠ch token: ${parseError.message}`);
        return null;
      }
    }
  } catch (error) {
    console.error(`L·ªói ƒë·ªçc token: ${error.message}`);
    return null;
  }
  return null;
}

// Th√™m h√†m ƒë·ªçc token t·∫£i l√™n/t·∫£i xu·ªëng
export function getTokenByType(type = 'upload') {
  try {
    const tokenIndex = type === 'upload' ? 0 : 1;
    const tokenPath = TOKEN_PATHS[tokenIndex];
    
    if (fs.existsSync(tokenPath)) {
      const tokenContent = fs.readFileSync(tokenPath, 'utf8');
      
      if (tokenContent.length === 0) {
        return null;
      }
      
      try {
        const parsedToken = JSON.parse(tokenContent);
        return parsedToken;
      } catch (parseError) {
        console.error(`L·ªói ph√¢n t√≠ch token ${type}: ${parseError.message}`);
        // Fallback to old token file
        return getStoredToken();
      }
    } else {
      // Fallback to old token file
      return getStoredToken();
    }
  } catch (error) {
    console.error(`L·ªói ƒë·ªçc token ${type}: ${error.message}`);
    // Fallback to old token file
    return getStoredToken();
  }
}

// Get file extension from MIME type
export function getExtensionFromMimeType(mimeType) {
  try {
    if (!mimeType) return '.bin';
    
    const mimeToExt = {
      'application/pdf': '.pdf',
      'image/jpeg': '.jpg',
      'image/png': '.png',
      'image/gif': '.gif',
      'video/mp4': '.mp4',
      'audio/mpeg': '.mp3',
      'text/plain': '.txt',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
      'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx'
    };
    
    for (const [mime, ext] of Object.entries(mimeToExt)) {
      if (mimeType.includes(mime)) return ext;
    }
    
    return '.bin';
  } catch (error) {
    console.error(`L·ªói x√°c ƒë·ªãnh ph·∫ßn m·ªü r·ªông t·ª´ MIME: ${error.message}`);
    return '.bin'; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh an to√†n
  }
}

// C·∫£i ti·∫øn ch·ª©c nƒÉng d·ªçn d·∫πp t·∫°m ƒë·ªÉ hi·ªáu qu·∫£ h∆°n v√† ƒë·∫£m b·∫£o gi·∫£i ph√≥ng b·ªô nh·ªõ
export function cleanupTempFiles(tempDir) {
  if (!tempDir) return;
  
  try {
    if (fs.existsSync(tempDir)) {
      // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·ªÉ tr√°nh l·ªói
      const absoluteTempDir = path.resolve(tempDir);
      console.log(`üßπ D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${absoluteTempDir}`);
      
      try {
        // ƒê·ªçc t·∫•t c·∫£ c√°c m·ª•c trong th∆∞ m·ª•c
        const entries = fs.readdirSync(absoluteTempDir, { withFileTypes: true });
        
        // ƒê·∫øm s·ªë l∆∞·ª£ng t·ªáp/th∆∞ m·ª•c ƒë∆∞·ª£c x·ª≠ l√Ω
        let processedCount = 0;
        const totalEntries = entries.length;
        
        // X√≥a t·∫•t c·∫£ c√°c t·ªáp tr∆∞·ªõc, sau ƒë√≥ c√°c th∆∞ m·ª•c
        for (const entry of entries) {
          const fullPath = path.join(absoluteTempDir, entry.name);
          
          try {
            // N·∫øu l√† th∆∞ m·ª•c, g·ªçi ƒë·ªá quy
            if (entry.isDirectory()) {
              cleanupTempFiles(fullPath);
            } else {
              // X√≥a t·ªáp
              fs.unlinkSync(fullPath);
            }
            processedCount++;
            
            // Th√∫c ƒë·∫©y GC sau m·ªói 10 t·ªáp ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ
            if (processedCount % 10 === 0) {
              forceGarbageCollection();
            }
          } catch (entryError) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a ${entry.isDirectory() ? 'th∆∞ m·ª•c' : 't·ªáp'} ${entry.name}: ${entryError.message}`);
          }
        }
        
        // X√≥a th∆∞ m·ª•c sau khi ƒë√£ x√≥a t·∫•t c·∫£ c√°c m·ª•c b√™n trong
        fs.rmdirSync(absoluteTempDir, { recursive: true, force: true });
        console.log(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng th∆∞ m·ª•c t·∫°m v·ªõi ${processedCount}/${totalEntries} m·ª•c`);
      } catch (fsError) {
        // N·∫øu kh√¥ng th·ªÉ x√≥a b·∫±ng fs, th·ª≠ d√πng c√°ch m·∫°nh h∆°n tr√™n Windows
        const isWindows = process.platform === 'win32';
        if (isWindows) {
          try {
            execSync(`rmdir /s /q "${absoluteTempDir}"`, { stdio: 'ignore' });
            console.log(`‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m b·∫±ng l·ªánh rmdir`);
          } catch (cmdError) {
            console.error(`‚ùå Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c t·∫°m b·∫±ng l·ªánh: ${cmdError.message}`);
          }
        } else {
          try {
            execSync(`rm -rf "${absoluteTempDir}"`, { stdio: 'ignore' });
            console.log(`‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m b·∫±ng l·ªánh rm`);
          } catch (cmdError) {
            console.error(`‚ùå Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c t·∫°m b·∫±ng l·ªánh: ${cmdError.message}`);
          }
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå L·ªói d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${error.message}`);
  } finally {
    // Th√∫c ƒë·∫©y GC sau khi ho√†n th√†nh
    forceGarbageCollection();
  }
}

// H√†m m·ªõi: Th√∫c ƒë·∫©y Garbage Collection ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
export function forceGarbageCollection() {
  try {
    // Gi·∫£i ph√≥ng c√°c bi·∫øn kh√¥ng c·∫ßn thi·∫øt
    const beforeMemory = process.memoryUsage();
    
    // G·ªçi GC n·∫øu c√≥ s·∫µn (c·∫ßn ch·∫°y Node v·ªõi flag --expose-gc)
    if (typeof global.gc === 'function') {
      global.gc();
    }
    
    // Th·ª≠ th√∫c ƒë·∫©y GC gi√°n ti·∫øp
    const tempArray = new Array(10000).fill(0);
    tempArray.length = 0;
    
    // Ki·ªÉm tra m·ª©c s·ª≠ d·ª•ng b·ªô nh·ªõ sau khi d·ªçn d·∫πp (ch·ªâ ƒë·ªÉ debug)
    if (process.env.NODE_ENV === 'development') {
      const afterMemory = process.memoryUsage();
      const diffHeap = (beforeMemory.heapUsed - afterMemory.heapUsed) / (1024 * 1024);
      if (diffHeap > 1) {
        console.debug(`üßπ ƒê√£ gi·∫£i ph√≥ng kho·∫£ng ${diffHeap.toFixed(2)}MB b·ªô nh·ªõ`);
      }
    }
  } catch (error) {
    // L·ªói trong qu√° tr√¨nh GC kh√¥ng quan tr·ªçng l·∫Øm
    console.debug(`‚ö†Ô∏è L·ªói khi th√∫c ƒë·∫©y GC: ${error.message}`);
  }
}

// Ki·ªÉm tra v√† t√¨m GhostScript v·ªõi th√¥ng tin chi ti·∫øt h∆°n
export function findGhostscript() {
  try {
    const possibleGsPaths = [
      // ƒê∆∞·ªùng d·∫´n Windows ph·ªï bi·∫øn
      'C:\\Program Files\\gs\\gs10.05.0\\bin\\gswin64c.exe', // Th√™m phi√™n b·∫£n 10.05.0 v√†o ƒë·∫ßu danh s√°ch
      'C:\\Program Files\\gs\\gs10.02.0\\bin\\gswin64c.exe',
      'C:\\Program Files\\gs\\gs10.01.2\\bin\\gswin64c.exe',
      'C:\\Program Files\\gs\\gs10.00.0\\bin\\gswin64c.exe',
      'C:\\Program Files\\gs\\gs9.56.1\\bin\\gswin64c.exe',
      'C:\\Program Files\\gs\\gs9.55.0\\bin\\gswin64c.exe',
      'C:\\Program Files\\gs\\gs9.54.0\\bin\\gswin64c.exe',
      'C:\\Program Files\\gs\\gs9.53.3\\bin\\gswin64c.exe',
      // ƒê∆∞·ªùng d·∫´n 32-bit
      'C:\\Program Files (x86)\\gs\\gs10.05.0\\bin\\gswin32c.exe', // Th√™m phi√™n b·∫£n 10.05.0
      'C:\\Program Files (x86)\\gs\\gs10.02.0\\bin\\gswin32c.exe',
      'C:\\Program Files (x86)\\gs\\gs9.56.1\\bin\\gswin32c.exe',
      // ƒê∆∞·ªùng d·∫´n Linux/Mac
      '/usr/bin/gs',
      '/usr/local/bin/gs',
      '/opt/homebrew/bin/gs'
    ];

    // Th·ª≠ t√¨m trong c√°c ƒë∆∞·ªùng d·∫´n c√≥ th·ªÉ
    for (const gsPath of possibleGsPaths) {
      try {
        if (fs.existsSync(gsPath)) {
          // Th·ª≠ th·ª±c thi ƒë·ªÉ ki·ªÉm tra
          try {
            const version = execSync(`"${gsPath}" -v`, { stdio: 'pipe', encoding: 'utf8' });
            return gsPath;
          } catch (execError) {
            // Ti·∫øp t·ª•c t√¨m ƒë∆∞·ªùng d·∫´n kh√°c
            console.debug(`ƒê∆∞·ªùng d·∫´n ${gsPath} t·ªìn t·∫°i nh∆∞ng kh√¥ng th·ªÉ th·ª±c thi: ${execError.message}`);
          }
        }
      } catch (existsError) {
        // B·ªè qua l·ªói khi ki·ªÉm tra t·ªìn t·∫°i
      }
    }

    // Th·ª≠ th·ª±c thi c√°c l·ªánh GhostScript tr·ª±c ti·∫øp (s·ª≠ d·ª•ng PATH)
    try {
      const version = execSync('gswin64c -v', { stdio: 'pipe', encoding: 'utf8' });
      return 'gswin64c';
    } catch (gswin64cError) {
      try {
        const version = execSync('gswin32c -v', { stdio: 'pipe', encoding: 'utf8' });
        return 'gswin32c';
      } catch (gswin32cError) {
        try {
          const version = execSync('gs -v', { stdio: 'pipe', encoding: 'utf8' });
          return 'gs';
        } catch (gsError) {
          // No GS in PATH
        }
      }
    }

    // Th·ª≠ truy c·∫≠p tr·ª±c ti·∫øp ƒë∆∞·ªùng d·∫´n ƒë√£ bi·∫øt ho·∫°t ƒë·ªông
    try {
      // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n b·∫°n ƒë√£ bi·∫øt ch·∫Øc ch·∫Øn ho·∫°t ƒë·ªông
      const knownPath = 'C:\\Program Files\\gs\\gs10.05.0\\bin\\gswin64c.exe';
      if (fs.existsSync(knownPath)) {
        return knownPath;
      }
    } catch (knownPathError) {
      // Handle error
      console.debug(`Kh√¥ng th·ªÉ truy c·∫≠p ƒë∆∞·ªùng d·∫´n ƒë√£ bi·∫øt: ${knownPathError.message}`);
    }
    
    throw new Error('GhostScript kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng th·ªÉ t√¨m th·∫•y. Vui l√≤ng c√†i ƒë·∫∑t GhostScript tr∆∞·ªõc khi s·ª≠ d·ª•ng API n√†y.');
  } catch (error) {
    console.error(`L·ªói khi t√¨m GhostScript: ${error.message}`);
    throw error; // N√©m l·∫°i l·ªói v√¨ ƒë√¢y l√† m·ªôt h√†m quan tr·ªçng
  }
}

// H√†m m·ªõi: Ki·ªÉm tra v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t d·ª±a tr√™n t√†i nguy√™n h·ªá th·ªëng
export function optimizePerformance(config = {}) {
  try {
    // Ki·ªÉm tra t√†i nguy√™n h·ªá th·ªëng
    const cpuCount = os.cpus().length;
    const totalMemory = Math.floor(os.totalmem() / (1024 * 1024 * 1024)); // GB
    const freeMemory = Math.floor(os.freemem() / (1024 * 1024 * 1024)); // GB
    
    console.log(`üñ•Ô∏è H·ªá th·ªëng c√≥ ${cpuCount} CPU, ${totalMemory}GB RAM (${freeMemory}GB tr·ªëng)`);
    
    // Ghi c·ª©ng DPI l√† 350 theo y√™u c·∫ßu
    const fixedDpi = 350;
    
    // T√≠nh to√°n t·ªëi ∆∞u
    let optimizedConfig = { ...config };
    
    // Ghi ƒë√® gi√° tr·ªã DPI
    optimizedConfig.dpi = fixedDpi;
    
    // T·ªëi ∆∞u s·ªë l∆∞·ª£ng worker d·ª±a tr√™n CPU v√† RAM
    if (totalMemory >= 16 && freeMemory > 8) {
      // H·ªá th·ªëng c·ª±c m·∫°nh: R·∫•t nhi·ªÅu RAM (>16GB)
      console.log(`üöÄüöÄ Ph√°t hi·ªán h·ªá th·ªëng RAM cao (${totalMemory}GB), t·ªëi ∆∞u cho hi·ªáu su·∫•t t·ªëi ƒëa`);
      
      optimizedConfig.maxWorkers = Math.min(cpuCount, 16); // T·ªëi ƒëa 16 worker
      optimizedConfig.batchSize = Math.min(Math.floor(freeMemory / 2), 12); // D·ª±a v√†o RAM tr·ªëng, t·ªëi ƒëa 12
      optimizedConfig.waitTime = 50; // Gi·∫£m th·ªùi gian ch·ªù xu·ªëng t·ªëi thi·ªÉu
      optimizedConfig.highPerformanceMode = true;
      optimizedConfig.ultra = true; // Ch·∫ø ƒë·ªô c·ª±c cao
      
      // Ghi c·ª©ng DPI l√† 350
      optimizedConfig.dpi = fixedDpi;
      optimizedConfig.gsParallel = Math.min(Math.ceil(cpuCount / 2), 8); // T·ªëi ƒëa 8 lu·ªìng GhostScript
      
      console.log(`‚ö° Ch·∫ø ƒë·ªô Ultra Performance: ${optimizedConfig.maxWorkers} worker, batch ${optimizedConfig.batchSize}, DPI: ${optimizedConfig.dpi}`);
    } else if (cpuCount > 4 && freeMemory > 4) {
      // H·ªá th·ªëng m·∫°nh: Nhi·ªÅu CPU v√† RAM
      console.log(`üöÄ Ph√°t hi·ªán h·ªá th·ªëng m·∫°nh, t·ªëi ∆∞u cho hi·ªáu su·∫•t cao`);
      
      optimizedConfig.maxWorkers = Math.min(cpuCount - 1, 8); // T·ªëi ƒëa 8 worker ho·∫∑c (s·ªë CPU - 1)
      optimizedConfig.batchSize = Math.min(Math.floor(freeMemory / 2), 6); // D·ª±a v√†o RAM tr·ªëng
      optimizedConfig.waitTime = 100; // Gi·∫£m th·ªùi gian ch·ªù
      optimizedConfig.highPerformanceMode = true;
      
      // Ghi c·ª©ng DPI l√† 350
      optimizedConfig.dpi = fixedDpi;
      optimizedConfig.gsParallel = Math.min(Math.floor(cpuCount / 2), 4); // S·ªë lu·ªìng GhostScript
    } else if (cpuCount > 2 && freeMemory > 2) {
      // H·ªá th·ªëng trung b√¨nh
      console.log(`‚ö° Ph√°t hi·ªán h·ªá th·ªëng ƒë·ªß m·∫°nh, t·ªëi ∆∞u c√¢n b·∫±ng`);
      
      optimizedConfig.maxWorkers = Math.min(cpuCount - 1, 4);
      optimizedConfig.batchSize = Math.min(Math.floor(freeMemory / 3), 3);
      optimizedConfig.waitTime = 200;
      optimizedConfig.highPerformanceMode = false;
      
      // Ghi c·ª©ng DPI l√† 350
      optimizedConfig.dpi = fixedDpi;
      optimizedConfig.gsParallel = Math.min(Math.floor(cpuCount / 2), 2);
    } else {
      // H·ªá th·ªëng y·∫øu ho·∫∑c t·∫£i cao
      console.log(`üê¢ Ph√°t hi·ªán h·ªá th·ªëng t√†i nguy√™n th·∫•p, t·ªëi ∆∞u cho ·ªïn ƒë·ªãnh`);
      
      optimizedConfig.maxWorkers = 2;
      optimizedConfig.batchSize = 2;
      optimizedConfig.waitTime = 300;
      optimizedConfig.highPerformanceMode = false;
      
      // Ghi c·ª©ng DPI l√† 350
      optimizedConfig.dpi = fixedDpi;
      optimizedConfig.gsParallel = 1;
    }
    
    console.log(`‚úÖ C·∫•u h√¨nh t·ªëi ∆∞u: ${optimizedConfig.maxWorkers} worker, batch ${optimizedConfig.batchSize}, wait ${optimizedConfig.waitTime}ms, DPI ${optimizedConfig.dpi}`);
    return optimizedConfig;
  } catch (error) {
    console.warn(`‚ö†Ô∏è L·ªói khi t·ªëi ∆∞u hi·ªáu su·∫•t: ${error.message}. S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh.`);
    return { ...config, dpi: 350 }; // V·∫´n ghi ƒë√® DPI=350 ngay c·∫£ khi c√≥ l·ªói
  }
}

// T·ªëi ∆∞u x·ª≠ l√Ω song song ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t v√† tr√°nh tr√†n b·ªô nh·ªõ
export async function processBatches(items, processFunc, maxConcurrent, waitTime = 200) {
  try {
    const results = [];
    
    // Gi·∫£m k√≠ch th∆∞·ªõc batch ƒë·ªÉ tr√°nh s·ª≠ d·ª•ng qu√° nhi·ªÅu b·ªô nh·ªõ c√πng l√∫c
    const safeBatchSize = Math.min(maxConcurrent, 2); // Gi·∫£m xu·ªëng 2 item c√πng l√∫c ƒë·ªÉ gi·∫£m t·∫£i b·ªô nh·ªõ
    
    for (let i = 0; i < items.length; i += safeBatchSize) {
      try {
        // X·ª≠ l√Ω theo batch nh·ªè
        const currentBatch = items.slice(i, i + safeBatchSize);
        
        // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω batch hi·ªán t·∫°i
        const batch = currentBatch.map(processFunc);
        
        let batchResults;
        try {
          batchResults = await Promise.allSettled(batch);
        } catch (batchError) {
          console.error(`L·ªói khi x·ª≠ l√Ω batch ${Math.floor(i / safeBatchSize) + 1}: ${batchError.message}`);
          batchResults = currentBatch.map(item => ({
            status: 'rejected',
            reason: batchError
          }));
        }
        
        // Th√™m k·∫øt qu·∫£ v√†o m·∫£ng k·∫øt qu·∫£
        results.push(...batchResults);
        
        // Ch·ªß ƒë·ªông gi·∫£i ph√≥ng b·ªô nh·ªõ sau m·ªói batch
        forceGarbageCollection();
        
        // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c batch ƒë·ªÉ cho h·ªá th·ªëng th·ªùi gian x·ª≠ l√Ω b·ªô nh·ªõ
        await new Promise(resolve => setTimeout(resolve, waitTime));
      } catch (batchProcessError) {
        console.error(`L·ªói x·ª≠ l√Ω batch t·∫°i v·ªã tr√≠ ${i}: ${batchProcessError.message}`);
        // Gi·∫£i ph√≥ng b·ªô nh·ªõ khi c√≥ l·ªói
        forceGarbageCollection();
      }
    }
    
    return results;
  } catch (error) {
    console.error(`L·ªói x·ª≠ l√Ω batches: ${error.message}`);
    throw error;
  }
}

// H√†m escape t√™n file cho truy v·∫•n Google Drive
export function escapeDriveQueryString(str) {
  if (!str) return '';
  // Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong truy v·∫•n Google Drive
  return str.replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/\\/g, '\\\\');
}

// H√†m c·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o MongoDB
export async function updateProcessedFileInDB(mongoClient, courseId, originalUrl, processedData) {
  try {
    if (!mongoClient || !courseId || !originalUrl || !processedData) {
      console.error('Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t DB');
      return { success: false, error: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt' };
    }

    console.log(`C·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o DB: ${originalUrl} -> ${processedData.downloadLink}`);
    
    const db = mongoClient.db('kimvan');
    const collection = db.collection('courses');
    
    // T√¨m kh√≥a h·ªçc theo ID
    const course = await collection.findOne({ _id: courseId });
    
    if (!course) {
      console.error(`Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc v·ªõi ID: ${courseId}`);
      return { success: false, error: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' };
    }
    
    // Kh·ªüi t·∫°o processedDriveFiles n·∫øu ch∆∞a c√≥
    if (!course.processedDriveFiles) {
      course.processedDriveFiles = [];
    }
    
    // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥ ch∆∞a
    const existingFileIndex = course.processedDriveFiles.findIndex(
      file => file.originalUrl === originalUrl
    );
    
    // Ki·ªÉm tra link c≈© n·∫øu c√≥
    if (existingFileIndex !== -1) {
      const oldProcessedUrl = course.processedDriveFiles[existingFileIndex].processedUrl;
      if (oldProcessedUrl) {
        console.log(`Link ƒë√£ x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥: ${oldProcessedUrl}`);
        
        // N·∫øu link c≈© kh√°c link m·ªõi, ki·ªÉm tra tr·∫°ng th√°i link c≈©
        if (oldProcessedUrl !== (processedData.viewLink || processedData.downloadLink)) {
          console.log(`Ki·ªÉm tra tr·∫°ng th√°i link ƒë√£ x·ª≠ l√Ω: ${oldProcessedUrl}`);
          
          // ·ªû ƒë√¢y c√≥ th·ªÉ th√™m m√£ ƒë·ªÉ ki·ªÉm tra xem link c≈© c√≤n truy c·∫≠p ƒë∆∞·ª£c kh√¥ng
          // V√≠ d·ª•: g·ª≠i m·ªôt request ƒë·∫øn link c≈© ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
          // Nh∆∞ng ƒë∆°n gi·∫£n h∆°n, ch√∫ng ta ch·ªâ log th√¥ng b√°o l√† link ƒë√£ thay ƒë·ªïi
          console.log(`Link ƒë√£ x·ª≠ l√Ω kh√¥ng c√≤n t·ªìn t·∫°i: ${oldProcessedUrl}`);
          console.log(`S·∫Ω c·∫≠p nh·∫≠t v·ªõi link m·ªõi: ${processedData.viewLink || processedData.downloadLink}`);
        }
      }
    }
    
    // T·∫°o ƒë·ªëi t∆∞·ª£ng l∆∞u th√¥ng tin file ƒë√£ x·ª≠ l√Ω
    const processedFileData = {
      originalUrl,
      processedUrl: processedData.viewLink || processedData.downloadLink,
      downloadUrl: processedData.downloadLink,
      viewUrl: processedData.viewLink,
      fileName: processedData.processedFilename || processedData.originalFilename,
      originalFileName: processedData.originalFilename,
      updatedAt: new Date(),
      isSkipped: processedData.skipped || false
    };
    
    // C·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi th√¥ng tin file
    if (existingFileIndex !== -1) {
      // C·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ t·ªìn t·∫°i
      await collection.updateOne(
        { _id: courseId },
        { $set: { [`processedDriveFiles.${existingFileIndex}`]: processedFileData } }
      );
      console.log(`ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω trong DB: ${originalUrl}`);
      console.log(`‚úÖ X·ª≠ l√Ω th√†nh c√¥ng, URL m·ªõi: ${processedData.viewLink}`);
    } else {
      // Th√™m th√¥ng tin file m·ªõi
      await collection.updateOne(
        { _id: courseId },
        { $push: { processedDriveFiles: processedFileData } }
      );
      console.log(`ƒê√£ th√™m th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o DB: ${originalUrl}`);
      console.log(`‚úÖ X·ª≠ l√Ω th√†nh c√¥ng, URL m·ªõi: ${processedData.viewLink}`);
    }
    
    return { success: true };
  } catch (error) {
    console.error(`L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin file v√†o DB: ${error.message}`);
    return { success: false, error: error.message };
  }
} 