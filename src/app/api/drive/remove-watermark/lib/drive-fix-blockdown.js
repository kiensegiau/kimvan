/**
 * Module h·ªó tr·ª£ t·∫£i file PDF b·ªã ch·∫∑n t·ª´ Google Drive
 * S·ª≠ d·ª•ng puppeteer ƒë·ªÉ ch·ª•p c√°c trang PDF v√† t·∫°o l·∫°i file
 * T√≠ch h·ª£p tr·ª±c ti·∫øp x·ª≠ l√Ω watermark tr√™n c√°c ·∫£nh ƒë√£ ch·ª•p
 */

import fs from 'fs';
import path from 'path';
import puppeteer from 'puppeteer-core';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import PDFDocument from 'pdfkit';
import sharp from 'sharp';
import axios from 'axios';
import { cleanupTempFiles } from './utils.js';
import { DEFAULT_CONFIG } from './config.js';

// Import c√°c h√†m x·ª≠ l√Ω watermark t·ª´ module watermark.js
import { 
  processImage, 
  addCustomBackground,
  createPDFFromProcessedImages,
  createPDFFromRawImages
} from './watermark.js';

// H·∫±ng s·ªë
const MAX_CONCURRENT = 2;
const MAX_RETRIES = 3;
const RETRY_DELAY = 5000;
const BATCH_SIZE = 5;

// ƒê∆∞·ªùng d·∫´n Chrome m·∫∑c ƒë·ªãnh d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
function getChromePath() {
  switch (os.platform()) {
    case 'win32':
      return 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe';
    case 'darwin': // macOS
      return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
    default: // Linux v√† c√°c h·ªá ƒëi·ªÅu h√†nh kh√°c
      return '/usr/bin/google-chrome';
  }
}

// T·∫°o th∆∞ m·ª•c h·ªì s∆° ng∆∞·ªùi d√πng Chrome
function createChromeUserProfile() {
  // S·ª≠ d·ª•ng th∆∞ m·ª•c c·ªë ƒë·ªãnh thay v√¨ t·∫°o m·ªõi m·ªói l·∫ßn
  const profilePath = path.join(os.homedir(), 'drive-pdf-watermark-profile');
  fs.mkdirSync(profilePath, { recursive: true });
  console.log(`üîë S·ª≠ d·ª•ng h·ªì s∆° Chrome t·∫°i: ${profilePath}`);
  return profilePath;
}

/**
 * T·∫£i xu·ªëng file PDF b·ªã ch·∫∑n t·ª´ Google Drive v√† x·ª≠ l√Ω watermark
 * @param {string} fileId - ID c·ªßa file Google Drive
 * @param {string} fileName - T√™n file
 * @param {string} tempDir - Th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file
 * @param {Object} watermarkConfig - C·∫•u h√¨nh x·ª≠ l√Ω watermark (t√πy ch·ªçn)
 * @returns {Promise<{success: boolean, filePath: string, error: string}>}
 */
export async function downloadBlockedPDF(fileId, fileName, tempDir, watermarkConfig = {}) {
  let browser = null;
  let page = null;
  let downloadedImages = [];
  let processedImages = [];
  const pageRequests = new Map();
  let cookies = null;
  let userAgent = null;
  
  // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!tempDir) {
    tempDir = path.join(os.tmpdir(), uuidv4());
    fs.mkdirSync(tempDir, { recursive: true });
  }
  
  const imagesDir = path.join(tempDir, 'images');
  const processedDir = path.join(tempDir, 'processed');
  fs.mkdirSync(imagesDir, { recursive: true });
  fs.mkdirSync(processedDir, { recursive: true });
  
  // T·∫°o th∆∞ m·ª•c h·ªì s∆° cho Chrome
  const profilePath = createChromeUserProfile();
  
  const outputPath = path.join(tempDir, `${path.basename(fileName, '.pdf')}_clean.pdf`);
  
  // Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
  const startTime = Date.now();
  
  // K·∫øt h·ª£p config m·∫∑c ƒë·ªãnh v·ªõi config ƒë∆∞·ª£c truy·ªÅn v√†o
  const config = { ...DEFAULT_CONFIG, ...watermarkConfig };
  
  try {
    console.log(`üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file b·ªã ch·∫∑n: ${fileName}`);
    
    // C·∫•u h√¨nh m·ªü r·ªông cho Puppeteer
    const chromePath = getChromePath();
    console.log(`üåê S·ª≠ d·ª•ng Chrome: ${chromePath}`);
    
    // Kh·ªüi t·∫°o tr√¨nh duy·ªát v·ªõi c·∫•u h√¨nh n√¢ng cao
    browser = await puppeteer.launch({
      headless: false,
      channel: "chrome",
      executablePath: chromePath,
      args: [
        "--start-maximized",
        `--user-data-dir=${profilePath}`,
        "--enable-extensions",
        "--remote-debugging-port=9222",
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-web-security",
        "--disable-features=IsolateOrigins,site-per-process",
        "--disable-site-isolation-trials",
        "--disable-features=BlockInsecurePrivateNetworkRequests",
        "--disable-features=SameSiteByDefaultCookies,CookiesWithoutSameSiteMustBeSecure",
        "--no-first-run",
        "--no-default-browser-check",
        "--disable-popup-blocking",
        "--disable-notifications",
        "--disable-infobars",
        "--disable-translate",
        "--allow-running-insecure-content",
        "--password-store=basic",
      ],
      defaultViewport: null,
      ignoreDefaultArgs: ["--enable-automation"],
      // TƒÉng timeout l√™n 120s cho m√°y y·∫øu
      timeout: 120000,
      // Th√™m slowMo ƒë·ªÉ l√†m ch·∫≠m puppeteer cho m√°y y·∫øu
      slowMo: 100,
    });
    
    // T·∫°o tab m·ªõi
    page = await browser.newPage();
    await page.setDefaultNavigationTimeout(60000);
    
    // Theo d√µi c√°c request ·∫£nh
    await page.setRequestInterception(true);
    page.on('request', (request) => {
      const url = request.url();
      
      // Ki·ªÉm tra c·∫£ 2 pattern: viewerng/img v√† viewer2/prod
      const isViewerNg = url.includes('viewerng/img');
      const isViewer2 = url.includes('viewer2/prod');
      
      if ((isViewerNg || isViewer2) && url.includes('page=')) {
        const pageMatch = url.match(/[?&]page=(\d+)/);
        if (pageMatch) {
          const pageNum = parseInt(pageMatch[1]);
          if (!pageRequests.has(pageNum)) {
            pageRequests.set(pageNum, url);
          }
        }
      }
      request.continue();
    });
    
    // M·ªü file PDF tr√™n Google Drive
    console.log(`üåê M·ªü PDF viewer cho file: ${fileId}`);
    await page.goto(`https://drive.google.com/file/d/${fileId}/view`, {
      waitUntil: 'networkidle2',
      timeout: 300000 // TƒÉng timeout cho trang ƒë·ªÉ t·∫£i tr·ªçn v·∫πn
    });
    
    // Scroll ƒë·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang
    console.log(`üìú B·∫Øt ƒë·∫ßu scroll ƒë·ªÉ t·∫£i trang...`);
    await scrollToLoadAllPages(page, pageRequests);
    console.log(`üìä ƒê√£ ph√°t hi·ªán ${pageRequests.size} trang`);
    
    // L∆∞u cookies v√† userAgent ƒë·ªÉ t·∫£i ·∫£nh sau n√†y
    cookies = await page.cookies();
    userAgent = await page.evaluate(() => navigator.userAgent);
    
    // ƒê√≥ng page sau khi l·∫•y th√¥ng tin
    await page.close();
    page = null;
    
    // T·∫£i xu·ªëng c√°c ·∫£nh trang
    console.log(`üì• T·∫£i xu·ªëng ${pageRequests.size} trang...`);
    downloadedImages = await downloadAllPageImages(pageRequests, cookies, userAgent, imagesDir);
    
    // X·ª≠ l√Ω watermark tr√™n t·ª´ng ·∫£nh - s·ª≠ d·ª•ng h√†m t·ª´ module watermark
    console.log(`üîß X·ª≠ l√Ω watermark tr√™n ${downloadedImages.length} ·∫£nh...`);
    // Chuy·ªÉn ƒë·ªïi ·∫£nh webp sang png tr∆∞·ªõc khi x·ª≠ l√Ω watermark
    const pngImages = await convertAllImagesToPng(downloadedImages, imagesDir);
    // Sau ƒë√≥ x·ª≠ l√Ω watermark tr√™n c√°c ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
    processedImages = await processAllImages(pngImages, processedDir, config);
    
    // T·∫°o file PDF t·ª´ c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω
    console.log(`üìÑ T·∫°o file PDF t·ª´ ${processedImages.length} ·∫£nh ƒë√£ x·ª≠ l√Ω...`);
    
    // Th√™m h√¨nh n·ªÅn n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if (config.backgroundImage && fs.existsSync(config.backgroundImage)) {
      console.log(`üñºÔ∏è Th√™m h√¨nh n·ªÅn t√πy ch·ªânh: ${config.backgroundImage}`);
      await createPDFFromProcessedImages(processedImages, outputPath, config);
    } else {
      await createPDFFromRawImages(processedImages, outputPath);
    }
    
    // Ki·ªÉm tra file PDF ƒë√£ t·∫°o
    if (!fs.existsSync(outputPath)) {
      throw new Error('Kh√¥ng th·ªÉ t·∫°o file PDF');
    }
    
    const fileSize = fs.statSync(outputPath).size;
    if (fileSize === 0) {
      throw new Error('File PDF ƒë∆∞·ª£c t·∫°o nh∆∞ng k√≠ch th∆∞·ªõc b·∫±ng 0');
    }
    
    // T√≠nh th·ªùi gian x·ª≠ l√Ω
    const processingTime = (Date.now() - startTime) / 1000;
    
    console.log(`‚úÖ ƒê√£ t·∫°o file PDF th√†nh c√¥ng: ${outputPath} (${(fileSize / 1024 / 1024).toFixed(2)}MB) trong ${processingTime.toFixed(2)} gi√¢y`);
    
    return {
      success: true,
      filePath: outputPath,
      fileName: `${path.basename(fileName, '.pdf')}_clean.pdf`,
      originalSize: 0, // Kh√¥ng th·ªÉ bi·∫øt k√≠ch th∆∞·ªõc g·ªëc
      processedSize: fileSize,
      processingTime: processingTime.toFixed(2)
    };
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫£i file b·ªã ch·∫∑n: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  } finally {
    // ƒê√≥ng browser n·∫øu c√≤n m·ªü
    if (page) {
      await page.close().catch(() => {});
    }
    if (browser) {
      await browser.close().catch(() => {});
    }
    
    // D·ªçn d·∫πp c√°c file ·∫£nh t·∫°m
    try {
      for (const image of [...downloadedImages, ...processedImages]) {
        if (fs.existsSync(image)) {
          fs.unlinkSync(image);
        }
      }
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp ·∫£nh t·∫°m: ${cleanupError.message}`);
    }
    
    // D·ªçn d·∫πp th∆∞ m·ª•c h·ªì s∆° Chrome
    try {
      // Kh√¥ng x√≥a th∆∞ m·ª•c h·ªì s∆° Chrome n·ªØa ƒë·ªÉ gi·ªØ l·∫°i d·ªØ li·ªáu ƒëƒÉng nh·∫≠p
      console.log(`‚úÖ Gi·ªØ l·∫°i h·ªì s∆° Chrome ƒë·ªÉ l∆∞u ƒëƒÉng nh·∫≠p cho l·∫ßn sau: ${profilePath}`);
      // cleanupTempFiles(profilePath);
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c h·ªì s∆° Chrome: ${cleanupError.message}`);
    }
  }
}

/**
 * Scroll ƒë·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang c·ªßa PDF
 * @param {Page} page - Puppeteer page
 * @param {Map} pageRequests - Map l∆∞u tr·ªØ c√°c request trang
 */
async function scrollToLoadAllPages(page, pageRequests) {
  try {
    let lastPageCount = 0;
    let noNewPagesCount = 0;
    const MAX_NO_NEW_PAGES = 10;
    const SCROLL_INTERVAL = 200;
    const SPACE_PRESSES_PER_BATCH = 2;
    const BATCH_INTERVAL = 500;
    const MAX_SCROLL_ATTEMPTS = 100;
    let scrollAttempts = 0;
    
    // Scroll b·∫±ng c√°ch nh·∫•n ph√≠m Space
    while (noNewPagesCount < MAX_NO_NEW_PAGES && scrollAttempts < MAX_SCROLL_ATTEMPTS) {
      for (let i = 0; i < SPACE_PRESSES_PER_BATCH; i++) {
        await page.keyboard.press('Space');
        await new Promise(resolve => setTimeout(resolve, SCROLL_INTERVAL));
      }
      
      scrollAttempts++;
      await new Promise(resolve => setTimeout(resolve, BATCH_INTERVAL));
      
      const currentPageCount = pageRequests.size;
      
      if (currentPageCount > lastPageCount) {
        console.log(`üìÑ ƒê√£ ph√°t hi·ªán: ${currentPageCount} trang (+${currentPageCount - lastPageCount})`);
        lastPageCount = currentPageCount;
        noNewPagesCount = 0;
      } else {
        noNewPagesCount++;
      }
      
      if (currentPageCount > 0 && noNewPagesCount >= MAX_NO_NEW_PAGES) {
        console.log(`‚úÖ Kh√¥ng ph√°t hi·ªán trang m·ªõi sau ${noNewPagesCount} l·∫ßn th·ª≠, k·∫øt th√∫c scroll`);
        break;
      }
    }
    
    // Th√™m v√†i l·∫ßn nh·∫•n space cu·ªëi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ t·∫£i h·∫øt
    for (let i = 0; i < 5; i++) {
      await page.keyboard.press('Space');
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`‚úÖ ƒê√£ ho√†n th√†nh scroll v·ªõi ${pageRequests.size} trang`);
  } catch (error) {
    console.error(`‚ùå L·ªói khi scroll: ${error.message}`);
    throw error;
  }
}

/**
 * T·∫£i xu·ªëng t·∫•t c·∫£ ·∫£nh trang
 * @param {Map} pageRequests - Map c√°c URL trang
 * @param {Array} cookies - Cookies ƒë·ªÉ x√°c th·ª±c
 * @param {string} userAgent - User-Agent ƒë·ªÉ request
 * @param {string} imagesDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ t·∫£i
 */
async function downloadAllPageImages(pageRequests, cookies, userAgent, imagesDir) {
  const downloadedImages = [];
  const cookieStr = cookies.map(c => `${c.name}=${c.value}`).join('; ');
  
  // S·∫Øp x·∫øp c√°c trang theo th·ª© t·ª± tƒÉng d·∫ßn
  const pages = Array.from(pageRequests.entries()).sort(([a], [b]) => a - b);
  
  // Chia th√†nh c√°c batch ƒë·ªÉ tr√°nh qu√° t·∫£i
  for (let i = 0; i < pages.length; i += BATCH_SIZE) {
    const batch = pages.slice(i, i + BATCH_SIZE);
    console.log(`üì• ƒêang t·∫£i batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(pages.length / BATCH_SIZE)}...`);
    
    // T·∫£i song song trong batch
    const downloadPromises = batch.map(async ([pageNum, url]) => {
      let retries = MAX_RETRIES;
      
      while (retries > 0) {
        try {
          console.log(`üìÑ T·∫£i trang ${pageNum}...`);
          
          const response = await axios({
            method: 'get',
            url: url,
            responseType: 'arraybuffer',
            timeout: 30000,
            headers: {
              'Cookie': cookieStr,
              'User-Agent': userAgent,
              'Referer': 'https://drive.google.com/',
              'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
            }
          });
          
          // X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng ·∫£nh t·ª´ Content-Type
          const contentType = response.headers['content-type'];
          let extension = 'png'; // M·∫∑c ƒë·ªãnh l√† png
          
          if (contentType) {
            if (contentType.includes('jpeg') || contentType.includes('jpg')) {
              extension = 'jpg';
            } else if (contentType.includes('webp')) {
              extension = 'webp';
            }
          }
          
          // T·∫°o t√™n file v·ªõi ƒëu√¥i ph√π h·ª£p
          const imagePath = path.join(imagesDir, `page_${String(pageNum).padStart(3, '0')}.${extension}`);
          
          // L∆∞u file
          fs.writeFileSync(imagePath, Buffer.from(response.data));
          console.log(`‚úÖ ƒê√£ t·∫£i trang ${pageNum} (${extension})`);
          
          // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ t·∫£i
          downloadedImages[pageNum] = imagePath;
          break;
        } catch (error) {
          retries--;
          console.warn(`‚ö†Ô∏è L·ªói t·∫£i trang ${pageNum} (c√≤n ${retries} l·∫ßn th·ª≠): ${error.message}`);
          
          if (retries <= 0) {
            console.error(`‚ùå Kh√¥ng th·ªÉ t·∫£i trang ${pageNum} sau ${MAX_RETRIES} l·∫ßn th·ª≠`);
          } else {
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
          }
        }
      }
    });
    
    // Ch·ªù t·∫•t c·∫£ trong batch ho√†n th√†nh
    await Promise.all(downloadPromises);
    
    // ƒê·ª£i gi·ªØa c√°c batch ƒë·ªÉ tr√°nh qu√° t·∫£i
    if (i + BATCH_SIZE < pages.length) {
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // Tr·∫£ v·ªÅ m·∫£ng ch·ªâ ch·ª©a c√°c ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá
  return downloadedImages.filter(Boolean);
}

/**
 * Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ ·∫£nh sang ƒë·ªãnh d·∫°ng PNG
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
 */
async function convertAllImagesToPng(images, outputDir) {
  const convertedImages = [];
  
  // S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª± trang
  const sortedImages = images.sort((a, b) => {
    try {
      const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
      const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
      return pageA - pageB;
    } catch (error) {
      return 0;
    }
  });
  
  // Chuy·ªÉn ƒë·ªïi t·ª´ng ·∫£nh sang png n·∫øu c·∫ßn
  for (let i = 0; i < sortedImages.length; i++) {
    const imagePath = sortedImages[i];
    const pageNum = parseInt(path.basename(imagePath).match(/page_(\d+)/)[1]);
    const extension = path.extname(imagePath);
    
    // N·∫øu ƒë√£ l√† png, kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi
    if (extension.toLowerCase() === '.png') {
      convertedImages.push(imagePath);
      continue;
    }
    
    // Chuy·ªÉn ƒë·ªïi sang png
    const pngPath = path.join(outputDir, `page_${String(pageNum).padStart(3, '0')}.png`);
    
    try {
      console.log(`üîÑ Chuy·ªÉn ƒë·ªïi trang ${pageNum} t·ª´ ${extension} sang png...`);
      await sharp(imagePath)
        .toFormat('png')
        .toFile(pngPath);
      console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi trang ${pageNum} sang png`);
      convertedImages.push(pngPath);
    } catch (error) {
      console.error(`‚ùå L·ªói chuy·ªÉn ƒë·ªïi trang ${pageNum} sang png: ${error.message}`);
      // N·∫øu kh√¥ng chuy·ªÉn ƒë·ªïi ƒë∆∞·ª£c, gi·ªØ ·∫£nh g·ªëc
      convertedImages.push(imagePath);
    }
  }
  
  return convertedImages;
}

/**
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c ·∫£nh b·∫±ng c√°ch s·ª≠ d·ª•ng h√†m processImage t·ª´ module watermark
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
 * @param {Object} config - C·∫•u h√¨nh x·ª≠ l√Ω watermark
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ x·ª≠ l√Ω
 */
async function processAllImages(images, outputDir, config) {
  const processedImages = [];
  
  // S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª± trang
  const sortedImages = images.sort((a, b) => {
    try {
      const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
      const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
      return pageA - pageB;
    } catch (error) {
      return 0;
    }
  });
  
  // S·ª≠ d·ª•ng c·∫•u h√¨nh t·ªëi gi·∫£n ƒë·ªÉ tr√°nh m·∫•t m√†u
  const simpleConfig = {
    backgroundOpacity: config.backgroundOpacity || 0.15
  };
  
  console.log(`üîß S·ª≠ d·ª•ng c·∫•u h√¨nh t·ªëi gi·∫£n ƒë·ªÉ gi·ªØ m√†u s·∫Øc g·ªëc v√† x·ª≠ l√Ω nh·∫π watermark`);
  
  // X·ª≠ l√Ω t·ª´ng ·∫£nh
  for (let i = 0; i < sortedImages.length; i++) {
    const imagePath = sortedImages[i];
    const pageNum = parseInt(path.basename(imagePath).match(/page_(\d+)/)[1]);
    
    // Lu√¥n s·ª≠ d·ª•ng .png cho file ƒë√£ x·ª≠ l√Ω ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
    const processedPath = path.join(outputDir, `page_${String(pageNum).padStart(3, '0')}_processed.png`);
    
    try {
      console.log(`üîç X·ª≠ l√Ω watermark trang ${pageNum}...`);
      
      // S·ª≠ d·ª•ng h√†m processImage t·ª´ module watermark tr·ª±c ti·∫øp tr√™n ·∫£nh g·ªëc
      // B·ªè qua b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω ƒë·ªÉ gi·ªØ m√†u s·∫Øc
      await processImage(imagePath, processedPath, simpleConfig);
      console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω xong trang ${pageNum}`);
      
      // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ x·ª≠ l√Ω
      processedImages.push(processedPath);
    } catch (error) {
      console.error(`‚ùå L·ªói x·ª≠ l√Ω watermark trang ${pageNum}: ${error.message}`);
      // N·∫øu x·ª≠ l√Ω th·∫•t b·∫°i, s·ª≠ d·ª•ng ·∫£nh g·ªëc
      processedImages.push(imagePath);
    }
  }
  
  return processedImages;
} 