/**
 * Module h·ªó tr·ª£ t·∫£i file PDF b·ªã ch·∫∑n t·ª´ Google Drive
 * S·ª≠ d·ª•ng puppeteer ƒë·ªÉ ch·ª•p c√°c trang PDF v√† t·∫°o l·∫°i file
 * T√≠ch h·ª£p tr·ª±c ti·∫øp x·ª≠ l√Ω watermark tr√™n c√°c ·∫£nh ƒë√£ ch·ª•p
 */

import fs from 'fs';
import path from 'path';
import puppeteer from 'puppeteer-core';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import PDFDocument from 'pdfkit';
import sharp from 'sharp';
import axios from 'axios';
import { cleanupTempFiles, processBatches } from './utils.js';
import { DEFAULT_CONFIG } from './config.js';

// Import c√°c h√†m x·ª≠ l√Ω watermark t·ª´ module watermark.js
import { 
  processImage, 
  addCustomBackground,
  createPDFFromProcessedImages,
  createPDFFromRawImages,
  cleanPdf
} from './watermark.js';

// H·∫±ng s·ªë
const MAX_CONCURRENT = 2;
const MAX_RETRIES = 3;
const RETRY_DELAY = 5000;
const BATCH_SIZE = 5;

// ƒê∆∞·ªùng d·∫´n Chrome m·∫∑c ƒë·ªãnh d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
function getChromePath() {
  try {
    switch (os.platform()) {
      case 'win32':
        return 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe';
      case 'darwin': // macOS
        return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
      default: // Linux v√† c√°c h·ªá ƒëi·ªÅu h√†nh kh√°c
        return '/usr/bin/google-chrome';
    }
  } catch (error) {
    console.error(`L·ªói x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n Chrome: ${error.message}`);
    return 'chrome'; // Fallback to PATH
  }
}

// T·∫°o th∆∞ m·ª•c h·ªì s∆° ng∆∞·ªùi d√πng Chrome
function createChromeUserProfile() {
  try {
    // S·ª≠ d·ª•ng th∆∞ m·ª•c c·ªë ƒë·ªãnh thay v√¨ t·∫°o m·ªõi m·ªói l·∫ßn
    const profilePath = path.join(os.homedir(), 'drive-pdf-watermark-profile');
    try {
      fs.mkdirSync(profilePath, { recursive: true });
    } catch (mkdirError) {
      console.error(`L·ªói t·∫°o th∆∞ m·ª•c h·ªì s∆° Chrome: ${mkdirError.message}`);
    }
    
    console.log(`üîë S·ª≠ d·ª•ng h·ªì s∆° Chrome t·∫°i: ${profilePath}`);
    return profilePath;
  } catch (error) {
    console.error(`L·ªói t·∫°o h·ªì s∆° ng∆∞·ªùi d√πng Chrome: ${error.message}`);
    // Fallback to temp directory
    const tempProfilePath = path.join(os.tmpdir(), `chrome-profile-${Date.now()}`);
    fs.mkdirSync(tempProfilePath, { recursive: true });
    return tempProfilePath;
  }
}

/**
 * X·ª≠ l√Ω file PDF ƒë·ªìng nh·∫•t - s·ª≠ d·ª•ng cho c·∫£ PDF th√¥ng th∆∞·ªùng v√† PDF b·ªã ch·∫∑n
 * H√†m n√†y s·∫Ω ph√¢n t√≠ch lo·∫°i PDF v√† g·ªçi ph∆∞∆°ng th·ª©c x·ª≠ l√Ω ph√π h·ª£p
 * @param {string} inputPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF ƒë·∫ßu v√†o
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file PDF ƒë·∫ßu ra
 * @param {Object} config - C·∫•u h√¨nh x·ª≠ l√Ω watermark
 * @param {boolean} isBlocked - C√≥ ph·∫£i PDF b·ªã ch·∫∑n kh√¥ng
 * @param {string} fileId - ID c·ªßa file Google Drive (n·∫øu l√† PDF b·ªã ch·∫∑n)
 * @returns {Promise<{success: boolean, filePath: string, error: string}>}
 */
export async function processPDF(inputPath, outputPath, config = DEFAULT_CONFIG, isBlocked = false, fileId = null) {
  try {
    console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω PDF: ${inputPath || 'PDF b·ªã ch·∫∑n t·ª´ Google Drive'}`);
    
    // Ki·ªÉm tra file t·ªìn t·∫°i (ch·ªâ khi kh√¥ng ph·∫£i PDF b·ªã ch·∫∑n)
    if (!isBlocked && !inputPath) {
      throw new Error(`ƒê∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o kh√¥ng ƒë∆∞·ª£c cung c·∫•p`);
    }
    
    if (!isBlocked && !fs.existsSync(inputPath)) {
      throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${inputPath}`);
    }
    
    // N·∫øu kh√¥ng cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra, t·∫°o ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
    if (!outputPath) {
      if (inputPath) {
        outputPath = inputPath.replace('.pdf', '_clean.pdf');
      } else if (isBlocked && fileId) {
        // T·∫°o ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh cho file b·ªã ch·∫∑n
        const tempDir = path.join(os.tmpdir(), uuidv4());
        fs.mkdirSync(tempDir, { recursive: true });
        outputPath = path.join(tempDir, `blocked_${fileId}_clean.pdf`);
      } else {
        throw new Error('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra');
      }
    }
    
    // Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
    const startTime = Date.now();
    
    let result;
    
    // X·ª≠ l√Ω d·ª±a tr√™n lo·∫°i PDF
    if (isBlocked && fileId) {
      // X·ª≠ l√Ω PDF b·ªã ch·∫∑n t·ª´ Google Drive
      console.log(`üîí Ph√°t hi·ªán PDF b·ªã ch·∫∑n t·ª´ Google Drive, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë·∫∑c bi·ªát...`);
      const fileName = inputPath ? path.basename(inputPath) : `blocked_${fileId}.pdf`;
      
      // Th√™m x·ª≠ l√Ω timeout v√† retry
      let retryCount = 0;
      const maxRetries = 2;
      let lastError = null;
      
      while (retryCount <= maxRetries) {
        try {
          console.log(`Th·ª≠ t·∫£i PDF b·ªã ch·∫∑n l·∫ßn ${retryCount + 1}...`);
          
          // Thi·∫øt l·∫≠p timeout cho to√†n b·ªô qu√° tr√¨nh
          const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Qu√° th·ªùi gian x·ª≠ l√Ω (10 ph√∫t)')), 10 * 60 * 1000);
          });
          
          // Ch·∫°y qu√° tr√¨nh t·∫£i v·ªõi timeout
          result = await Promise.race([
            downloadBlockedPDF(fileId, fileName, path.dirname(outputPath), config),
            timeoutPromise
          ]);
          
          // N·∫øu th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
          if (result && result.success) {
            break;
          } else {
            throw new Error(result?.error || 'Kh√¥ng th·ªÉ t·∫£i PDF b·ªã ch·∫∑n');
          }
        } catch (downloadError) {
          lastError = downloadError;
          retryCount++;
          
          // N·∫øu ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i, throw l·ªói
          if (retryCount > maxRetries) {
            console.error(`‚ùå ƒê√£ th·ª≠ ${maxRetries + 1} l·∫ßn nh∆∞ng kh√¥ng th√†nh c√¥ng: ${downloadError.message}`);
            throw downloadError;
          }
          
          console.log(`‚ö†Ô∏è L·ªói khi t·∫£i PDF b·ªã ch·∫∑n: ${downloadError.message}. Th·ª≠ l·∫°i sau 5 gi√¢y...`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
      }
      
      // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ th√†nh c√¥ng sau t·∫•t c·∫£ c√°c l·∫ßn th·ª≠
      if (!result || !result.success) {
        throw new Error(lastError?.message || 'Kh√¥ng th·ªÉ t·∫£i PDF b·ªã ch·∫∑n sau nhi·ªÅu l·∫ßn th·ª≠');
      }
    } else {
      // X·ª≠ l√Ω PDF th√¥ng th∆∞·ªùng
      console.log(`üìÑ X·ª≠ l√Ω PDF th√¥ng th∆∞·ªùng v·ªõi ph∆∞∆°ng ph√°p lo·∫°i b·ªè watermark...`);
      
      // S·ª≠ d·ª•ng h√†m cleanPdf t·ª´ module watermark.js
      try {
        await cleanPdf(inputPath, outputPath, {
          ...config,
          // ƒê·∫£m b·∫£o logo lu√¥n ƒë∆∞·ª£c th√™m v√†o file PDF th√¥ng th∆∞·ªùng
          forceAddLogo: true
        });
        
        // Ki·ªÉm tra k·∫øt qu·∫£
        if (fs.existsSync(outputPath)) {
          const fileSize = fs.statSync(outputPath).size;
          const processingTime = (Date.now() - startTime) / 1000;
          
          result = {
            success: true,
            filePath: outputPath,
            fileName: path.basename(outputPath),
            originalSize: fs.statSync(inputPath).size,
            processedSize: fileSize,
            processingTime: processingTime.toFixed(2)
          };
        } else {
          throw new Error('Kh√¥ng th·ªÉ t·∫°o file PDF ƒë√£ x·ª≠ l√Ω');
        }
      } catch (cleanError) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω PDF th√¥ng th∆∞·ªùng: ${cleanError.message}`);
        throw cleanError;
      }
    }
    
    // Th√™m h√¨nh n·ªÅn n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if (result.success && config.backgroundImage && fs.existsSync(config.backgroundImage)) {
      try {
        console.log(`üñºÔ∏è Th√™m h√¨nh n·ªÅn t√πy ch·ªânh: ${config.backgroundImage}`);
        const bgOutputPath = await addCustomBackground(result.filePath, config.backgroundImage, config);
        
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ v·ªõi file m·ªõi c√≥ h√¨nh n·ªÅn
        if (fs.existsSync(bgOutputPath)) {
          result.filePath = bgOutputPath;
          result.fileName = path.basename(bgOutputPath);
          result.processedSize = fs.statSync(bgOutputPath).size;
        }
      } catch (bgError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m h√¨nh n·ªÅn: ${bgError.message}`);
        // Ti·∫øp t·ª•c s·ª≠ d·ª•ng file ƒë√£ x·ª≠ l√Ω m√† kh√¥ng c√≥ h√¨nh n·ªÅn
      }
    } else if (!isBlocked && result.success) {
      // ƒê·∫£m b·∫£o file PDF th∆∞·ªùng (kh√¥ng b·ªã kh√≥a) lu√¥n c√≥ logo
      try {
        console.log(`üñºÔ∏è Th√™m logo v√†o file PDF th∆∞·ªùng: ${config.backgroundImage}`);
        // Ki·ªÉm tra xem c√≥ h√¨nh n·ªÅn ƒë∆∞·ª£c c·∫•u h√¨nh kh√¥ng
        if (config.backgroundImage && fs.existsSync(config.backgroundImage)) {
          const bgOutputPath = await addCustomBackground(result.filePath, config.backgroundImage, {
            ...config,
            backgroundOpacity: 0.15 // ƒê·∫∑t ƒë·ªô m·ªù m·∫∑c ƒë·ªãnh cho logo
          });
          
          // C·∫≠p nh·∫≠t k·∫øt qu·∫£ v·ªõi file m·ªõi c√≥ h√¨nh n·ªÅn
          if (fs.existsSync(bgOutputPath)) {
            result.filePath = bgOutputPath;
            result.fileName = path.basename(bgOutputPath);
            result.processedSize = fs.statSync(bgOutputPath).size;
          }
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file logo: ${config.backgroundImage}`);
        }
      } catch (logoError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m logo: ${logoError.message}`);
      }
    }
    
    // T√≠nh to√°n th·ªùi gian x·ª≠ l√Ω t·ªïng c·ªông
    const totalProcessingTime = (Date.now() - startTime) / 1000;
    result.processingTime = totalProcessingTime.toFixed(2);
    
    return result;
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω PDF: ${error.message}`);
    return {
      success: false,
      error: error.message,
      stack: error.stack
    };
  }
}

/**
 * T·∫£i xu·ªëng file PDF b·ªã ch·∫∑n t·ª´ Google Drive v√† x·ª≠ l√Ω watermark
 * @param {string} fileId - ID c·ªßa file Google Drive
 * @param {string} fileName - T√™n file
 * @param {string} tempDir - Th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file
 * @param {Object} watermarkConfig - C·∫•u h√¨nh x·ª≠ l√Ω watermark (t√πy ch·ªçn)
 * @returns {Promise<{success: boolean, filePath: string, error: string}>}
 */
export async function downloadBlockedPDF(fileId, fileName, tempDir, watermarkConfig = {}) {
  let browser = null;
  let page = null;
  let downloadedImages = [];
  let processedImages = [];
  const pageRequests = new Map();
  let cookies = null;
  let userAgent = null;
  
  // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!tempDir) {
    try {
      tempDir = path.join(os.tmpdir(), uuidv4());
      fs.mkdirSync(tempDir, { recursive: true });
    } catch (mkdirError) {
      console.error(`L·ªói t·∫°o th∆∞ m·ª•c t·∫°m: ${mkdirError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c t·∫°m: ${mkdirError.message}`);
    }
  }
  
  const imagesDir = path.join(tempDir, 'images');
  const processedDir = path.join(tempDir, 'processed');
  try {
    fs.mkdirSync(imagesDir, { recursive: true });
    fs.mkdirSync(processedDir, { recursive: true });
  } catch (mkdirError) {
    console.error(`L·ªói t·∫°o th∆∞ m·ª•c con: ${mkdirError.message}`);
    throw new Error(`Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c con: ${mkdirError.message}`);
  }
  
  // T·∫°o th∆∞ m·ª•c h·ªì s∆° cho Chrome
  let profilePath;
  try {
    profilePath = createChromeUserProfile();
  } catch (profileError) {
    console.error(`L·ªói t·∫°o h·ªì s∆° Chrome: ${profileError.message}`);
    profilePath = path.join(tempDir, 'chrome-profile');
    fs.mkdirSync(profilePath, { recursive: true });
  }
  
  const outputPath = path.join(tempDir, `${path.basename(fileName, '.pdf')}_clean.pdf`);
  
  // Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
  const startTime = Date.now();
  
  // K·∫øt h·ª£p config m·∫∑c ƒë·ªãnh v·ªõi config ƒë∆∞·ª£c truy·ªÅn v√†o
  const config = { 
    ...DEFAULT_CONFIG, 
    ...watermarkConfig,
    // Th√™m c√†i ƒë·∫∑t ƒë·∫∑c bi·ªát cho file b·ªã kh√≥a
    isBlockedFile: true,
    enhancedMode: true,
    // ƒêi·ªÅu ch·ªânh c√°c th√¥ng s·ªë ƒë·ªÉ tƒÉng ƒë·ªô n√©t v√† gi·∫£m m·ª©c ƒë·ªô x·ª≠ l√Ω watermark
    brightnessBoost: watermarkConfig.brightnessBoost || 1.05,   // Gi·∫£m t·ª´ 1.1 xu·ªëng 1.05 ƒë·ªÉ gi·ªØ n·ªôi dung
    contrastBoost: watermarkConfig.contrastBoost || 1.2,        // Gi·∫£m t·ª´ 1.35 xu·ªëng 1.2 ƒë·ªÉ kh√¥ng m·∫•t chi ti·∫øt
    sharpenAmount: watermarkConfig.sharpenAmount || 1.5,        // TƒÉng t·ª´ 1.2 l√™n 1.5 ƒë·ªÉ tƒÉng ƒë·ªô n√©t
    saturationAdjust: watermarkConfig.saturationAdjust || 1.3,  // TƒÉng t·ª´ 1.2 l√™n 1.3 ƒë·ªÉ tƒÉng m√†u s·∫Øc
    preserveColors: true,                                       // Gi·ªØ nguy√™n tham s·ªë gi·ªØ m√†u s·∫Øc
    extraWhitening: false,                                      // T·∫Øt ch·∫ø ƒë·ªô l√†m tr·∫Øng th√™m
    aggressiveWatermarkRemoval: false                           // T·∫Øt ch·∫ø ƒë·ªô x·ª≠ l√Ω m·∫°nh nh·∫•t
  };
  
  let fileSize = 0; // Khai b√°o fileSize ·ªü ph·∫°m vi r·ªông h∆°n
  
  try {
    console.log(`üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file b·ªã ch·∫∑n: ${fileName}`);
    
    // C·∫•u h√¨nh m·ªü r·ªông cho Puppeteer
    let chromePath;
    try {
      chromePath = getChromePath();
      console.log(`üåê S·ª≠ d·ª•ng Chrome: ${chromePath}`);
    } catch (chromePathError) {
      console.error(`L·ªói t√¨m Chrome: ${chromePathError.message}`);
      throw new Error(`Kh√¥ng t√¨m th·∫•y Chrome: ${chromePathError.message}`);
    }
    
    // Kh·ªüi t·∫°o tr√¨nh duy·ªát v·ªõi c·∫•u h√¨nh n√¢ng cao
    try {
      browser = await puppeteer.launch({
        headless: false,
        channel: "chrome",
        executablePath: chromePath,
        args: [
          "--start-maximized",
          `--user-data-dir=${profilePath}`,
          "--enable-extensions",
          "--remote-debugging-port=9222",
          "--no-sandbox",
          "--disable-setuid-sandbox",
          "--disable-web-security",
          "--disable-features=IsolateOrigins,site-per-process",
          "--disable-site-isolation-trials",
          "--disable-features=BlockInsecurePrivateNetworkRequests",
          "--disable-features=SameSiteByDefaultCookies,CookiesWithoutSameSiteMustBeSecure",
          "--no-first-run",
          "--no-default-browser-check",
          "--disable-popup-blocking",
          "--disable-notifications",
          "--disable-infobars",
          "--disable-translate",
          "--allow-running-insecure-content",
          "--password-store=basic",
          // Th√™m c√°c flag m·ªõi ƒë·ªÉ ngƒÉn th√¥ng b√°o b·∫£o m·∫≠t
          "--use-fake-ui-for-media-stream",
          "--use-fake-device-for-media-stream",
          "--allow-file-access-from-files",
          "--allow-insecure-localhost",
          "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
          "--disable-blink-features=AutomationControlled"
        ],
        defaultViewport: null,
        ignoreDefaultArgs: ["--enable-automation"],
        // TƒÉng timeout l√™n 120s cho m√°y y·∫øu
        timeout: 120000,
        // Th√™m slowMo ƒë·ªÉ l√†m ch·∫≠m puppeteer cho m√°y y·∫øu
        slowMo: 100,
      });
    } catch (browserError) {
      console.error(`L·ªói kh·ªüi t·∫°o tr√¨nh duy·ªát: ${browserError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Chrome: ${browserError.message}`);
    }
    
    // T·∫°o tab m·ªõi
    try {
      page = await browser.newPage();
      await page.setDefaultNavigationTimeout(60000);
    } catch (pageError) {
      console.error(`L·ªói t·∫°o tab m·ªõi: ${pageError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o tab tr√¨nh duy·ªát: ${pageError.message}`);
    }
    
    // Theo d√µi c√°c request ·∫£nh
    try {
      await page.setRequestInterception(true);
      
      page.on('request', (request) => {
        try {
          const url = request.url();
          
          // Ki·ªÉm tra c·∫£ 2 pattern: viewerng/img v√† viewer2/prod
          const isViewerNg = url.includes('viewerng/img');
          const isViewer2 = url.includes('viewer2/prod');
          
          if ((isViewerNg || isViewer2) && url.includes('page=')) {
            const pageMatch = url.match(/[?&]page=(\d+)/);
            if (pageMatch) {
              const pageNum = parseInt(pageMatch[1]);
              if (!pageRequests.has(pageNum)) {
                pageRequests.set(pageNum, url);
              }
            }
          }
          request.continue();
        } catch (requestError) {
          console.warn(`L·ªói x·ª≠ l√Ω request: ${requestError.message}`);
          request.continue();
        }
      });
    } catch (interceptError) {
      console.error(`L·ªói thi·∫øt l·∫≠p ch·∫∑n request: ${interceptError.message}`);
    }
    
    // M·ªü file PDF tr√™n Google Drive
    try {
      console.log(`üåê M·ªü PDF viewer cho file: ${fileId}`);
      await page.goto(`https://drive.google.com/file/d/${fileId}/view`, {
        waitUntil: 'networkidle2',
        timeout: 300000 // TƒÉng timeout cho trang ƒë·ªÉ t·∫£i tr·ªçn v·∫πn
      });
    } catch (navigationError) {
      console.error(`L·ªói m·ªü file PDF t·ª´ Drive: ${navigationError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ m·ªü file PDF t·ª´ Google Drive: ${navigationError.message}`);
    }
    
    // Scroll ƒë·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang
    try {
      console.log(`üìú B·∫Øt ƒë·∫ßu scroll ƒë·ªÉ t·∫£i trang...`);
      await scrollToLoadAllPages(page, pageRequests);
      console.log(`üìä ƒê√£ ph√°t hi·ªán ${pageRequests.size} trang`);
    } catch (scrollError) {
      console.error(`L·ªói scroll ƒë·ªÉ t·∫£i trang: ${scrollError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang PDF: ${scrollError.message}`);
    }
    
    // L∆∞u cookies v√† userAgent ƒë·ªÉ t·∫£i ·∫£nh sau n√†y
    try {
      cookies = await page.cookies();
      userAgent = await page.evaluate(() => navigator.userAgent);
    } catch (cookieError) {
      console.error(`L·ªói l·∫•y cookies v√† userAgent: ${cookieError.message}`);
    }
    
    // ƒê√≥ng page sau khi l·∫•y th√¥ng tin
    try {
      await page.close();
      page = null;
    } catch (closeError) {
      console.warn(`L·ªói ƒë√≥ng tab: ${closeError.message}`);
      page = null;
    }
    
    // T·∫£i xu·ªëng c√°c ·∫£nh trang
    try {
      console.log(`üì• T·∫£i xu·ªëng ${pageRequests.size} trang...`);
      downloadedImages = await downloadAllPageImages(pageRequests, cookies, userAgent, imagesDir);
    } catch (downloadError) {
      console.error(`L·ªói t·∫£i ·∫£nh trang: ${downloadError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ c√°c trang PDF: ${downloadError.message}`);
    }
    
    // X·ª≠ l√Ω watermark tr√™n t·ª´ng ·∫£nh - s·ª≠ d·ª•ng h√†m t·ª´ module watermark
    try {
      console.log(`üîß X·ª≠ l√Ω watermark tr√™n ${downloadedImages.length} ·∫£nh...`);
      // Chuy·ªÉn ƒë·ªïi ·∫£nh webp sang png tr∆∞·ªõc khi x·ª≠ l√Ω watermark
      const pngImages = await convertAllImagesToPng(downloadedImages, imagesDir);
      // Sau ƒë√≥ x·ª≠ l√Ω watermark tr√™n c√°c ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
      processedImages = await processAllImages(pngImages, processedDir, config);
    } catch (processError) {
      console.error(`L·ªói x·ª≠ l√Ω watermark: ${processError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω watermark tr√™n ·∫£nh: ${processError.message}`);
    }
    
    // T·∫°o file PDF t·ª´ c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω
    try {
      console.log(`üìÑ T·∫°o file PDF t·ª´ ${processedImages.length} ·∫£nh ƒë√£ x·ª≠ l√Ω...`);
      
      // Ki·ªÉm tra xem ·∫£nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
      const hasProcessedImages = processedImages.some(img => img.includes('_processed'));
      
      if (hasProcessedImages && config.backgroundImage && fs.existsSync(config.backgroundImage)) {
        console.log(`‚ö†Ô∏è ·∫¢nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥, s·∫Ω t·∫°o PDF kh√¥ng th√™m logo ƒë·ªÉ tr√°nh l·∫∑p`);
        // S·ª≠ d·ª•ng createPDFFromRawImages thay v√¨ createPDFFromProcessedImages ƒë·ªÉ tr√°nh th√™m logo l·∫ßn n·ªØa
        await createPDFFromRawImages(processedImages, outputPath);
      } 
      // Tr∆∞·ªùng h·ª£p ·∫£nh ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c kh√¥ng c√≥ h√¨nh n·ªÅn
      else if (config.backgroundImage && fs.existsSync(config.backgroundImage)) {
        console.log(`üñºÔ∏è Th√™m h√¨nh n·ªÅn t√πy ch·ªânh: ${config.backgroundImage}`);
        await createPDFFromProcessedImages(processedImages, outputPath, config);
      } else {
        await createPDFFromRawImages(processedImages, outputPath);
      }
    } catch (createPdfError) {
      console.error(`L·ªói t·∫°o PDF t·ª´ ·∫£nh: ${createPdfError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o file PDF t·ª´ ·∫£nh ƒë√£ x·ª≠ l√Ω: ${createPdfError.message}`);
    }
    
    // Ki·ªÉm tra file PDF ƒë√£ t·∫°o
    try {
      if (!fs.existsSync(outputPath)) {
        throw new Error('Kh√¥ng th·ªÉ t·∫°o file PDF');
      }
      
      fileSize = fs.statSync(outputPath).size; // S·ª≠ d·ª•ng bi·∫øn ƒë√£ khai b√°o b√™n ngo√†i
      if (fileSize === 0) {
        throw new Error('File PDF ƒë∆∞·ª£c t·∫°o nh∆∞ng k√≠ch th∆∞·ªõc b·∫±ng 0');
      }
    } catch (checkError) {
      console.error(`L·ªói ki·ªÉm tra file PDF: ${checkError.message}`);
      throw checkError;
    }
    
    // T√≠nh th·ªùi gian x·ª≠ l√Ω
    const processingTime = (Date.now() - startTime) / 1000;
    
    console.log(`‚úÖ ƒê√£ t·∫°o file PDF th√†nh c√¥ng: ${outputPath} (${(fileSize / 1024 / 1024).toFixed(2)}MB) trong ${processingTime.toFixed(2)} gi√¢y`);
    
    return {
      success: true,
      filePath: outputPath,
      fileName: `${path.basename(fileName, '.pdf')}_clean.pdf`,
      originalSize: 0, // Kh√¥ng th·ªÉ bi·∫øt k√≠ch th∆∞·ªõc g·ªëc
      processedSize: fileSize,
      processingTime: processingTime.toFixed(2)
    };
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫£i file b·ªã ch·∫∑n: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  } finally {
    // ƒê√≥ng browser n·∫øu c√≤n m·ªü
    if (page) {
      try {
        await page.close().catch(() => {});
      } catch (closeError) {
        console.warn(`L·ªói ƒë√≥ng tab: ${closeError.message}`);
      }
    }
    if (browser) {
      try {
        await browser.close().catch(() => {});
      } catch (closeError) {
        console.warn(`L·ªói ƒë√≥ng tr√¨nh duy·ªát: ${closeError.message}`);
      }
    }
    
    // D·ªçn d·∫πp c√°c file ·∫£nh t·∫°m
    try {
      for (const image of [...downloadedImages, ...processedImages]) {
        if (fs.existsSync(image)) {
          try {
            fs.unlinkSync(image);
          } catch (unlinkError) {
            console.warn(`L·ªói x√≥a file ·∫£nh t·∫°m ${image}: ${unlinkError.message}`);
          }
        }
      }
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp ·∫£nh t·∫°m: ${cleanupError.message}`);
    }
    
    // D·ªçn d·∫πp th∆∞ m·ª•c h·ªì s∆° Chrome
    try {
      // Kh√¥ng x√≥a th∆∞ m·ª•c h·ªì s∆° Chrome n·ªØa ƒë·ªÉ gi·ªØ l·∫°i d·ªØ li·ªáu ƒëƒÉng nh·∫≠p
      console.log(`‚úÖ Gi·ªØ l·∫°i h·ªì s∆° Chrome ƒë·ªÉ l∆∞u ƒëƒÉng nh·∫≠p cho l·∫ßn sau: ${profilePath}`);
      // cleanupTempFiles(profilePath);
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c h·ªì s∆° Chrome: ${cleanupError.message}`);
    }
  }
}

/**
 * Scroll ƒë·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang c·ªßa PDF
 * @param {Page} page - Puppeteer page
 * @param {Map} pageRequests - Map l∆∞u tr·ªØ c√°c request trang
 */
async function scrollToLoadAllPages(page, pageRequests) {
  try {
    let lastPageCount = 0;
    let noNewPagesCount = 0;
    const MAX_NO_NEW_PAGES = 10;
    const SCROLL_INTERVAL = 200;
    const SPACE_PRESSES_PER_BATCH = 2;
    const BATCH_INTERVAL = 500;
    const MAX_SCROLL_ATTEMPTS = 100;
    let scrollAttempts = 0;
    
    // Scroll b·∫±ng c√°ch nh·∫•n ph√≠m Space
    while (noNewPagesCount < MAX_NO_NEW_PAGES && scrollAttempts < MAX_SCROLL_ATTEMPTS) {
      try {
        for (let i = 0; i < SPACE_PRESSES_PER_BATCH; i++) {
          try {
            await page.keyboard.press('Space');
          } catch (keyError) {
            console.warn(`L·ªói nh·∫•n ph√≠m Space l·∫ßn ${i+1}: ${keyError.message}`);
          }
          await new Promise(resolve => setTimeout(resolve, SCROLL_INTERVAL));
        }
      } catch (batchError) {
        console.warn(`L·ªói trong batch scroll: ${batchError.message}`);
      }
      
      scrollAttempts++;
      await new Promise(resolve => setTimeout(resolve, BATCH_INTERVAL));
      
      const currentPageCount = pageRequests.size;
      
      if (currentPageCount > lastPageCount) {
        console.log(`üìÑ ƒê√£ ph√°t hi·ªán: ${currentPageCount} trang (+${currentPageCount - lastPageCount})`);
        lastPageCount = currentPageCount;
        noNewPagesCount = 0;
      } else {
        noNewPagesCount++;
      }
      
      if (currentPageCount > 0 && noNewPagesCount >= MAX_NO_NEW_PAGES) {
        console.log(`‚úÖ Kh√¥ng ph√°t hi·ªán trang m·ªõi sau ${noNewPagesCount} l·∫ßn th·ª≠, k·∫øt th√∫c scroll`);
        break;
      }
    }
    
    // Th√™m v√†i l·∫ßn nh·∫•n space cu·ªëi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ t·∫£i h·∫øt
    try {
      for (let i = 0; i < 5; i++) {
        try {
          await page.keyboard.press('Space');
        } catch (finalKeyError) {
          console.warn(`L·ªói nh·∫•n ph√≠m Space cu·ªëi c√πng l·∫ßn ${i+1}: ${finalKeyError.message}`);
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (finalScrollError) {
      console.warn(`L·ªói scroll cu·ªëi c√πng: ${finalScrollError.message}`);
    }
    
    console.log(`‚úÖ ƒê√£ ho√†n th√†nh scroll v·ªõi ${pageRequests.size} trang`);
  } catch (error) {
    console.error(`‚ùå L·ªói khi scroll: ${error.message}`);
    throw error;
  }
}

/**
 * T·∫£i xu·ªëng t·∫•t c·∫£ ·∫£nh trang
 * @param {Map} pageRequests - Map c√°c URL trang
 * @param {Array} cookies - Cookies ƒë·ªÉ x√°c th·ª±c
 * @param {string} userAgent - User-Agent ƒë·ªÉ request
 * @param {string} imagesDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ t·∫£i
 */
async function downloadAllPageImages(pageRequests, cookies, userAgent, imagesDir) {
  try {
    const downloadedImages = [];
    const cookieStr = cookies ? cookies.map(c => `${c.name}=${c.value}`).join('; ') : '';
    
    // S·∫Øp x·∫øp c√°c trang theo th·ª© t·ª± tƒÉng d·∫ßn
    const pages = Array.from(pageRequests.entries()).sort(([a], [b]) => a - b);
    
    // Chia th√†nh c√°c batch ƒë·ªÉ tr√°nh qu√° t·∫£i
    for (let i = 0; i < pages.length; i += BATCH_SIZE) {
      try {
        const batch = pages.slice(i, i + BATCH_SIZE);
        console.log(`üì• ƒêang t·∫£i batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(pages.length / BATCH_SIZE)}...`);
        
        // T·∫£i song song trong batch
        const downloadPromises = batch.map(async ([pageNum, url]) => {
          let retries = MAX_RETRIES;
          
          while (retries > 0) {
            try {
              console.log(`üìÑ T·∫£i trang ${pageNum}...`);
              
              const response = await axios({
                method: 'get',
                url: url,
                responseType: 'arraybuffer',
                timeout: 30000,
                headers: {
                  'Cookie': cookieStr,
                  'User-Agent': userAgent,
                  'Referer': 'https://drive.google.com/',
                  'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
                }
              });
              
              // X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng ·∫£nh t·ª´ Content-Type
              const contentType = response.headers['content-type'];
              let extension = 'png'; // M·∫∑c ƒë·ªãnh l√† png
              
              if (contentType) {
                if (contentType.includes('jpeg') || contentType.includes('jpg')) {
                  extension = 'jpg';
                } else if (contentType.includes('webp')) {
                  extension = 'webp';
                }
              }
              
              // T·∫°o t√™n file v·ªõi ƒëu√¥i ph√π h·ª£p
              const imagePath = path.join(imagesDir, `page_${String(pageNum).padStart(3, '0')}.${extension}`);
              
              // L∆∞u file
              try {
                fs.writeFileSync(imagePath, Buffer.from(response.data));
                console.log(`‚úÖ ƒê√£ t·∫£i trang ${pageNum} (${extension})`);
                
                // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ t·∫£i
                downloadedImages[pageNum] = imagePath;
                break;
              } catch (writeError) {
                console.error(`L·ªói l∆∞u file ·∫£nh trang ${pageNum}: ${writeError.message}`);
                retries--;
                if (retries <= 0) {
                  console.error(`‚ùå Kh√¥ng th·ªÉ l∆∞u ·∫£nh trang ${pageNum} sau ${MAX_RETRIES} l·∫ßn th·ª≠`);
                } else {
                  await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
                }
              }
            } catch (error) {
              retries--;
              console.warn(`‚ö†Ô∏è L·ªói t·∫£i trang ${pageNum} (c√≤n ${retries} l·∫ßn th·ª≠): ${error.message}`);
              
              if (retries <= 0) {
                console.error(`‚ùå Kh√¥ng th·ªÉ t·∫£i trang ${pageNum} sau ${MAX_RETRIES} l·∫ßn th·ª≠`);
              } else {
                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
              }
            }
          }
        });
        
        // Ch·ªù t·∫•t c·∫£ trong batch ho√†n th√†nh
        try {
          await Promise.all(downloadPromises);
        } catch (batchError) {
          console.error(`L·ªói t·∫£i batch ·∫£nh: ${batchError.message}`);
        }
        
        // ƒê·ª£i gi·ªØa c√°c batch ƒë·ªÉ tr√°nh qu√° t·∫£i
        if (i + BATCH_SIZE < pages.length) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      } catch (batchError) {
        console.error(`L·ªói x·ª≠ l√Ω batch ${Math.floor(i / BATCH_SIZE) + 1}: ${batchError.message}`);
      }
    }
    
    // Tr·∫£ v·ªÅ m·∫£ng ch·ªâ ch·ª©a c√°c ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá
    return downloadedImages.filter(Boolean);
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫£i ·∫£nh trang: ${error.message}`);
    throw error;
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ ·∫£nh sang ƒë·ªãnh d·∫°ng PNG
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
 */
async function convertAllImagesToPng(images, outputDir) {
  try {
    const convertedImages = [];
    
    // S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª± trang
    const sortedImages = images.sort((a, b) => {
      try {
        const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
        const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
        return pageA - pageB;
      } catch (error) {
        return 0;
      }
    });
    
    // Chuy·ªÉn ƒë·ªïi t·ª´ng ·∫£nh sang png n·∫øu c·∫ßn
    for (let i = 0; i < sortedImages.length; i++) {
      try {
        const imagePath = sortedImages[i];
        let pageNum;
        try {
          pageNum = parseInt(path.basename(imagePath).match(/page_(\d+)/)[1]);
        } catch (parseError) {
          console.warn(`Kh√¥ng th·ªÉ ph√¢n t√≠ch s·ªë trang t·ª´ ${imagePath}: ${parseError.message}`);
          pageNum = i + 1;
        }
        
        const extension = path.extname(imagePath);
        
        // N·∫øu ƒë√£ l√† png, kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi
        if (extension.toLowerCase() === '.png') {
          convertedImages.push(imagePath);
          continue;
        }
        
        // Chuy·ªÉn ƒë·ªïi sang png
        const pngPath = path.join(outputDir, `page_${String(pageNum).padStart(3, '0')}.png`);
        
        try {
          console.log(`üîÑ Chuy·ªÉn ƒë·ªïi trang ${pageNum} t·ª´ ${extension} sang png...`);
          await sharp(imagePath)
            .toFormat('png')
            .toFile(pngPath);
          console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi trang ${pageNum} sang png`);
          convertedImages.push(pngPath);
        } catch (error) {
          console.error(`‚ùå L·ªói chuy·ªÉn ƒë·ªïi trang ${pageNum} sang png: ${error.message}`);
          // N·∫øu kh√¥ng chuy·ªÉn ƒë·ªïi ƒë∆∞·ª£c, gi·ªØ ·∫£nh g·ªëc
          convertedImages.push(imagePath);
        }
      } catch (imageError) {
        console.error(`L·ªói x·ª≠ l√Ω ·∫£nh th·ª© ${i+1}: ${imageError.message}`);
      }
    }
    
    return convertedImages;
  } catch (error) {
    console.error(`‚ùå L·ªói chuy·ªÉn ƒë·ªïi ·∫£nh sang PNG: ${error.message}`);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c ·∫£nh b·∫±ng c√°ch s·ª≠ d·ª•ng h√†m processImage t·ª´ module watermark
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
 * @param {Object} config - C·∫•u h√¨nh x·ª≠ l√Ω watermark
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ x·ª≠ l√Ω
 */
async function processAllImages(images, outputDir, config) {
  try {
    const processedImages = [];
    
    // S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª± trang
    const sortedImages = images.sort((a, b) => {
      try {
        const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
        const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
        return pageA - pageB;
      } catch (error) {
        return 0;
      }
    });
    
    // S·ª≠ d·ª•ng c·∫•u h√¨nh n√¢ng cao ƒë·ªÉ x·ª≠ l√Ω m·∫°nh h∆°n v·ªõi file b·ªã kh√≥a
    const enhancedConfig = {
      // Gi·ªØ ƒë·ªô m·ªù n·ªÅn t·ª´ c·∫•u h√¨nh g·ªëc
      backgroundOpacity: config.backgroundOpacity || 0.15,
      // Th√™m c√°c tham s·ªë x·ª≠ l√Ω n√¢ng cao
      enhancedMode: true,
      contrastBoost: config.contrastBoost || 1.2,     // Gi·∫£m t·ª´ 1.35 xu·ªëng 1.2 ƒë·ªÉ kh√¥ng m·∫•t chi ti·∫øt
      brightnessBoost: config.brightnessBoost || 1.05,   // Gi·∫£m t·ª´ 1.1 xu·ªëng 1.05 ƒë·ªÉ gi·ªØ n·ªôi dung
      sharpenAmount: config.sharpenAmount || 1.5,        // TƒÉng t·ª´ 1.2 l√™n 1.5 ƒë·ªÉ tƒÉng ƒë·ªô n√©t
      saturationAdjust: config.saturationAdjust || 1.3,  // TƒÉng t·ª´ 1.2 l√™n 1.3 ƒë·ªÉ tƒÉng m√†u s·∫Øc
      preserveColors: true,                                       // Gi·ªØ nguy√™n tham s·ªë gi·ªØ m√†u s·∫Øc
      extraWhitening: false,                                      // T·∫Øt ch·∫ø ƒë·ªô l√†m tr·∫Øng th√™m
      aggressiveWatermarkRemoval: false                           // T·∫Øt ch·∫ø ƒë·ªô x·ª≠ l√Ω m·∫°nh nh·∫•t
    };
    
    console.log(`üîß √Åp d·ª•ng x·ª≠ l√Ω n√¢ng cao cho file PDF b·ªã kh√≥a v·ªõi ${sortedImages.length} trang`);
    
    // X·ª≠ l√Ω t·ª´ng ·∫£nh
    for (let i = 0; i < sortedImages.length; i++) {
      try {
        const imagePath = sortedImages[i];
        let pageNum;
        try {
          pageNum = parseInt(path.basename(imagePath).match(/page_(\d+)/)[1]);
        } catch (parseError) {
          console.warn(`Kh√¥ng th·ªÉ ph√¢n t√≠ch s·ªë trang t·ª´ ${imagePath}: ${parseError.message}`);
          pageNum = i + 1;
        }
        
        // Lu√¥n s·ª≠ d·ª•ng .png cho file ƒë√£ x·ª≠ l√Ω ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
        const processedPath = path.join(outputDir, `page_${String(pageNum).padStart(3, '0')}_processed.png`);
        
        try {
          console.log(`üîç X·ª≠ l√Ω n√¢ng cao watermark trang ${pageNum}...`);
          
          // Th·ª≠ x·ª≠ l√Ω watermark v·ªõi ph∆∞∆°ng ph√°p n√¢ng cao tr∆∞·ªõc
          try {
            // ƒê·ªçc ·∫£nh g·ªëc v√†o buffer
            const imageBuffer = fs.readFileSync(imagePath);
            
            // T·∫°o m·ªôt pipeline x·ª≠ l√Ω n√¢ng cao v·ªõi sharp
            let processedBuffer = await sharp(imageBuffer)
              // TƒÉng ƒë·ªô s√°ng v√† ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π nh√†ng h∆°n
              .modulate({
                brightness: enhancedConfig.brightnessBoost,
                saturation: enhancedConfig.saturationAdjust // TƒÉng ƒë·ªô b√£o h√≤a ƒë·ªÉ gi·ªØ m√†u s·∫Øc
              })
              // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n v·ª´a ph·∫£i
              .linear(
                enhancedConfig.contrastBoost, // ƒê·ªô d·ªëc (a) v·ª´a ph·∫£i
                -(128 * enhancedConfig.contrastBoost - 128) / 255 // ƒêi·ªÉm c·∫Øt (b)
              )
              // TƒÉng ƒë·ªô s·∫Øc n√©t nh·∫π nh√†ng
              .sharpen({
                sigma: enhancedConfig.sharpenAmount,
                m1: 0.2,
                m2: 0.4,
                x1: 2,
                y2: 5,
                y3: 5
              });
              
            // N·∫øu c·∫ßn gi·ªØ m√†u s·∫Øc, b·ªè qua b∆∞·ªõc normalise
            if (!enhancedConfig.preserveColors) {
              // C√¢n b·∫±ng m√†u - c√≥ th·ªÉ l√†m m·∫•t m√†u s·∫Øc
              processedBuffer = await processedBuffer.normalise().toBuffer();
            } else {
              // L∆∞u ra buffer m√† kh√¥ng c√¢n b·∫±ng m√†u ƒë·ªÉ gi·ªØ m√†u s·∫Øc
              processedBuffer = await processedBuffer.toBuffer();
            }
              
            // N·∫øu c√≥ tham s·ªë extraWhitening, √°p d·ª•ng x·ª≠ l√Ω th√™m ƒë·ªÉ lo·∫°i b·ªè watermark
            if (enhancedConfig.extraWhitening) {
              console.log(`üîç √Åp d·ª•ng x·ª≠ l√Ω l√†m tr·∫Øng th√™m cho trang ${pageNum} (ch·∫ø ƒë·ªô c√¢n b·∫±ng)...`);
              
              // S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c√¢n b·∫±ng ƒë·ªÉ gi·ªØ l·∫°i vƒÉn b·∫£n
              processedBuffer = await sharp(processedBuffer)
                // S·ª≠ d·ª•ng ng∆∞·ª°ng cao h∆°n ƒë·ªÉ ch·ªâ lo·∫°i b·ªè watermark m·ªù
                .threshold(240)
                // Gi·∫£m ƒë·ªô t∆∞∆°ng ph·∫£n ƒë·ªÉ gi·ªØ l·∫°i vƒÉn b·∫£n
                .linear(
                  1.2, // ƒê·ªô d·ªëc th·∫•p h∆°n
                  -0.1 // ƒêi·ªÉm c·∫Øt √¢m nh·ªè h∆°n
                )
                // Gi·∫£m nhi·ªÖu nh·∫π
                .median(2)
                // TƒÉng ƒë·ªô s·∫Øc n√©t m·ªôt ch√∫t
                .sharpen({
                  sigma: 0.8,
                  m1: 0.2,
                  m2: 0.5
                })
                .png({ quality: 100 })
                .toBuffer();
            }
            
            // N·∫øu ch·∫ø ƒë·ªô x·ª≠ l√Ω m·∫°nh ƒë∆∞·ª£c b·∫≠t (ƒë√£ t·∫Øt trong config)
            if (enhancedConfig.aggressiveWatermarkRemoval) {
              console.log(`üî• √Åp d·ª•ng x·ª≠ l√Ω m·∫°nh ƒë·ªÉ lo·∫°i b·ªè watermark cho trang ${pageNum}...`);
              
              // X·ª≠ l√Ω th√™m m·ªôt l·∫ßn n·ªØa v·ªõi c√°c th√¥ng s·ªë m·∫°nh h∆°n
              processedBuffer = await sharp(processedBuffer)
                // √Åp d·ª•ng b·ªô l·ªçc m√†u ƒë·ªÉ gi·∫£m ƒë·ªô x√°m c·ªßa watermark
                .tint({ r: 255, g: 255, b: 255 }) // TƒÉng th√†nh ph·∫ßn tr·∫Øng
                // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n cao h∆°n n·ªØa
                .linear(
                  1.3, // Gi·∫£m ƒë·ªô d·ªëc xu·ªëng
                  -0.1 // Gi·∫£m ƒëi·ªÉm c·∫Øt √¢m
                )
                // L√†m m·ªãn ·∫£nh ƒë·ªÉ gi·∫£m nhi·ªÖu
                .blur(0.2)
                // TƒÉng ƒë·ªô s·∫Øc n√©t l·∫ßn cu·ªëi
                .sharpen({
                  sigma: 1.0,
                  m1: 0.3,
                  m2: 0.5
                })
                .png({ quality: 100 })
                .toBuffer();
            }
            
            // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho watermark khi gi·ªØ m√†u s·∫Øc
            if (enhancedConfig.preserveColors) {
              console.log(`üé® √Åp d·ª•ng x·ª≠ l√Ω gi·ªØ m√†u s·∫Øc cho trang ${pageNum}...`);
              
              // S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p gi·ªØ m√†u s·∫Øc v√† lo·∫°i b·ªè watermark
              processedBuffer = await sharp(processedBuffer)
                // TƒÉng ƒë·ªô s·∫Øc n√©t ƒë·ªÉ l√†m r√µ n·ªôi dung
                .sharpen({
                  sigma: 1.5,  // TƒÉng t·ª´ 1.2 l√™n 1.5
                  m1: 0.5,     // TƒÉng t·ª´ 0.4 l√™n 0.5
                  m2: 0.7      // TƒÉng t·ª´ 0.6 l√™n 0.7
                })
                // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π ƒë·ªÉ l√†m r√µ vƒÉn b·∫£n
                .linear(
                  1.2, // Gi·∫£m t·ª´ 1.25 xu·ªëng 1.2 ƒë·ªÉ gi·ªØ chi ti·∫øt
                  -0.03 // Gi·∫£m t·ª´ -0.05 xu·ªëng -0.03 ƒë·ªÉ gi·ªØ chi ti·∫øt
                )
                // TƒÉng ƒë·ªô b√£o h√≤a m√†u m·ªôt ch√∫t n·ªØa
                .modulate({
                  saturation: 1.3, // TƒÉng t·ª´ 1.1 l√™n 1.3
                  brightness: 1.05 // Th√™m tham s·ªë ƒë·ªô s√°ng nh·∫π
                })
                .png({ quality: 100 })
                .toBuffer();
            }
            
            // L∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
            fs.writeFileSync(processedPath, processedBuffer);
            console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω n√¢ng cao watermark trang ${pageNum}`);
            
            // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ x·ª≠ l√Ω
            processedImages.push(processedPath);
          } catch (advancedError) {
            console.error(`‚ùå L·ªói x·ª≠ l√Ω n√¢ng cao trang ${pageNum}: ${advancedError.message}`);
            console.log(`‚ö†Ô∏è Chuy·ªÉn sang ph∆∞∆°ng ph√°p x·ª≠ l√Ω ƒë∆°n gi·∫£n...`);
            
            // N·∫øu ph∆∞∆°ng ph√°p n√¢ng cao th·∫•t b·∫°i, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n
            await processImage(imagePath, processedPath, enhancedConfig);
            console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω xong trang ${pageNum} v·ªõi ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n`);
            
            // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ x·ª≠ l√Ω
            processedImages.push(processedPath);
          }
        } catch (error) {
          console.error(`‚ùå L·ªói x·ª≠ l√Ω watermark trang ${pageNum}: ${error.message}`);
          // N·∫øu x·ª≠ l√Ω th·∫•t b·∫°i, s·ª≠ d·ª•ng ·∫£nh g·ªëc
          processedImages.push(imagePath);
        }
      } catch (pageError) {
        console.error(`L·ªói x·ª≠ l√Ω trang th·ª© ${i+1}: ${pageError.message}`);
      }
    }
    
    return processedImages;
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh: ${error.message}`);
    throw error;
  }
} 