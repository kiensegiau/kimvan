/**
 * Module h·ªó tr·ª£ t·∫£i file PDF b·ªã ch·∫∑n t·ª´ Google Drive
 * S·ª≠ d·ª•ng puppeteer ƒë·ªÉ ch·ª•p c√°c trang PDF v√† t·∫°o l·∫°i file
 * T√≠ch h·ª£p tr·ª±c ti·∫øp x·ª≠ l√Ω watermark tr√™n c√°c ·∫£nh ƒë√£ ch·ª•p
 */

import fs from 'fs';
import path from 'path';
import puppeteer from 'puppeteer-core';
import os from 'os';
import { v4 as uuidv4 } from 'uuid';
import PDFDocument from 'pdfkit';
import sharp from 'sharp';
import axios from 'axios';
import { cleanupTempFiles, processBatches } from './utils.js';
import { DEFAULT_CONFIG } from './config.js';

// Import c√°c h√†m x·ª≠ l√Ω watermark t·ª´ module watermark.js
import { 
  processImage, 
  addCustomBackground,
  createPDFFromProcessedImages,
  createPDFFromRawImages,
  cleanPdf
} from './watermark.js';

// H·∫±ng s·ªë
const MAX_CONCURRENT = 2;
const MAX_RETRIES = 1;
const RETRY_DELAY = 5000;
const BATCH_SIZE = 5;
const PROCESS_TIMEOUT = 30 * 60 * 1000; // 30 ph√∫t timeout

// Th√™m bi·∫øn to√†n c·ª•c ƒë·ªÉ qu·∫£n l√Ω c√°c phi√™n Chrome ƒëang ho·∫°t ƒë·ªông
const activeBrowsers = new Map();
const MAX_CONCURRENT_BROWSERS = 3; // S·ªë l∆∞·ª£ng tr√¨nh duy·ªát Chrome t·ªëi ƒëa ƒë∆∞·ª£c ph√©p ch·∫°y song song

// ƒê∆∞·ªùng d·∫´n Chrome m·∫∑c ƒë·ªãnh d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
function getChromePath() {
  try {
    switch (os.platform()) {
      case 'win32':
        // Ki·ªÉm tra c√°c ƒë∆∞·ªùng d·∫´n ph·ªï bi·∫øn
        const windowsPaths = [
          'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
          'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe',
          'C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe',
          'C:\\Users\\PC\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe'
        ];
        
        for (const path of windowsPaths) {
          if (fs.existsSync(path)) {
            console.log(`‚úÖ T√¨m th·∫•y Chrome t·∫°i: ${path}`);
            return path;
          }
        }
        
        // ƒê∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
        console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Chrome trong c√°c ƒë∆∞·ªùng d·∫´n ph·ªï bi·∫øn, s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh`);
        return 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe';
        
      case 'darwin': // macOS
        return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
      default: // Linux v√† c√°c h·ªá ƒëi·ªÅu h√†nh kh√°c
        return '/usr/bin/google-chrome';
    }
  } catch (error) {
    console.error(`L·ªói x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n Chrome: ${error.message}`);
    return 'chrome'; // Fallback to PATH
  }
}

// T·∫°o th∆∞ m·ª•c h·ªì s∆° ng∆∞·ªùi d√πng Chrome
function createChromeUserProfile() {
  try {
    // S·ª≠ d·ª•ng th∆∞ m·ª•c c·ªë ƒë·ªãnh thay v√¨ t·∫°o m·ªõi m·ªói l·∫ßn
    const profilePath = path.join(os.homedir(), 'drive-pdf-watermark-profile');
    try {
      fs.mkdirSync(profilePath, { recursive: true });
    } catch (mkdirError) {
      console.error(`L·ªói t·∫°o th∆∞ m·ª•c h·ªì s∆° Chrome: ${mkdirError.message}`);
    }
    
    console.log(`üîë S·ª≠ d·ª•ng h·ªì s∆° Chrome t·∫°i: ${profilePath}`);
    return profilePath;
  } catch (error) {
    console.error(`L·ªói t·∫°o h·ªì s∆° ng∆∞·ªùi d√πng Chrome: ${error.message}`);
    // Fallback to temp directory
    const tempProfilePath = path.join(os.tmpdir(), `chrome-profile-${Date.now()}`);
    fs.mkdirSync(tempProfilePath, { recursive: true });
    return tempProfilePath;
  }
}

/**
 * X·ª≠ l√Ω file PDF ƒë·ªìng nh·∫•t - s·ª≠ d·ª•ng cho c·∫£ PDF th√¥ng th∆∞·ªùng v√† PDF b·ªã ch·∫∑n
 * H√†m n√†y s·∫Ω ph√¢n t√≠ch lo·∫°i PDF v√† g·ªçi ph∆∞∆°ng th·ª©c x·ª≠ l√Ω ph√π h·ª£p
 * @param {string} inputPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF ƒë·∫ßu v√†o
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file PDF ƒë·∫ßu ra
 * @param {Object} config - C·∫•u h√¨nh x·ª≠ l√Ω watermark
 * @param {boolean} isBlocked - C√≥ ph·∫£i PDF b·ªã ch·∫∑n kh√¥ng
 * @param {string} fileId - ID c·ªßa file Google Drive (n·∫øu l√† PDF b·ªã ch·∫∑n)
 * @returns {Promise<{success: boolean, filePath: string, error: string}>}
 */
export async function processPDF(inputPath, outputPath, config = DEFAULT_CONFIG, isBlocked = false, fileId = null) {
  try {
    console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω PDF: ${inputPath || 'PDF b·ªã ch·∫∑n t·ª´ Google Drive'}`);
    
    // Ki·ªÉm tra file t·ªìn t·∫°i (ch·ªâ khi kh√¥ng ph·∫£i PDF b·ªã ch·∫∑n)
    if (!isBlocked && !inputPath) {
      throw new Error(`ƒê∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o kh√¥ng ƒë∆∞·ª£c cung c·∫•p`);
    }
    
    if (!isBlocked && !fs.existsSync(inputPath)) {
      throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${inputPath}`);
    }

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file n·∫øu l√† file b·ªã ch·∫∑n
    if (isBlocked && fileId) {
      try {
        // Import h√†m getTokenByType t·ª´ utils
        const { getTokenByType } = await import('./utils.js');
        
        // L·∫•y token t·∫£i xu·ªëng
        const downloadToken = getTokenByType('download');
        if (!downloadToken) {
          throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive');
        }
        
        // T·∫°o OAuth2 client
        const oauth2Client = new google.auth.OAuth2(
          process.env.GOOGLE_CLIENT_ID,
          process.env.GOOGLE_CLIENT_SECRET,
          process.env.GOOGLE_REDIRECT_URI
        );
        
        // Thi·∫øt l·∫≠p credentials
        oauth2Client.setCredentials(downloadToken);
        
        // Kh·ªüi t·∫°o Google Drive API
        const drive = google.drive({ version: 'v3', auth: oauth2Client });
        
        // L·∫•y th√¥ng tin file
        const fileInfo = await drive.files.get({
          fileId: fileId,
          fields: 'size',
          supportsAllDrives: true
        });
        
        // T√≠nh k√≠ch th∆∞·ªõc MB
        const fileSizeMB = parseInt(fileInfo.data.size) / (1024 * 1024);
        
        // N·∫øu file l·ªõn h∆°n 100MB, b·ªè qua x·ª≠ l√Ω
        if (fileSizeMB > 100) {
          console.log(`‚ö†Ô∏è File qu√° l·ªõn (${fileSizeMB.toFixed(2)} MB), b·ªè qua x·ª≠ l√Ω t·ª± ƒë·ªông`);
          return {
            success: false,
            error: `File qu√° l·ªõn (${fileSizeMB.toFixed(2)} MB). Vui l√≤ng x·ª≠ l√Ω th·ªß c√¥ng file n√†y.`,
            fileSizeMB: fileSizeMB,
            skipReason: 'FILE_TOO_LARGE'
          };
        }
        
        console.log(`üìä K√≠ch th∆∞·ªõc file: ${fileSizeMB.toFixed(2)} MB`);
      } catch (error) {
        console.error(`‚ùå L·ªói khi ki·ªÉm tra k√≠ch th∆∞·ªõc file: ${error.message}`);
        // Ti·∫øp t·ª•c x·ª≠ l√Ω n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c k√≠ch th∆∞·ªõc
      }
    }
    
    // N·∫øu kh√¥ng cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra, t·∫°o ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
    if (!outputPath) {
      if (inputPath) {
        outputPath = inputPath.replace('.pdf', '_clean.pdf');
      } else if (isBlocked && fileId) {
        // T·∫°o ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh cho file b·ªã ch·∫∑n
        const tempDir = path.join(os.tmpdir(), uuidv4());
        fs.mkdirSync(tempDir, { recursive: true });
        
        // Ki·ªÉm tra xem c√≥ b·ªè qua x·ª≠ l√Ω watermark kh√¥ng
        const skipProcessing = config && (config.skipWatermarkRemoval || config.skipImageProcessing || config.preserveOriginal || config.noProcessing);
        const suffix = skipProcessing ? '_original' : '_clean';
        
        outputPath = path.join(tempDir, `T√ÄI LI·ªÜU${fileId}${suffix}.pdf`);
      } else {
        throw new Error('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra');
      }
    }
    
    // Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
    const startTime = Date.now();
    
    let result;
    
    // X·ª≠ l√Ω d·ª±a tr√™n lo·∫°i PDF
    if (isBlocked && fileId) {
      // X·ª≠ l√Ω PDF b·ªã ch·∫∑n t·ª´ Google Drive
      console.log(`üîí Ph√°t hi·ªán PDF b·ªã ch·∫∑n t·ª´ Google Drive, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë·∫∑c bi·ªát...`);
      const fileName = inputPath ? path.basename(inputPath) : `T√ÄI LI·ªÜU${fileId}.pdf`;
      
      try {
        console.log(`B·∫Øt ƒë·∫ßu t·∫£i PDF b·ªã ch·∫∑n...`);
        
        // Thi·∫øt l·∫≠p timeout cho to√†n b·ªô qu√° tr√¨nh
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error(`Qu√° th·ªùi gian x·ª≠ l√Ω (${PROCESS_TIMEOUT/60000} ph√∫t)`)), PROCESS_TIMEOUT);
        });
        
        // Ch·∫°y qu√° tr√¨nh t·∫£i v·ªõi timeout
        result = await Promise.race([
          downloadBlockedPDF(fileId, fileName, path.dirname(outputPath), config),
          timeoutPromise
        ]);
        
        // Ki·ªÉm tra k·∫øt qu·∫£
        if (result) {
          // N·∫øu l√† video, tr·∫£ v·ªÅ ngay
          if (!result.success && result.isVideo) {
            console.log(`üé• X√°c nh·∫≠n file video`);
            return result;
          }
          
          // N·∫øu th√†nh c√¥ng ho·∫∑c l·ªói Chrome kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c
          if (result.success || result.chromeStartFailed) {
            return result;
          }
        }
        
        // C√°c tr∆∞·ªùng h·ª£p l·ªói kh√°c
        throw new Error(result?.error || 'Kh√¥ng th·ªÉ t·∫£i PDF b·ªã ch·∫∑n');
      } catch (downloadError) {
        console.error(`‚ùå L·ªói khi t·∫£i PDF b·ªã ch·∫∑n: ${downloadError.message}`);
        
        // N·∫øu l·ªói l√† do file video, tr·∫£ v·ªÅ ngay
        if (downloadError.message === 'NO_PDF_PAGES_DETECTED' && result?.isVideo) {
          console.log(`üé• X√°c nh·∫≠n file video t·ª´ l·ªói`);
          return result;
        }
        
        throw downloadError;
      }
    } else {
      // X·ª≠ l√Ω PDF th√¥ng th∆∞·ªùng
      console.log(`üìÑ X·ª≠ l√Ω PDF th√¥ng th∆∞·ªùng v·ªõi ph∆∞∆°ng ph√°p lo·∫°i b·ªè watermark...`);
      
      // S·ª≠ d·ª•ng h√†m cleanPdf t·ª´ module watermark.js
      try {
        await cleanPdf(inputPath, outputPath, {
          ...config,
          // ƒê·∫£m b·∫£o logo lu√¥n ƒë∆∞·ª£c th√™m v√†o file PDF th√¥ng th∆∞·ªùng
          forceAddLogo: true
        });
        
        // Ki·ªÉm tra k·∫øt qu·∫£
        if (fs.existsSync(outputPath)) {
          const fileSize = fs.statSync(outputPath).size;
          const processingTime = (Date.now() - startTime) / 1000;
          
          result = {
            success: true,
            filePath: outputPath,
            fileName: path.basename(outputPath),
            originalSize: fs.statSync(inputPath).size,
            processedSize: fileSize,
            processingTime: processingTime.toFixed(2)
          };
        } else {
          throw new Error('Kh√¥ng th·ªÉ t·∫°o file PDF ƒë√£ x·ª≠ l√Ω');
        }
      } catch (cleanError) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω PDF th√¥ng th∆∞·ªùng: ${cleanError.message}`);
        throw cleanError;
      }
    }
    
    // Th√™m h√¨nh n·ªÅn n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if (result.success && config.backgroundImage && fs.existsSync(config.backgroundImage)) {
      try {
        console.log(`üñºÔ∏è Th√™m h√¨nh n·ªÅn t√πy ch·ªânh: ${config.backgroundImage}`);
        const bgOutputPath = await addCustomBackground(result.filePath, config.backgroundImage, config);
        
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ v·ªõi file m·ªõi c√≥ h√¨nh n·ªÅn
        if (fs.existsSync(bgOutputPath)) {
          result.filePath = bgOutputPath;
          result.fileName = path.basename(bgOutputPath);
          result.processedSize = fs.statSync(bgOutputPath).size;
        }
      } catch (bgError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m h√¨nh n·ªÅn: ${bgError.message}`);
        // Ti·∫øp t·ª•c s·ª≠ d·ª•ng file ƒë√£ x·ª≠ l√Ω m√† kh√¥ng c√≥ h√¨nh n·ªÅn
      }
    } else if (!isBlocked && result.success) {
      // ƒê·∫£m b·∫£o file PDF th∆∞·ªùng (kh√¥ng b·ªã kh√≥a) lu√¥n c√≥ logo
      try {
        console.log(`üñºÔ∏è Th√™m logo v√†o file PDF th∆∞·ªùng: ${config.backgroundImage}`);
        // Ki·ªÉm tra xem c√≥ h√¨nh n·ªÅn ƒë∆∞·ª£c c·∫•u h√¨nh kh√¥ng
        if (config.backgroundImage && fs.existsSync(config.backgroundImage)) {
          const bgOutputPath = await addCustomBackground(result.filePath, config.backgroundImage, {
            ...config,
            backgroundOpacity: 0.15 // ƒê·∫∑t ƒë·ªô m·ªù m·∫∑c ƒë·ªãnh cho logo
          });
          
          // C·∫≠p nh·∫≠t k·∫øt qu·∫£ v·ªõi file m·ªõi c√≥ h√¨nh n·ªÅn
          if (fs.existsSync(bgOutputPath)) {
            result.filePath = bgOutputPath;
            result.fileName = path.basename(bgOutputPath);
            result.processedSize = fs.statSync(bgOutputPath).size;
          }
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file logo: ${config.backgroundImage}`);
        }
      } catch (logoError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m logo: ${logoError.message}`);
      }
    }
    
    // T√≠nh to√°n th·ªùi gian x·ª≠ l√Ω t·ªïng c·ªông
    const totalProcessingTime = (Date.now() - startTime) / 1000;
    result.processingTime = totalProcessingTime.toFixed(2);
    
    // Ki·ªÉm tra xem c√≥ ph√°t hi·ªán trang n√†o kh√¥ng
    const pageCount = result.processedSize > 0 ? 1 : 0;
    
    // Th√™m ki·ªÉm tra n·∫øu kh√¥ng c√≥ trang n√†o, c√≥ th·ªÉ l√† file video
    if (pageCount === 0) {
      console.log(`‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán trang PDF n√†o, c√≥ th·ªÉ l√† file video`);
      return {
        success: false,
        error: 'NO_PDF_PAGES_DETECTED',
        isVideo: true,
        fileId: fileId,
        fileName: result.fileName,
        shouldRetry: false // Th√™m flag ƒë·ªÉ kh√¥ng retry
      };
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω PDF: ${error.message}`);
    return {
      success: false,
      error: error.message,
      stack: error.stack
    };
  }
}

// H√†m ki·ªÉm tra v√† l·∫•y browser ƒëang ho·∫°t ƒë·ªông ho·∫∑c t·∫°o m·ªõi
async function getOrCreateBrowser(profilePath, debugMode = false) {
  try {
    // T·∫°o ID duy nh·∫•t cho profilePath
    const profileId = profilePath.replace(/[^a-zA-Z0-9]/g, '_');
    
    // Ki·ªÉm tra xem ƒë√£ c√≥ browser cho profile n√†y ch∆∞a
    if (activeBrowsers.has(profileId)) {
      const browserInfo = activeBrowsers.get(profileId);
      
      // Ki·ªÉm tra xem browser c√≤n ho·∫°t ƒë·ªông kh√¥ng
      try {
        // Th·ª≠ l·∫•y danh s√°ch pages ƒë·ªÉ ki·ªÉm tra browser c√≤n s·ªëng kh√¥ng
        const pages = await browserInfo.browser.pages();
        console.log(`‚úÖ T√°i s·ª≠ d·ª•ng phi√™n Chrome ƒëang ho·∫°t ƒë·ªông v·ªõi ${pages.length} tab`);
        
        // TƒÉng s·ªë l∆∞·ª£ng tham chi·∫øu
        browserInfo.refCount += 1;
        return { browser: browserInfo.browser, isNew: false, profileId };
      } catch (checkError) {
        console.log(`‚ö†Ô∏è Phi√™n Chrome c≈© kh√¥ng c√≤n ho·∫°t ƒë·ªông, t·∫°o m·ªõi: ${checkError.message}`);
        // Browser kh√¥ng c√≤n ho·∫°t ƒë·ªông, x√≥a kh·ªèi map
        activeBrowsers.delete(profileId);
      }
    }
    
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng browser ƒëang ho·∫°t ƒë·ªông
    if (activeBrowsers.size >= MAX_CONCURRENT_BROWSERS) {
      console.log(`‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ${MAX_CONCURRENT_BROWSERS} phi√™n Chrome ƒëang ch·∫°y, ƒë·ª£i...`);
      
      // T√¨m browser √≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng nh·∫•t ƒë·ªÉ ƒë√≥ng
      let leastUsedBrowser = null;
      let minRefCount = Infinity;
      
      for (const [id, info] of activeBrowsers.entries()) {
        if (info.refCount < minRefCount) {
          minRefCount = info.refCount;
          leastUsedBrowser = id;
        }
      }
      
      // ƒê√≥ng browser √≠t s·ª≠ d·ª•ng nh·∫•t
      if (leastUsedBrowser) {
        try {
          const browserToClose = activeBrowsers.get(leastUsedBrowser);
          console.log(`üîÑ ƒê√≥ng phi√™n Chrome √≠t s·ª≠ d·ª•ng nh·∫•t ƒë·ªÉ gi·∫£i ph√≥ng t√†i nguy√™n`);
          await browserToClose.browser.close();
          activeBrowsers.delete(leastUsedBrowser);
        } catch (closeError) {
          console.warn(`‚ö†Ô∏è L·ªói khi ƒë√≥ng phi√™n Chrome √≠t s·ª≠ d·ª•ng: ${closeError.message}`);
          activeBrowsers.delete(leastUsedBrowser);
        }
      }
    }
    
    // T·∫°o browser m·ªõi
    const chromePath = getChromePath();
    console.log(`üåê Kh·ªüi ƒë·ªông Chrome m·ªõi: ${chromePath}`);
    
    const browser = await puppeteer.launch({
      headless: debugMode ? false : 'new',
      channel: os.platform() === 'win32' ? 'chrome' : undefined,
      executablePath: chromePath,
      args: [
        "--start-maximized",
        `--user-data-dir=${profilePath}`,
        "--enable-extensions",
        "--remote-debugging-port=0", // S·ª≠ d·ª•ng c·ªïng ng·∫´u nhi√™n ƒë·ªÉ tr√°nh xung ƒë·ªôt
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-web-security",
        "--disable-features=IsolateOrigins,site-per-process",
        "--disable-site-isolation-trials",
        "--disable-features=BlockInsecurePrivateNetworkRequests",
        "--disable-features=SameSiteByDefaultCookies,CookiesWithoutSameSiteMustBeSecure",
        "--no-first-run",
        "--no-default-browser-check",
        "--disable-popup-blocking",
        "--disable-notifications",
        "--disable-infobars",
        "--disable-translate",
        "--allow-running-insecure-content",
        "--password-store=basic",
        "--use-fake-ui-for-media-stream",
        "--use-fake-device-for-media-stream",
        "--allow-file-access-from-files",
        "--allow-insecure-localhost",
        "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
        "--disable-blink-features=AutomationControlled"
      ],
      defaultViewport: null,
      ignoreDefaultArgs: ["--enable-automation"],
      timeout: 180000,
      slowMo: debugMode ? 100 : 50
    });
    
    // L∆∞u browser v√†o map
    activeBrowsers.set(profileId, {
      browser,
      refCount: 1,
      createdAt: Date.now()
    });
    
    return { browser, isNew: true, profileId };
  } catch (error) {
    console.error(`‚ùå L·ªói khi t·∫°o/l·∫•y phi√™n Chrome: ${error.message}`);
    throw error;
  }
}

// H√†m gi·∫£i ph√≥ng browser khi kh√¥ng c√≤n s·ª≠ d·ª•ng
async function releaseBrowser(profileId, forceClose = false) {
  if (!activeBrowsers.has(profileId)) return;
  
  const browserInfo = activeBrowsers.get(profileId);
  browserInfo.refCount -= 1;
  
  // N·∫øu kh√¥ng c√≤n tham chi·∫øu ho·∫∑c y√™u c·∫ßu ƒë√≥ng c∆∞·ª°ng b·ª©c
  if (browserInfo.refCount <= 0 || forceClose) {
    try {
      console.log(`üîÑ ƒê√≥ng phi√™n Chrome kh√¥ng c√≤n s·ª≠ d·ª•ng (profileId: ${profileId})`);
      await browserInfo.browser.close();
    } catch (closeError) {
      console.warn(`‚ö†Ô∏è L·ªói khi ƒë√≥ng phi√™n Chrome: ${closeError.message}`);
    } finally {
      activeBrowsers.delete(profileId);
    }
  }
}

// H√†m d·ªçn d·∫πp c√°c browser kh√¥ng s·ª≠ d·ª•ng sau m·ªôt th·ªùi gian
setInterval(() => {
  const now = Date.now();
  const MAX_IDLE_TIME = 10 * 60 * 1000; // 10 ph√∫t
  
  for (const [profileId, browserInfo] of activeBrowsers.entries()) {
    // N·∫øu kh√¥ng c√≤n tham chi·∫øu v√† ƒë√£ t·ªìn t·∫°i qu√° l√¢u
    if (browserInfo.refCount <= 0 && (now - browserInfo.createdAt > MAX_IDLE_TIME)) {
      releaseBrowser(profileId, true).catch(err => {
        console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp browser: ${err.message}`);
      });
    }
  }
}, 5 * 60 * 1000); // Ki·ªÉm tra m·ªói 5 ph√∫t

/**
 * T·∫£i file PDF t·ª´ Google Drive b·ªã ch·∫∑n t·∫£i xu·ªëng
 * S·ª≠ d·ª•ng puppeteer ƒë·ªÉ m·ªü PDF viewer v√† ch·ª•p l·∫°i c√°c trang
 * @param {string} fileId - ID c·ªßa file Google Drive
 * @param {string} fileName - T√™n file ƒë·ªÉ l∆∞u
 * @param {string} tempDir - Th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u c√°c file trung gian
 * @param {Object} watermarkConfig - C·∫•u h√¨nh x·ª≠ l√Ω watermark (t√πy ch·ªçn)
 * @returns {Promise<{success: boolean, filePath: string, error: string}>}
 */
export async function downloadBlockedPDF(fileId, fileName, tempDir, watermarkConfig = {}) {
  console.log(`üöÄ [CHROME] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file b·ªã ch·∫∑n: fileId=${fileId}, fileName=${fileName}`);
  
  // Ki·ªÉm tra MIME type c·ªßa file tr∆∞·ªõc khi x·ª≠ l√Ω
  try {
    const { google } = require('googleapis');
    const { createOAuth2Client } = require('@/utils/drive-utils');
    const oAuth2Client = await createOAuth2Client();
    const drive = google.drive({ version: 'v3', auth: oAuth2Client });

    const file = await drive.files.get({
      fileId: fileId,
      fields: 'id,name,mimeType',
      supportsAllDrives: true
    });

    // Ki·ªÉm tra n·∫øu file l√† video
    if (file.data.mimeType.includes('video')) {
      console.log(`üé• Ph√°t hi·ªán file video: ${file.data.mimeType}`);
      return {
        success: false,
        error: 'NO_PDF_PAGES_DETECTED',
        isVideo: true,
        fileId: fileId,
        fileName: fileName,
        shouldRetry: false
      };
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra MIME type: ${error.message}`);
    // Ti·∫øp t·ª•c x·ª≠ l√Ω n·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c MIME type
  }
  
  let browser = null;
  let page = null;
  let downloadedImages = [];
  let processedImages = [];
  const pageRequests = new Map();
  let cookies = null;
  let userAgent = null;
  let chromeStartFailed = false;
  let browserProfileId = null;
  
  // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!tempDir) {
    try {
      tempDir = path.join(os.tmpdir(), uuidv4());
      fs.mkdirSync(tempDir, { recursive: true });
    } catch (mkdirError) {
      console.error(`L·ªói t·∫°o th∆∞ m·ª•c t·∫°m: ${mkdirError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c t·∫°m: ${mkdirError.message}`);
    }
  }
  
  const imagesDir = path.join(tempDir, 'images');
  const processedDir = path.join(tempDir, 'processed');
  try {
    fs.mkdirSync(imagesDir, { recursive: true });
    fs.mkdirSync(processedDir, { recursive: true });
  } catch (mkdirError) {
    console.error(`L·ªói t·∫°o th∆∞ m·ª•c con: ${mkdirError.message}`);
    throw new Error(`Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c con: ${mkdirError.message}`);
  }
  
  // T·∫°o th∆∞ m·ª•c h·ªì s∆° cho Chrome
  let profilePath;
  try {
    profilePath = createChromeUserProfile();
  } catch (profileError) {
    console.error(`L·ªói t·∫°o h·ªì s∆° Chrome: ${profileError.message}`);
    profilePath = path.join(tempDir, 'chrome-profile');
    fs.mkdirSync(profilePath, { recursive: true });
  }
  
  // L∆∞u th√¥ng tin c·∫•u h√¨nh
  const debugMode = watermarkConfig && watermarkConfig.debugMode === true;
  
  // Log th√¥ng tin v·ªÅ ch·∫ø ƒë·ªô debug
  if (debugMode) {
    console.log(`üîç CH·∫æ ƒê·ªò DEBUG: Chrome s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã (KH√îNG ch·∫°y ·ªü ch·∫ø ƒë·ªô headless)`);
  }
  
  const outputPath = path.join(tempDir, `${path.basename(fileName, '.pdf')}_clean.pdf`);
  
  // Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
  const startTime = Date.now();
  
  // Ki·ªÉm tra xem c√≥ b·ªè qua x·ª≠ l√Ω watermark kh√¥ng
  const skipProcessing = watermarkConfig && (
    watermarkConfig.skipWatermarkRemoval || 
    watermarkConfig.skipImageProcessing || 
    watermarkConfig.preserveOriginal || 
    watermarkConfig.noProcessing
  );
  
  // Log r√µ r√†ng v·ªÅ ch·∫ø ƒë·ªô x·ª≠ l√Ω
  if (skipProcessing) {
    console.log(`‚ö†Ô∏è CH·∫æ ƒê·ªò KH√îNG X·ª¨ L√ù WATERMARK: S·∫Ω t·∫£i file g·ªëc kh√¥ng x·ª≠ l√Ω watermark`);
  } else {
    console.log(`üîß CH·∫æ ƒê·ªò X·ª¨ L√ù WATERMARK: S·∫Ω x·ª≠ l√Ω watermark tr√™n file`);
  }
  
  // K·∫øt h·ª£p config m·∫∑c ƒë·ªãnh v·ªõi config ƒë∆∞·ª£c truy·ªÅn v√†o
  const config = { 
    ...DEFAULT_CONFIG, 
    ...watermarkConfig,
    isBlockedFile: true,
    enhancedMode: !skipProcessing,
    brightnessBoost: skipProcessing ? 1.0 : (watermarkConfig.brightnessBoost || 1.05),
    contrastBoost: skipProcessing ? 1.0 : (watermarkConfig.contrastBoost || 1.25),
    sharpenAmount: skipProcessing ? 0 : (watermarkConfig.sharpenAmount || 1.8),
    saturationAdjust: skipProcessing ? 1.0 : (watermarkConfig.saturationAdjust || 1.3),
    preserveColors: skipProcessing ? true : (watermarkConfig.preserveColors !== undefined ? watermarkConfig.preserveColors : true),
    extraWhitening: skipProcessing ? false : (watermarkConfig.extraWhitening || false),
    aggressiveWatermarkRemoval: skipProcessing ? false : (watermarkConfig.aggressiveWatermarkRemoval || false),
    skipProcessing: skipProcessing
  };
  
  let fileSize = 0;
  
  try {
    console.log(`üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file b·ªã ch·∫∑n: ${fileName}`);
    
    // S·ª≠ d·ª•ng h√†m getOrCreateBrowser thay v√¨ kh·ªüi t·∫°o tr·ª±c ti·∫øp
    try {
      const browserResult = await getOrCreateBrowser(profilePath, debugMode);
      browser = browserResult.browser;
      browserProfileId = browserResult.profileId;
      console.log(`üåê ${browserResult.isNew ? 'T·∫°o m·ªõi' : 'T√°i s·ª≠ d·ª•ng'} phi√™n Chrome th√†nh c√¥ng`);
    } catch (browserError) {
      console.error(`L·ªói kh·ªüi t·∫°o tr√¨nh duy·ªát: ${browserError.message}`);
      chromeStartFailed = true;
      throw new Error(`Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Chrome: ${browserError.message}`);
    }
    
    // T·∫°o tab m·ªõi
    try {
      page = await browser.newPage();
      await page.setDefaultNavigationTimeout(120000);
    } catch (pageError) {
      console.error(`L·ªói t·∫°o tab m·ªõi: ${pageError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o tab tr√¨nh duy·ªát: ${pageError.message}`);
    }
    
    // Theo d√µi c√°c request ·∫£nh
    try {
      await page.setRequestInterception(true);
      
      page.on('request', (request) => {
        try {
          const url = request.url();
          
          // Ki·ªÉm tra c·∫£ 2 pattern: viewerng/img v√† viewer2/prod
          const isViewerNg = url.includes('viewerng/img');
          const isViewer2 = url.includes('viewer2/prod');
          
          if ((isViewerNg || isViewer2) && url.includes('page=')) {
            const pageMatch = url.match(/[?&]page=(\d+)/);
            if (pageMatch) {
              const pageNum = parseInt(pageMatch[1]);
              if (!pageRequests.has(pageNum)) {
                pageRequests.set(pageNum, url);
              }
            }
          }
          request.continue();
        } catch (requestError) {
          console.warn(`L·ªói x·ª≠ l√Ω request: ${requestError.message}`);
          request.continue();
        }
      });
    } catch (interceptError) {
      console.error(`L·ªói thi·∫øt l·∫≠p ch·∫∑n request: ${interceptError.message}`);
    }
    
    // M·ªü file PDF tr√™n Google Drive
    try {
      console.log(`üåê M·ªü PDF viewer cho file: ${fileId}`);
      await page.goto(`https://drive.google.com/file/d/${fileId}/view`, {
        waitUntil: 'networkidle2',
        timeout: 300000
      });

      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† file video kh√¥ng
      const isVideo = await page.evaluate(() => {
        // Ki·ªÉm tra c√°c element ƒë·∫∑c tr∆∞ng c·ªßa tr√¨nh xem video
        const videoPlayer = document.querySelector('.drive-viewer-video-player') || 
                          document.querySelector('video') ||
                          document.querySelector('[aria-label*="video"]');
        return !!videoPlayer;
      });

      if (isVideo) {
        console.log(`üé• Ph√°t hi·ªán file video qua Chrome`);
        return {
          success: false,
          error: 'NO_PDF_PAGES_DETECTED',
          isVideo: true,
          fileId: fileId,
          fileName: fileName,
          shouldRetry: false
        };
      }

    } catch (navigationError) {
      console.error(`L·ªói m·ªü file t·ª´ Drive: ${navigationError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ m·ªü file t·ª´ Google Drive: ${navigationError.message}`);
    }
    
    // Scroll ƒë·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang
    try {
      console.log(`üìú B·∫Øt ƒë·∫ßu scroll ƒë·ªÉ t·∫£i trang...`);
      await scrollToLoadAllPages(page, pageRequests);
      console.log(`üìä ƒê√£ ph√°t hi·ªán ${pageRequests.size} trang`);

      // Ki·ªÉm tra s·ªë trang ngay sau khi scroll
      if (pageRequests.size === 0) {
        console.log(`‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán trang PDF n√†o, c√≥ th·ªÉ l√† file video`);
        return {
          success: false,
          error: 'NO_PDF_PAGES_DETECTED',
          isVideo: true,
          fileId: fileId,
          fileName: fileName,
          shouldRetry: false // Th√™m flag ƒë·ªÉ kh√¥ng retry
        };
      }
    } catch (scrollError) {
      console.error(`L·ªói scroll ƒë·ªÉ t·∫£i trang: ${scrollError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang PDF: ${scrollError.message}`);
    }
    
    // L∆∞u cookies v√† userAgent ƒë·ªÉ t·∫£i ·∫£nh sau n√†y
    try {
      cookies = await page.cookies();
      userAgent = await page.evaluate(() => navigator.userAgent);
    } catch (cookieError) {
      console.error(`L·ªói l·∫•y cookies v√† userAgent: ${cookieError.message}`);
    }
    
    // ƒê√≥ng page sau khi l·∫•y th√¥ng tin
    try {
      await page.close();
      page = null;
    } catch (closeError) {
      console.warn(`L·ªói ƒë√≥ng tab: ${closeError.message}`);
      page = null;
    }
    
    // T·∫£i xu·ªëng c√°c ·∫£nh trang
    try {
      console.log(`üì• T·∫£i xu·ªëng ${pageRequests.size} trang...`);
      downloadedImages = await downloadAllPageImages(pageRequests, cookies, userAgent, imagesDir);
    } catch (downloadError) {
      console.error(`L·ªói t·∫£i ·∫£nh trang: ${downloadError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ c√°c trang PDF: ${downloadError.message}`);
    }
    
    // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ·∫£nh tr∆∞·ªõc khi x·ª≠ l√Ω
    const pngImages = await convertAllImagesToPng(downloadedImages, imagesDir);
    
    // X√°c ƒë·ªãnh c√≥ c·∫ßn x·ª≠ l√Ω watermark hay kh√¥ng
    if (true) {
      // B·ªè qua x·ª≠ l√Ω watermark v√† s·ª≠ d·ª•ng ·∫£nh g·ªëc tr·ª±c ti·∫øp
      console.log(`‚è≠Ô∏è B·ªé QUA b∆∞·ªõc x·ª≠ l√Ω watermark theo c·∫•u h√¨nh...`);
      processedImages = pngImages;
    } else {
      // X·ª≠ l√Ω watermark
      try {
        console.log(`üîß B·∫Øt ƒë·∫ßu x·ª≠ l√Ω watermark cho ${pngImages.length} trang...`);
        processedImages = await processAllImages(pngImages, processedDir, config);
        console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω watermark cho ${processedImages.length} trang`);
      } catch (processError) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω watermark: ${processError.message}`);
        console.log(`‚ö†Ô∏è S·ª≠ d·ª•ng ·∫£nh g·ªëc kh√¥ng x·ª≠ l√Ω watermark do l·ªói`);
        // Fallback s·ª≠ d·ª•ng ·∫£nh g·ªëc n·∫øu x·ª≠ l√Ω th·∫•t b·∫°i
        processedImages = pngImages;
      }
    }
    
    // T·∫°o file PDF t·ª´ c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω
    try {
      console.log(`üìÑ T·∫°o file PDF t·ª´ ${processedImages.length} ·∫£nh ƒë√£ x·ª≠ l√Ω...`);
      
      // Ki·ªÉm tra xem c√≥ b·ªè qua b∆∞·ªõc x·ª≠ l√Ω watermark kh√¥ng
      if (config.preserveOriginal || config.skipWatermarkRemoval) {
        console.log(`‚è≠Ô∏è T·∫°o PDF g·ªëc kh√¥ng th√™m logo theo y√™u c·∫ßu...`);
        await createPDFFromRawImages(processedImages, outputPath);
      } 
      else {
        // Ki·ªÉm tra xem ·∫£nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
        const hasProcessedImages = processedImages.some(img => img.includes('_processed'));
        
        if (hasProcessedImages && config.backgroundImage && fs.existsSync(config.backgroundImage)) {
          console.log(`‚ö†Ô∏è ·∫¢nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥, s·∫Ω t·∫°o PDF kh√¥ng th√™m logo ƒë·ªÉ tr√°nh l·∫∑p`);
          // S·ª≠ d·ª•ng createPDFFromRawImages thay v√¨ createPDFFromProcessedImages ƒë·ªÉ tr√°nh th√™m logo l·∫ßn n·ªØa
          await createPDFFromRawImages(processedImages, outputPath);
        } 
        // Tr∆∞·ªùng h·ª£p ·∫£nh ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c kh√¥ng c√≥ h√¨nh n·ªÅn
        else if (config.backgroundImage && fs.existsSync(config.backgroundImage)) {
          console.log(`üñºÔ∏è Th√™m h√¨nh n·ªÅn t√πy ch·ªânh: ${config.backgroundImage}`);
          await createPDFFromProcessedImages(processedImages, outputPath, config);
        } else {
          await createPDFFromRawImages(processedImages, outputPath);
        }
      }
    } catch (createPdfError) {
      console.error(`L·ªói t·∫°o PDF t·ª´ ·∫£nh: ${createPdfError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o file PDF t·ª´ ·∫£nh ƒë√£ x·ª≠ l√Ω: ${createPdfError.message}`);
    }
    
    // Ki·ªÉm tra file PDF ƒë√£ t·∫°o
    try {
      if (!fs.existsSync(outputPath)) {
        throw new Error('Kh√¥ng th·ªÉ t·∫°o file PDF');
      }
      
      fileSize = fs.statSync(outputPath).size;
      if (fileSize === 0) {
        throw new Error('File PDF ƒë∆∞·ª£c t·∫°o nh∆∞ng k√≠ch th∆∞·ªõc b·∫±ng 0');
      }
    } catch (checkError) {
      console.error(`L·ªói ki·ªÉm tra file PDF: ${checkError.message}`);
      throw checkError;
    }
    
    // T√≠nh th·ªùi gian x·ª≠ l√Ω
    const processingTime = (Date.now() - startTime) / 1000;
    
    console.log(`‚úÖ ƒê√£ t·∫°o file PDF th√†nh c√¥ng: ${outputPath} (${(fileSize / 1024 / 1024).toFixed(2)}MB) trong ${processingTime.toFixed(2)} gi√¢y`);
    
    return {
      success: true,
      filePath: outputPath,
      fileName: `${path.basename(fileName, '.pdf')}_clean.pdf`,
      originalSize: 0,
      processedSize: fileSize,
      processingTime: processingTime.toFixed(2),
      pageCount: processedImages.length,
      emptyFile: processedImages.length === 0,
      chromeStartFailed: chromeStartFailed
    };
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫£i file b·ªã ch·∫∑n: ${error.message}`);
    return {
      success: false,
      error: error.message,
      chromeStartFailed: chromeStartFailed
    };
  } finally {
    // Gi·∫£i ph√≥ng browser thay v√¨ ƒë√≥ng tr·ª±c ti·∫øp
    if (browserProfileId) {
      try {
        // ƒê√≥ng page n·∫øu c√≤n m·ªü
        if (page) {
          try {
            await page.close().catch(() => {});
          } catch (closeError) {
            console.warn(`L·ªói ƒë√≥ng tab: ${closeError.message}`);
          }
        }
        
        // Gi·∫£i ph√≥ng browser
        await releaseBrowser(browserProfileId, false);
      } catch (releaseError) {
        console.warn(`‚ö†Ô∏è L·ªói khi gi·∫£i ph√≥ng phi√™n Chrome: ${releaseError.message}`);
      }
    }
    
    // D·ªçn d·∫πp c√°c file ·∫£nh t·∫°m
    try {
      for (const image of [...downloadedImages, ...processedImages]) {
        if (fs.existsSync(image)) {
          try {
            fs.unlinkSync(image);
          } catch (unlinkError) {
            console.warn(`L·ªói x√≥a file ·∫£nh t·∫°m ${image}: ${unlinkError.message}`);
          }
        }
      }
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp ·∫£nh t·∫°m: ${cleanupError.message}`);
    }
    
    // Gi·ªØ l·∫°i th∆∞ m·ª•c h·ªì s∆° Chrome
    try {
      console.log(`‚úÖ Gi·ªØ l·∫°i h·ªì s∆° Chrome ƒë·ªÉ l∆∞u ƒëƒÉng nh·∫≠p cho l·∫ßn sau: ${profilePath}`);
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c h·ªì s∆° Chrome: ${cleanupError.message}`);
    }
  }
}

/**
 * Scroll ƒë·ªÉ t·∫£i t·∫•t c·∫£ c√°c trang c·ªßa PDF
 * @param {Page} page - Puppeteer page
 * @param {Map} pageRequests - Map l∆∞u tr·ªØ c√°c request trang
 */
async function scrollToLoadAllPages(page, pageRequests) {
  try {
    let lastPageCount = 0;
    let noNewPagesCount = 0;
    const MAX_NO_NEW_PAGES = 3;
    const SCROLL_INTERVAL = 200;
    const SPACE_PRESSES_PER_BATCH = 2;
    const BATCH_INTERVAL = 500;
    const MAX_SCROLL_ATTEMPTS = 100;
    let scrollAttempts = 0;
    
    // Scroll b·∫±ng c√°ch nh·∫•n ph√≠m Space
    while (noNewPagesCount < MAX_NO_NEW_PAGES && scrollAttempts < MAX_SCROLL_ATTEMPTS) {
      try {
        for (let i = 0; i < SPACE_PRESSES_PER_BATCH; i++) {
          try {
            await page.keyboard.press('Space');
          } catch (keyError) {
            console.warn(`L·ªói nh·∫•n ph√≠m Space l·∫ßn ${i+1}: ${keyError.message}`);
          }
          await new Promise(resolve => setTimeout(resolve, SCROLL_INTERVAL));
        }
      } catch (batchError) {
        console.warn(`L·ªói trong batch scroll: ${batchError.message}`);
      }
      
      scrollAttempts++;
      await new Promise(resolve => setTimeout(resolve, BATCH_INTERVAL));
      
      const currentPageCount = pageRequests.size;
      
      if (currentPageCount > lastPageCount) {
        console.log(`üìÑ ƒê√£ ph√°t hi·ªán: ${currentPageCount} trang (+${currentPageCount - lastPageCount})`);
        lastPageCount = currentPageCount;
        noNewPagesCount = 0;
      } else {
        noNewPagesCount++;
      }
      
      if (currentPageCount > 0 && noNewPagesCount >= MAX_NO_NEW_PAGES) {
        console.log(`‚úÖ Kh√¥ng ph√°t hi·ªán trang m·ªõi sau ${noNewPagesCount} l·∫ßn th·ª≠, k·∫øt th√∫c scroll`);
        break;
      }
    }
    
    // Th√™m v√†i l·∫ßn nh·∫•n space cu·ªëi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ t·∫£i h·∫øt
    try {
      for (let i = 0; i < 5; i++) {
        try {
          await page.keyboard.press('Space');
        } catch (finalKeyError) {
          console.warn(`L·ªói nh·∫•n ph√≠m Space cu·ªëi c√πng l·∫ßn ${i+1}: ${finalKeyError.message}`);
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (finalScrollError) {
      console.warn(`L·ªói scroll cu·ªëi c√πng: ${finalScrollError.message}`);
    }
    
    console.log(`‚úÖ ƒê√£ ho√†n th√†nh scroll v·ªõi ${pageRequests.size} trang`);
  } catch (error) {
    console.error(`‚ùå L·ªói khi scroll: ${error.message}`);
    throw error;
  }
}

/**
 * T·∫£i xu·ªëng t·∫•t c·∫£ ·∫£nh trang
 * @param {Map} pageRequests - Map c√°c URL trang
 * @param {Array} cookies - Cookies ƒë·ªÉ x√°c th·ª±c
 * @param {string} userAgent - User-Agent ƒë·ªÉ request
 * @param {string} imagesDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ t·∫£i
 */
async function downloadAllPageImages(pageRequests, cookies, userAgent, imagesDir) {
  try {
    const downloadedImages = [];
    const cookieStr = cookies ? cookies.map(c => `${c.name}=${c.value}`).join('; ') : '';
    
    // S·∫Øp x·∫øp c√°c trang theo th·ª© t·ª± tƒÉng d·∫ßn
    const pages = Array.from(pageRequests.entries()).sort(([a], [b]) => a - b);
    
    // Chia th√†nh c√°c batch ƒë·ªÉ tr√°nh qu√° t·∫£i
    for (let i = 0; i < pages.length; i += BATCH_SIZE) {
      try {
        const batch = pages.slice(i, i + BATCH_SIZE);
        console.log(`üì• ƒêang t·∫£i batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(pages.length / BATCH_SIZE)}...`);
        
        // T·∫£i song song trong batch
        const downloadPromises = batch.map(async ([pageNum, url]) => {
          let retries = MAX_RETRIES;
          
          while (retries > 0) {
            try {
              console.log(`üìÑ T·∫£i trang ${pageNum}...`);
              
              const response = await axios({
                method: 'get',
                url: url,
                responseType: 'arraybuffer',
                timeout: 30000,
                headers: {
                  'Cookie': cookieStr,
                  'User-Agent': userAgent,
                  'Referer': 'https://drive.google.com/',
                  'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
                }
              });
              
              // X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng ·∫£nh t·ª´ Content-Type
              const contentType = response.headers['content-type'];
              let extension = 'png'; // M·∫∑c ƒë·ªãnh l√† png
              
              if (contentType) {
                if (contentType.includes('jpeg') || contentType.includes('jpg')) {
                  extension = 'jpg';
                } else if (contentType.includes('webp')) {
                  extension = 'webp';
                }
              }
              
              // T·∫°o t√™n file v·ªõi ƒëu√¥i ph√π h·ª£p
              const imagePath = path.join(imagesDir, `page_${String(pageNum).padStart(3, '0')}.${extension}`);
              
              // L∆∞u file
              try {
                fs.writeFileSync(imagePath, Buffer.from(response.data));
                console.log(`‚úÖ ƒê√£ t·∫£i trang ${pageNum} (${extension})`);
                
                // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ t·∫£i
                downloadedImages[pageNum] = imagePath;
                break;
              } catch (writeError) {
                console.error(`L·ªói l∆∞u file ·∫£nh trang ${pageNum}: ${writeError.message}`);
                retries--;
                if (retries <= 0) {
                  console.error(`‚ùå Kh√¥ng th·ªÉ l∆∞u ·∫£nh trang ${pageNum} sau ${MAX_RETRIES} l·∫ßn th·ª≠`);
                } else {
                  await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
                }
              }
            } catch (error) {
              retries--;
              console.warn(`‚ö†Ô∏è L·ªói t·∫£i trang ${pageNum} (c√≤n ${retries} l·∫ßn th·ª≠): ${error.message}`);
              
              if (retries <= 0) {
                console.error(`‚ùå Kh√¥ng th·ªÉ t·∫£i trang ${pageNum} sau ${MAX_RETRIES} l·∫ßn th·ª≠`);
              } else {
                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
              }
            }
          }
        });
        
        // Ch·ªù t·∫•t c·∫£ trong batch ho√†n th√†nh
        try {
          await Promise.all(downloadPromises);
        } catch (batchError) {
          console.error(`L·ªói t·∫£i batch ·∫£nh: ${batchError.message}`);
        }
        
        // ƒê·ª£i gi·ªØa c√°c batch ƒë·ªÉ tr√°nh qu√° t·∫£i
        if (i + BATCH_SIZE < pages.length) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      } catch (batchError) {
        console.error(`L·ªói x·ª≠ l√Ω batch ${Math.floor(i / BATCH_SIZE) + 1}: ${batchError.message}`);
      }
    }
    
    // Tr·∫£ v·ªÅ m·∫£ng ch·ªâ ch·ª©a c√°c ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá
    return downloadedImages.filter(Boolean);
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫£i ·∫£nh trang: ${error.message}`);
    throw error;
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ ·∫£nh sang ƒë·ªãnh d·∫°ng PNG
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
 */
async function convertAllImagesToPng(images, outputDir) {
  try {
    const convertedImages = [];
    
    // S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª± trang
    const sortedImages = images.sort((a, b) => {
      try {
        const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
        const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
        return pageA - pageB;
      } catch (error) {
        return 0;
      }
    });
    
    // Chuy·ªÉn ƒë·ªïi t·ª´ng ·∫£nh sang png n·∫øu c·∫ßn
    for (let i = 0; i < sortedImages.length; i++) {
      try {
        const imagePath = sortedImages[i];
        let pageNum;
        try {
          pageNum = parseInt(path.basename(imagePath).match(/page_(\d+)/)[1]);
        } catch (parseError) {
          console.warn(`Kh√¥ng th·ªÉ ph√¢n t√≠ch s·ªë trang t·ª´ ${imagePath}: ${parseError.message}`);
          pageNum = i + 1;
        }
        
        const extension = path.extname(imagePath);
        
        // N·∫øu ƒë√£ l√† png, kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi
        if (extension.toLowerCase() === '.png') {
          convertedImages.push(imagePath);
          continue;
        }
        
        // Chuy·ªÉn ƒë·ªïi sang png
        const pngPath = path.join(outputDir, `page_${String(pageNum).padStart(3, '0')}.png`);
        
        try {
          console.log(`üîÑ Chuy·ªÉn ƒë·ªïi trang ${pageNum} t·ª´ ${extension} sang png...`);
          await sharp(imagePath)
            .toFormat('png')
            .toFile(pngPath);
          console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi trang ${pageNum} sang png`);
          convertedImages.push(pngPath);
        } catch (error) {
          console.error(`‚ùå L·ªói chuy·ªÉn ƒë·ªïi trang ${pageNum} sang png: ${error.message}`);
          // N·∫øu kh√¥ng chuy·ªÉn ƒë·ªïi ƒë∆∞·ª£c, gi·ªØ ·∫£nh g·ªëc
          convertedImages.push(imagePath);
        }
      } catch (imageError) {
        console.error(`L·ªói x·ª≠ l√Ω ·∫£nh th·ª© ${i+1}: ${imageError.message}`);
      }
    }
    
    return convertedImages;
  } catch (error) {
    console.error(`‚ùå L·ªói chuy·ªÉn ƒë·ªïi ·∫£nh sang PNG: ${error.message}`);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c ·∫£nh b·∫±ng c√°ch s·ª≠ d·ª•ng h√†m processImage t·ª´ module watermark
 * @param {Array<string>} images - M·∫£ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
 * @param {string} outputDir - Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
 * @param {Object} config - C·∫•u h√¨nh x·ª≠ l√Ω watermark
 * @returns {Promise<Array<string>>} - M·∫£ng c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ x·ª≠ l√Ω
 */
async function processAllImages(images, outputDir, config) {
  try {
    const processedImages = [];
    
    // S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª± trang
    const sortedImages = images.sort((a, b) => {
      try {
        const pageA = parseInt(path.basename(a).match(/page_(\d+)/)[1]);
        const pageB = parseInt(path.basename(b).match(/page_(\d+)/)[1]);
        return pageA - pageB;
      } catch (error) {
        return 0;
      }
    });
    
    // Ki·ªÉm tra xem c√≥ b·ªè qua x·ª≠ l√Ω kh√¥ng
    if (config.noProcessing || config.skipWatermarkRemoval || config.skipImageProcessing || config.preserveOriginal) {
      console.log(`‚è≠Ô∏è B·ªè qua ho√†n to√†n b∆∞·ªõc x·ª≠ l√Ω watermark theo y√™u c·∫ßu...`);
      
      // T·∫°o b·∫£n sao c·ªßa ·∫£nh v·ªõi t√™n file ƒë√£ x·ª≠ l√Ω ƒë·ªÉ duy tr√¨ lu·ªìng x·ª≠ l√Ω
      for (let i = 0; i < sortedImages.length; i++) {
        const imagePath = sortedImages[i];
        let pageNum;
        try {
          pageNum = parseInt(path.basename(imagePath).match(/page_(\d+)/)[1]);
        } catch (parseError) {
          pageNum = i + 1;
        }
        
        const processedPath = path.join(outputDir, `page_${String(pageNum).padStart(3, '0')}_processed.png`);
        fs.copyFileSync(imagePath, processedPath);
        console.log(`‚úÖ ƒê√£ sao ch√©p trang ${pageNum} (kh√¥ng x·ª≠ l√Ω watermark)`);
        processedImages.push(processedPath);
      }
      
      return processedImages;
    }
    
    // S·ª≠ d·ª•ng c·∫•u h√¨nh n√¢ng cao ƒë·ªÉ x·ª≠ l√Ω m·∫°nh h∆°n v·ªõi file b·ªã kh√≥a
    const enhancedConfig = {
      // Gi·ªØ ƒë·ªô m·ªù n·ªÅn t·ª´ c·∫•u h√¨nh g·ªëc
      backgroundOpacity: config.backgroundOpacity || 0.15,
      // Th√™m c√°c tham s·ªë x·ª≠ l√Ω n√¢ng cao
      enhancedMode: true,
      contrastBoost: config.contrastBoost || 1.25,     // TƒÉng t·ª´ 1.2 l√™n 1.25 ƒë·ªÉ tƒÉng ƒë·ªô n√©t
      brightnessBoost: config.brightnessBoost || 1.05,   // Gi·ªØ nguy√™n ƒë·ªÉ gi·ªØ n·ªôi dung
      sharpenAmount: config.sharpenAmount || 1.8,        // TƒÉng t·ª´ 1.5 l√™n 1.8 ƒë·ªÉ tƒÉng ƒë·ªô n√©t t·ªëi ƒëa
      saturationAdjust: config.saturationAdjust || 1.3,  // Gi·ªØ nguy√™n ƒë·ªÉ gi·ªØ m√†u s·∫Øc
      preserveColors: true,                                       // Gi·ªØ nguy√™n tham s·ªë gi·ªØ m√†u s·∫Øc
      extraWhitening: false,                                      // T·∫Øt ch·∫ø ƒë·ªô l√†m tr·∫Øng th√™m
      aggressiveWatermarkRemoval: false                           // T·∫Øt ch·∫ø ƒë·ªô x·ª≠ l√Ω m·∫°nh nh·∫•t
    };
    
    console.log(`üîß √Åp d·ª•ng x·ª≠ l√Ω n√¢ng cao cho file PDF b·ªã kh√≥a v·ªõi ${sortedImages.length} trang`);
    
    // X·ª≠ l√Ω t·ª´ng ·∫£nh
    for (let i = 0; i < sortedImages.length; i++) {
      try {
        const imagePath = sortedImages[i];
        let pageNum;
        try {
          pageNum = parseInt(path.basename(imagePath).match(/page_(\d+)/)[1]);
        } catch (parseError) {
          console.warn(`Kh√¥ng th·ªÉ ph√¢n t√≠ch s·ªë trang t·ª´ ${imagePath}: ${parseError.message}`);
          pageNum = i + 1;
        }
        
        // Lu√¥n s·ª≠ d·ª•ng .png cho file ƒë√£ x·ª≠ l√Ω ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
        const processedPath = path.join(outputDir, `page_${String(pageNum).padStart(3, '0')}_processed.png`);
        
        try {
          console.log(`üîç X·ª≠ l√Ω n√¢ng cao watermark trang ${pageNum}...`);
          
          // Th·ª≠ x·ª≠ l√Ω watermark v·ªõi ph∆∞∆°ng ph√°p n√¢ng cao tr∆∞·ªõc
          try {
            // ƒê·ªçc ·∫£nh g·ªëc v√†o buffer
            const imageBuffer = fs.readFileSync(imagePath);
            
            // T·∫°o m·ªôt pipeline x·ª≠ l√Ω n√¢ng cao v·ªõi sharp
            let processedBuffer = await sharp(imageBuffer)
              // TƒÉng ƒë·ªô s√°ng v√† ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π nh√†ng h∆°n
              .modulate({
                brightness: enhancedConfig.brightnessBoost,
                saturation: enhancedConfig.saturationAdjust // TƒÉng ƒë·ªô b√£o h√≤a ƒë·ªÉ gi·ªØ m√†u s·∫Øc
              })
              // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n v·ª´a ph·∫£i
              .linear(
                enhancedConfig.contrastBoost, // ƒê·ªô d·ªëc (a) v·ª´a ph·∫£i
                -(128 * enhancedConfig.contrastBoost - 128) / 255 // ƒêi·ªÉm c·∫Øt (b)
              )
              // Thay th·∫ø sharpen b·∫±ng ph∆∞∆°ng ph√°p thay th·∫ø
              .linear(1.3, -0.1)
              .recomb([
                [1.1, 0, 0],
                [0, 1.1, 0],
                [0, 0, 1.1]
              ]);
              
            // N·∫øu c·∫ßn gi·ªØ m√†u s·∫Øc, b·ªè qua b∆∞·ªõc normalise
            if (!enhancedConfig.preserveColors) {
              // C√¢n b·∫±ng m√†u - c√≥ th·ªÉ l√†m m·∫•t m√†u s·∫Øc
              processedBuffer = await processedBuffer.normalise().toBuffer();
            } else {
              // L∆∞u ra buffer m√† kh√¥ng c√¢n b·∫±ng m√†u ƒë·ªÉ gi·ªØ m√†u s·∫Øc
              processedBuffer = await processedBuffer.toBuffer();
            }
              
            // N·∫øu c√≥ tham s·ªë extraWhitening, √°p d·ª•ng x·ª≠ l√Ω th√™m ƒë·ªÉ lo·∫°i b·ªè watermark
            if (enhancedConfig.extraWhitening) {
              console.log(`üîç √Åp d·ª•ng x·ª≠ l√Ω l√†m tr·∫Øng th√™m cho trang ${pageNum} (ch·∫ø ƒë·ªô c√¢n b·∫±ng)...`);
              
              // S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c√¢n b·∫±ng ƒë·ªÉ gi·ªØ l·∫°i vƒÉn b·∫£n
              processedBuffer = await sharp(processedBuffer)
                // S·ª≠ d·ª•ng ng∆∞·ª°ng cao h∆°n ƒë·ªÉ ch·ªâ lo·∫°i b·ªè watermark m·ªù
                .threshold(240)
                // Gi·∫£m ƒë·ªô t∆∞∆°ng ph·∫£n ƒë·ªÉ gi·ªØ l·∫°i vƒÉn b·∫£n
                .linear(
                  1.2, // ƒê·ªô d·ªëc th·∫•p h∆°n
                  -0.1 // ƒêi·ªÉm c·∫Øt √¢m nh·ªè h∆°n
                )
                // Gi·∫£m nhi·ªÖu nh·∫π
                .median(2)
                // Thay th·∫ø sharpen b·∫±ng ph∆∞∆°ng ph√°p thay th·∫ø
                .linear(1.2, -0.05)
                .recomb([
                  [1.05, 0, 0],
                  [0, 1.05, 0],
                  [0, 0, 1.05]
                ])
                .png({ quality: 100 })
                .toBuffer();
            }
            
            // N·∫øu ch·∫ø ƒë·ªô x·ª≠ l√Ω m·∫°nh ƒë∆∞·ª£c b·∫≠t (ƒë√£ t·∫Øt trong config)
            if (enhancedConfig.aggressiveWatermarkRemoval) {
              console.log(`üî• √Åp d·ª•ng x·ª≠ l√Ω m·∫°nh ƒë·ªÉ lo·∫°i b·ªè watermark cho trang ${pageNum}...`);
              
              // X·ª≠ l√Ω th√™m m·ªôt l·∫ßn n·ªØa v·ªõi c√°c th√¥ng s·ªë m·∫°nh h∆°n
              processedBuffer = await sharp(processedBuffer)
                // √Åp d·ª•ng b·ªô l·ªçc m√†u ƒë·ªÉ gi·∫£m ƒë·ªô x√°m c·ªßa watermark
                .tint({ r: 255, g: 255, b: 255 }) // TƒÉng th√†nh ph·∫ßn tr·∫Øng
                // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n cao h∆°n n·ªØa
                .linear(
                  1.3, // Gi·∫£m ƒë·ªô d·ªëc xu·ªëng
                  -0.1 // Gi·∫£m ƒëi·ªÉm c·∫Øt √¢m
                )
                // L√†m m·ªãn ·∫£nh ƒë·ªÉ gi·∫£m nhi·ªÖu
                .blur(0.2)
                // Thay th·∫ø sharpen b·∫±ng ph∆∞∆°ng ph√°p thay th·∫ø
                .linear(1.25, -0.08)
                .recomb([
                  [1.08, 0, 0],
                  [0, 1.08, 0],
                  [0, 0, 1.08]
                ])
                .png({ quality: 100 })
                .toBuffer();
            }
            
            // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho watermark khi gi·ªØ m√†u s·∫Øc
            if (enhancedConfig.preserveColors) {
              console.log(`üé® √Åp d·ª•ng x·ª≠ l√Ω gi·ªØ m√†u s·∫Øc cho trang ${pageNum}...`);
              
              // S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p gi·ªØ m√†u s·∫Øc v√† lo·∫°i b·ªè watermark
              processedBuffer = await sharp(processedBuffer)
                // Thay th·∫ø sharpen b·∫±ng ph∆∞∆°ng ph√°p thay th·∫ø
                .linear(1.3, -0.12)
                .recomb([
                  [1.12, 0, 0],
                  [0, 1.12, 0],
                  [0, 0, 1.12]
                ])
                // TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n nh·∫π ƒë·ªÉ l√†m r√µ vƒÉn b·∫£n
                .linear(
                  1.25, // TƒÉng t·ª´ 1.2 l√™n 1.25
                  -0.03 // Gi·ªØ nguy√™n
                )
                // TƒÉng ƒë·ªô b√£o h√≤a m√†u m·ªôt ch√∫t n·ªØa
                .modulate({
                  saturation: 1.3, // Gi·ªØ nguy√™n
                  brightness: 1.05 // Gi·ªØ nguy√™n
                })
                // Th√™m b∆∞·ªõc x·ª≠ l√Ω cu·ªëi c√πng ƒë·ªÉ tƒÉng ƒë·ªô n√©t
                .recomb([
                  [1.1, 0, 0],    // TƒÉng k√™nh ƒë·ªè l√™n 10%
                  [0, 1.1, 0],    // TƒÉng k√™nh xanh l√° l√™n 10%
                  [0, 0, 1.1]     // TƒÉng k√™nh xanh d∆∞∆°ng l√™n 10%
                ])
                .png({ quality: 100 })
                .toBuffer();
            }
            
            // L∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
            fs.writeFileSync(processedPath, processedBuffer);
            console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω n√¢ng cao watermark trang ${pageNum}`);
            
            // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ x·ª≠ l√Ω
            processedImages.push(processedPath);
          } catch (advancedError) {
            console.error(`‚ùå L·ªói x·ª≠ l√Ω n√¢ng cao trang ${pageNum}: ${advancedError.message}`);
            console.log(`‚ö†Ô∏è Chuy·ªÉn sang ph∆∞∆°ng ph√°p x·ª≠ l√Ω ƒë∆°n gi·∫£n...`);
            
            // N·∫øu ph∆∞∆°ng ph√°p n√¢ng cao th·∫•t b·∫°i, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n
            await processImage(imagePath, processedPath, enhancedConfig);
            console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω xong trang ${pageNum} v·ªõi ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n`);
            
            // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ x·ª≠ l√Ω
            processedImages.push(processedPath);
          }
        } catch (error) {
          console.error(`‚ùå L·ªói x·ª≠ l√Ω watermark trang ${pageNum}: ${error.message}`);
          // N·∫øu x·ª≠ l√Ω th·∫•t b·∫°i, s·ª≠ d·ª•ng ·∫£nh g·ªëc
          processedImages.push(imagePath);
        }
      } catch (pageError) {
        console.error(`L·ªói x·ª≠ l√Ω trang th·ª© ${i+1}: ${pageError.message}`);
      }
    }
    
    return processedImages;
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh: ${error.message}`);
    throw error;
  }
} 