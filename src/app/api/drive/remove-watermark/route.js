/**
 * API x√≥a h√¨nh m·ªù file PDF t·ª´ Google Drive
 * 
 * API n√†y s·∫Ω:
 * 1. T·∫£i xu·ªëng file PDF t·ª´ Google Drive
 * 2. X·ª≠ l√Ω ƒë·ªÉ x√≥a watermark
 * 3. T√πy ch·ªçn th√™m h√¨nh n·ªÅn t√πy ch·ªânh
 * 4. T·∫£i l√™n file ƒë√£ x·ª≠ l√Ω l√™n Google Drive
 * 5. Tr·∫£ v·ªÅ link ƒë·∫øn file ƒë√£ x·ª≠ l√Ω
 * 
 * Tham s·ªë:
 * - driveLink: Link ƒë·∫øn file PDF tr√™n Google Drive
 * - backgroundImage (t√πy ch·ªçn): T√™n file h√¨nh n·ªÅn (v√≠ d·ª•: "nen.png") ho·∫∑c ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
 *   - N·∫øu ch·ªâ cung c·∫•p t√™n file, h·ªá th·ªëng s·∫Ω t√¨m trong th∆∞ m·ª•c g·ªëc c·ªßa ·ª©ng d·ª•ng
 *   - V√≠ d·ª•: "nen.png" s·∫Ω t·ª± ƒë·ªông tr·ªè ƒë·∫øn "[th∆∞ m·ª•c ·ª©ng d·ª•ng]/nen.png"
 * - backgroundOpacity (t√πy ch·ªçn): ƒê·ªô trong su·ªët c·ªßa h√¨nh n·ªÅn (0.1 = 10%)
 * - courseId (t√πy ch·ªçn): ID c·ªßa kh√≥a h·ªçc trong MongoDB ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω
 */

import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { Worker, isMainThread, parentPort, workerData } from 'worker_threads';
import { v4 as uuidv4 } from 'uuid';
import os from 'os';
import { google } from 'googleapis';
import { ObjectId } from 'mongodb';
import { cookies } from 'next/headers';
import { cookieConfig } from '@/config/env-config';
import { getMongoClient } from '@/lib/mongodb';

// Import c√°c module ƒë√£ t√°ch
import { API_TOKEN, DEFAULT_CONFIG } from './lib/config.js';
import { downloadFromGoogleDrive } from './lib/drive-service.js';
import { uploadToDrive } from './lib/drive-service.js';
import { cleanPdf, processImage } from './lib/watermark.js';
import { cleanupTempFiles, getTokenByType, findGhostscript, escapeDriveQueryString, updateProcessedFileInDB, forceGarbageCollection } from './lib/utils.js';
import { processPage, convertPage } from './lib/workers.js';
import { 
  processDriveFolder, 
  createDriveFolder, 
  uploadFileToDriveFolder,
  downloadFileFromDrive,
  extractGoogleDriveFileId,
  findOrCreateCourseFolder,
  processRecursiveFolder
} from './lib/drive-service.js';
import { processPDF } from './lib/drive-fix-blockdown.js';

// Suppress Node.js deprecation warnings for punycode module
process.noDeprecation = true;
// If you still need specific warnings, you can handle them selectively
process.on('warning', (warning) => {
  if (warning.name === 'DeprecationWarning' && warning.message.includes('punycode')) {
    // Ignore punycode deprecation warnings
    return;
  }
  // Log other warnings if needed
  // console.warn(warning.name, warning.message);
});

// Th√™m gi√°m s√°t s·ª≠ d·ª•ng b·ªô nh·ªõ
const memoryMonitor = {
  lastMemoryUsage: process.memoryUsage(),
  logMemoryStats: function(label = 'Hi·ªán t·∫°i') {
    try {
      const currentUsage = process.memoryUsage();
      const heapTotal = (currentUsage.heapTotal / (1024 * 1024)).toFixed(2);
      const heapUsed = (currentUsage.heapUsed / (1024 * 1024)).toFixed(2);
      const rss = (currentUsage.rss / (1024 * 1024)).toFixed(2);
      
      // T√≠nh to√°n s·ª± thay ƒë·ªïi
      const heapUsedDiff = ((currentUsage.heapUsed - this.lastMemoryUsage.heapUsed) / (1024 * 1024)).toFixed(2);
      const rssDiff = ((currentUsage.rss - this.lastMemoryUsage.rss) / (1024 * 1024)).toFixed(2);
      
      console.log(`üìä S·ª≠ d·ª•ng b·ªô nh·ªõ (${label}): ${heapUsed}MB/${heapTotal}MB (Heap), ${rss}MB (RSS), Thay ƒë·ªïi: ${heapUsedDiff}MB (Heap), ${rssDiff}MB (RSS)`);
      
      // C·∫≠p nh·∫≠t gi√° tr·ªã cu·ªëi
      this.lastMemoryUsage = currentUsage;
      
      // X·ª≠ l√Ω r√≤ r·ªâ b·ªô nh·ªõ ti·ªÅm ·∫©n
      if (parseFloat(heapUsedDiff) > 50 || parseFloat(rssDiff) > 100) {
        console.warn(`‚ö†Ô∏è Ph√°t hi·ªán tƒÉng b·ªô nh·ªõ ƒë√°ng k·ªÉ: ${heapUsedDiff}MB (Heap), ${rssDiff}MB (RSS)`);
        forceGarbageCollection();
      }
    } catch (error) {
      console.debug(`L·ªói khi log th√¥ng tin b·ªô nh·ªõ: ${error.message}`);
    }
  }
};

// S·ª≠a import sharp ƒë·ªÉ s·ª≠ d·ª•ng phi√™n b·∫£n t∆∞∆°ng th√≠ch v·ªõi Node.js
let sharp;
try {
  sharp = require('sharp');
  
  if (process.env.NODE_ENV === 'production') {
    // C√°c c·∫•u h√¨nh cho m√¥i tr∆∞·ªùng production n·∫øu c·∫ßn
  }
} catch (error) {
  sharp = null;
}

// ƒê·∫∑t ƒë∆∞·ªùng d·∫´n cho worker - c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi Next.js
if (typeof window === 'undefined' && sharp) {
  try {
    sharp.disableWorker = true;
    
    if (sharp.GlobalWorkerOptions) {
      sharp.GlobalWorkerOptions.disableWorker = true;
    }
  } catch (error) {
    // Handle error
  }
}

// Ki·ªÉm tra n·∫øu ƒëang trong worker thread
if (!isMainThread) {
  const task = workerData.task;
  
  if (task === 'processPage') {
    // X·ª≠ l√Ω ·∫£nh trong worker thread
    // Kh√¥ng k·∫øt n·ªëi ƒë·∫øn MongoDB trong worker thread
    processPage(workerData).then(result => {
      parentPort.postMessage(result);
    }).catch(error => {
      parentPort.postMessage({ success: false, error: error.message });
    });
  } else if (task === 'convertPage') {
    // Chuy·ªÉn ƒë·ªïi PDF sang PNG trong worker thread
    // Kh√¥ng k·∫øt n·ªëi ƒë·∫øn MongoDB trong worker thread
    convertPage(workerData).then(result => {
      parentPort.postMessage(result);
    }).catch(error => {
      parentPort.postMessage({ success: false, error: error.message });
    });
  }
  // ƒê·∫£m b·∫£o worker thread kh√¥ng th·ª±c hi·ªán code sau ƒë√¢y b·∫±ng c√°ch tho√°t s·ªõm
  process.exit(0); // Tho√°t kh·ªèi worker thread sau khi ho√†n th√†nh
}

// Next.js API route handler
export async function POST(request) {
  // T·∫°o m·ªôt k·∫øt n·ªëi MongoDB duy nh·∫•t cho route handler
  let mongoClient = null;
  let tempDir = null;
  let processedFilePath = null;
  let processingFolders = [];
  
  try {
    // B·∫Øt ƒë·∫ßu ƒëo th·ªùi gian
    const startTime = Date.now();
    
    // Log th√¥ng tin b·ªô nh·ªõ
    memoryMonitor.logMemoryStats('B·∫Øt ƒë·∫ßu API');
    
    // K·∫øt n·ªëi MongoDB ngay t·ª´ ƒë·∫ßu trong thread ch√≠nh - CH·ªà K·∫æT N·ªêI M·ªòT L·∫¶N
    try {
      mongoClient = await getMongoClient();
      console.log('üìä Thi·∫øt l·∫≠p k·∫øt n·ªëi MongoDB trong thread ch√≠nh th√†nh c√¥ng');
    } catch (mongoError) {
      console.error(`üìä L·ªói k·∫øt n·ªëi MongoDB: ${mongoError.message}`);
      // V·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω ngay c·∫£ khi kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB
    }
    
    // L·∫•y token t·ª´ cookie thay v√¨ t·ª´ request body
    const cookieStore = await cookies();
    const token = cookieStore.get(cookieConfig.authCookieName)?.value;
    const skipTokenValidation = true; // Lu√¥n b·ªè qua x√°c th·ª±c token kh√¥ng ph·ª• thu·ªôc v√†o m√¥i tr∆∞·ªùng
    
    // Parse request body
    const requestBody = await request.json();
    let { driveLink, backgroundImage, backgroundOpacity, url, courseName, courseId, 
          highPerformance, maxWorkers, batchSize, waitTime, dpi,
          processRecursively, maxRecursionDepth } = requestBody;
    
    // Lu√¥n ƒë·∫∑t skipWatermarkRemoval = false ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n x·ª≠ l√Ω watermark
    const skipWatermarkRemoval = false;

    // H·ªó tr·ª£ c·∫£ url v√† driveLink (ƒë·ªÉ t∆∞∆°ng th√≠ch)
    if (!driveLink && url) {
      driveLink = url;
    }

    // S·ª≠ d·ª•ng "nen.png" l√†m h√¨nh n·ªÅn m·∫∑c ƒë·ªãnh
    if (!backgroundImage) {
      backgroundImage = path.join(process.cwd(), "nen.png");
    }
    if (backgroundOpacity === undefined) {
      backgroundOpacity = 0.15; // Gi·∫£m xu·ªëng 0.15 ƒë·ªÉ ·∫£nh n·ªÅn ƒë·∫≠m h∆°n
    }
    
    // T·∫°o c·∫•u h√¨nh hi·ªáu su·∫•t t√πy ch·ªânh n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    let performanceConfig = { ...DEFAULT_CONFIG };
    
    // Ch·∫ø ƒë·ªô hi·ªáu su·∫•t cao n·∫øu client y√™u c·∫ßu
    if (highPerformance === true) {
      console.log('üöÄ K√≠ch ho·∫°t ch·∫ø ƒë·ªô hi·ªáu su·∫•t cao theo y√™u c·∫ßu c·ªßa client');
      performanceConfig.highPerformanceMode = true;
      
      // S·ª≠ d·ª•ng c√°c tham s·ªë t√πy ch·ªânh t·ª´ client n·∫øu ƒë∆∞·ª£c cung c·∫•p
      if (maxWorkers && typeof maxWorkers === 'number') performanceConfig.maxWorkers = maxWorkers;
      if (batchSize && typeof batchSize === 'number') performanceConfig.batchSize = batchSize;
      if (waitTime && typeof waitTime === 'number') performanceConfig.waitTime = waitTime;
      if (dpi && typeof dpi === 'number') performanceConfig.dpi = dpi;
      
      // L·∫•y th√¥ng tin h·ªá th·ªëng ƒë·ªÉ t·ªëi ∆∞u h√≥a
      try {
        const cpuCount = os.cpus().length;
        performanceConfig.gsParallel = Math.min(Math.floor(cpuCount / 2), 4);
        console.log(`üñ•Ô∏è S·ª≠ d·ª•ng ${performanceConfig.gsParallel} lu·ªìng GhostScript`);
      } catch (osError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin CPU: ${osError.message}`);
      }
    }

    // X√°c th·ª±c ng∆∞·ªùi d√πng n·∫øu kh√¥ng skip validation
    if (!skipTokenValidation) {
      if (!token) {
        return NextResponse.json(
          { error: 'Kh√¥ng ƒë∆∞·ª£c ph√©p. Vui l√≤ng ƒëƒÉng nh·∫≠p.' },
          { status: 401 }
        );
      }
      
      // B·ªè x√°c th·ª±c v·ªõi Firebase, lu√¥n coi token l√† h·ª£p l·ªá v√¨ skipTokenValidation=true
    }

    // Validate drive link
    if (!driveLink) {
      return NextResponse.json(
        { error: 'Thi·∫øu li√™n k·∫øt Google Drive.' },
        { status: 400 }
      );
    }
    
    // Theo d√µi b·ªô nh·ªõ sau khi x√°c th·ª±c
    memoryMonitor.logMemoryStats('Sau x√°c th·ª±c');
    
    // Ki·ªÉm tra xem link l√† folder hay file
    let isFolder = false;
    if (driveLink.includes('drive.google.com/drive/folders/') || 
        driveLink.includes('drive.google.com/drive/u/0/folders/') ||
        driveLink.includes('drive.google.com/drive/my-drive/folders/') ||
        driveLink.includes('drive.google.com/drive/shared-with-me/folders/') ||
        driveLink.includes('drive.google.com/folders/') ||
        (driveLink.includes('drive.google.com') && driveLink.includes('folders'))) {
      isFolder = true;
    }
    
    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát cho link c√≥ d·∫°ng drive.google.com/open?id=
    if (!isFolder && driveLink.includes('drive.google.com/open?id=')) {
      try {
        // Tr√≠ch xu·∫•t ID c·ªßa t√†i nguy√™n
        const result = extractGoogleDriveFileId(driveLink);
        const fileId = result.fileId;
        
        // L·∫•y token ƒë·ªÉ truy c·∫≠p Drive API
        const downloadToken = getTokenByType('download');
        if (downloadToken) {
          // T·∫°o OAuth2 client
          const oauth2Client = new google.auth.OAuth2(
            process.env.GOOGLE_CLIENT_ID,
            process.env.GOOGLE_CLIENT_SECRET,
            process.env.GOOGLE_REDIRECT_URI
          );
          
          oauth2Client.setCredentials(downloadToken);
          const drive = google.drive({ version: 'v3', auth: oauth2Client });
          
          // L·∫•y metadata c·ªßa t√†i nguy√™n ƒë·ªÉ ki·ªÉm tra lo·∫°i
          const fileMetadata = await drive.files.get({
            fileId: fileId,
            supportsAllDrives: true,
            includeItemsFromAllDrives: true,
            fields: 'name,mimeType'
          });
          
          // Ki·ªÉm tra n·∫øu l√† th∆∞ m·ª•c (mimeType = 'application/vnd.google-apps.folder')
          if (fileMetadata.data.mimeType === 'application/vnd.google-apps.folder') {
            isFolder = true;
            console.log(`ƒê√£ x√°c ƒë·ªãnh link l√† th∆∞ m·ª•c t·ª´ mimeType: ${fileMetadata.data.mimeType}`);
          }
        }
      } catch (error) {
        console.log(`L·ªói khi ki·ªÉm tra lo·∫°i t√†i nguy√™n: ${error.message}`);
      }
    }
    
    // Log th√¥ng tin b·ªô nh·ªõ tr∆∞·ªõc khi x·ª≠ l√Ω t·∫≠p tin
    memoryMonitor.logMemoryStats('Tr∆∞·ªõc khi x·ª≠ l√Ω');
    
    let result;
    if (isFolder) {
      console.log('X·ª≠ l√Ω folder:', driveLink);
      // X·ª≠ l√Ω n·∫øu l√† folder
      result = await handleDriveFolder(driveLink, backgroundImage, backgroundOpacity, courseName, courseId, skipWatermarkRemoval, processRecursively === true, maxRecursionDepth || 5);
      
      // Kh√¥ng c·∫ßn ƒë·ªçc response.json() ·ªü ƒë√¢y v√¨ s·∫Ω l√†m stream b·ªã kh√≥a
      // Log ƒë∆∞·ª£c t·∫°o tr·ª±c ti·∫øp trong h√†m handleDriveFolder r·ªìi
      console.log('ƒê√£ x·ª≠ l√Ω folder th√†nh c√¥ng, tr·∫£ v·ªÅ k·∫øt qu·∫£...');
    } else {
      console.log('X·ª≠ l√Ω file ƒë∆°n l·∫ª:', driveLink);
      // X·ª≠ l√Ω n·∫øu l√† file (PDF ho·∫∑c ·∫£nh)
      result = await handleDriveFile(driveLink, backgroundImage, backgroundOpacity, courseName, courseId, performanceConfig);
    }
    
    // Log th√¥ng tin b·ªô nh·ªõ sau khi x·ª≠ l√Ω t·∫≠p tin
    memoryMonitor.logMemoryStats('Sau khi x·ª≠ l√Ω');
    
    // D·ªçn d·∫πp b·ªô nh·ªõ tr∆∞·ªõc khi tr·∫£ v·ªÅ k·∫øt qu·∫£
    forceGarbageCollection();
    
    return result;
  } catch (error) {
    // Log th√¥ng tin b·ªô nh·ªõ khi c√≥ l·ªói
    memoryMonitor.logMemoryStats('L·ªói x·∫£y ra');
    
    // Clean up temp files
    if (tempDir && fs.existsSync(tempDir)) {
      try {
        cleanupTempFiles(tempDir);
      } catch (cleanupError) {
        console.error(`L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
      }
    }
    
    // D·ªçn d·∫πp c√°c th∆∞ m·ª•c x·ª≠ l√Ω folder n·∫øu c√≥
    for (const folderPath of processingFolders) {
      if (fs.existsSync(folderPath)) {
        try {
          cleanupTempFiles(folderPath);
        } catch (cleanupError) {
          // B·ªè qua l·ªói cleanup
        }
      }
    }
    
    // Log chi ti·∫øt l·ªói ƒë·ªÉ debug
    console.error(`*** CHI TI·∫æT L·ªñI X·ª¨ L√ù FILE ***`);
    console.error(`- Message: ${error.message}`);
    console.error(`- Stack: ${error.stack}`);
    if (error.cause) {
      console.error(`- Cause: ${JSON.stringify(error.cause)}`);
    }
    console.error(`********************************`);
    
    // D·ªçn d·∫πp b·ªô nh·ªõ tr∆∞·ªõc khi tr·∫£ v·ªÅ l·ªói
    forceGarbageCollection();
    
    return NextResponse.json(
      { 
        success: false,
        error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω: ${error.message}`,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  } finally {
    // Force GC m·ªôt l·∫ßn n·ªØa tr∆∞·ªõc khi k·∫øt th√∫c API call
    memoryMonitor.logMemoryStats('K·∫øt th√∫c API');
    forceGarbageCollection();
  }
}

// H√†m x·ª≠ l√Ω m·ªôt file ƒë∆°n l·∫ª (PDF ho·∫∑c ·∫£nh)
async function handleDriveFile(driveLink, backgroundImage, backgroundOpacity, courseName, courseId, performanceConfig = DEFAULT_CONFIG) {
  let tempDir = null;
  let processedFilePath = null;
  let fileName = null;
  
  try {
    // Tr√≠ch xu·∫•t ID t√†i nguy√™n t·ª´ link
    let fileId;
    if (driveLink.includes('drive.google.com')) {
      try {
        const result = extractGoogleDriveFileId(driveLink);
        fileId = result.fileId;
      } catch (error) {
        console.error(`L·ªói tr√≠ch xu·∫•t ID: ${error.message}`);
        throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID t·ª´ link Google Drive: ${error.message}`);
      }
    } else {
      fileId = driveLink;
    }
    
    // L·∫•y th√¥ng tin c∆° b·∫£n v·ªÅ file tr∆∞·ªõc khi t·∫£i
    const downloadToken = getTokenByType('download');
    if (!downloadToken) {
      console.error('Token Google Drive kh√¥ng t√¨m th·∫•y');
      throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive.');
    }
    
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    
    oauth2Client.setCredentials(downloadToken);
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    
    // L·∫•y metadata c·ªßa file
    let fileMetadata;
    try {
      fileMetadata = await drive.files.get({
        fileId: fileId,
        supportsAllDrives: true,
        includeItemsFromAllDrives: true,
        fields: 'name,mimeType,size'
      });
    } catch (metadataError) {
      console.error(`L·ªói l·∫•y metadata: ${metadataError.message}`);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin file: ${metadataError.message}`);
    }
    
    fileName = fileMetadata.data.name;
    const mimeType = fileMetadata.data.mimeType;
    console.log(`ƒê√£ l·∫•y th√¥ng tin file: ${fileName} (${mimeType})`);
    
    // Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
    console.log(`Ki·ªÉm tra tr∆∞·ªõc xem file "${fileName}" ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a...`);
    
    try {
      // L·∫•y token upload
      const uploadToken = getTokenByType('upload');
      if (!uploadToken) {
        console.error('Token upload kh√¥ng t√¨m th·∫•y');
        throw new Error('Kh√¥ng t√¨m th·∫•y token t·∫£i l√™n Google Drive.');
      }
      
      const uploadOAuth2Client = new google.auth.OAuth2(
        process.env.GOOGLE_CLIENT_ID,
        process.env.GOOGLE_CLIENT_SECRET,
        process.env.GOOGLE_REDIRECT_URI
      );
      
      uploadOAuth2Client.setCredentials(uploadToken);
      const uploadDrive = google.drive({ version: 'v3', auth: uploadOAuth2Client });
      
      // T√¨m ho·∫∑c t·∫°o th∆∞ m·ª•c "t√†i li·ªáu kho√° h·ªçc"
      let courseFolderId;
      try {
        // T√¨m ho·∫∑c t·∫°o th∆∞ m·ª•c g·ªëc v√† th∆∞ m·ª•c kh√≥a h·ªçc (n·∫øu c√≥)
        courseFolderId = await findOrCreateCourseFolder(uploadDrive, courseName);
        console.log(`Folder ID ƒë√≠ch: ${courseFolderId}`);
      } catch (folderError) {
        console.error(`L·ªói t√¨m/t·∫°o th∆∞ m·ª•c ƒë√≠ch: ${folderError.message}`);
        throw new Error(`Kh√¥ng th·ªÉ t√¨m ho·∫∑c t·∫°o th∆∞ m·ª•c ƒë√≠ch: ${folderError.message}`);
      }
      
      // Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
      try {
        const escapedFileName = escapeDriveQueryString(fileName);
        const searchQuery = `name='${escapedFileName}' and '${courseFolderId}' in parents and trashed=false`;
        const existingFileResponse = await uploadDrive.files.list({
          q: searchQuery,
          fields: 'files(id, name, webViewLink, webContentLink)',
          spaces: 'drive'
        });
        
        // N·∫øu file ƒë√£ t·ªìn t·∫°i, tr·∫£ v·ªÅ th√¥ng tin
        if (existingFileResponse.data.files && existingFileResponse.data.files.length > 0) {
          const existingFile = existingFileResponse.data.files[0];
          console.log(`‚è© File "${fileName}" ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch, b·ªè qua x·ª≠ l√Ω.`);
          
          // N·∫øu c√≥ courseId, c·∫≠p nh·∫≠t th√¥ng tin file v√†o DB
          const processedFileData = {
            success: true,
            message: `File "${fileName}" ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn x·ª≠ l√Ω l·∫°i.`,
            originalFilename: fileName,
            processedFilename: existingFile.name,
            viewLink: existingFile.webViewLink,
            downloadLink: existingFile.webContentLink || existingFile.webViewLink,
            skipped: true,
            reason: 'File ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch'
          };
          
          try {
            if (courseId) {
              // Chu·∫©n b·ªã courseId
              let dbCourseId;
              try {
                dbCourseId = new ObjectId(courseId);
              } catch (idError) {
                console.error(`CourseId kh√¥ng h·ª£p l·ªá: ${courseId}`);
                // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi ID kh√¥ng h·ª£p l·ªá
              }
              
              if (dbCourseId) {
                console.log(`C·∫≠p nh·∫≠t file ƒë√£ t·ªìn t·∫°i v√†o DB cho courseId: ${courseId}`);
                
                // K·∫øt n·ªëi MongoDB
                const mongoClient = await getMongoClient();
                
                // C·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o DB
                await updateProcessedFileInDB(
                  mongoClient,
                  dbCourseId,
                  driveLink,
                  processedFileData
                );
              }
            }
          } catch (dbError) {
            console.error(`L·ªói khi c·∫≠p nh·∫≠t DB: ${dbError.message}`);
            // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi c√≥ l·ªói DB
          }
          
          return NextResponse.json(processedFileData, { status: 200 });
        }
      } catch (checkError) {
        // Log l·ªói nh∆∞ng v·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω - kh√¥ng throw error
        console.error(`L·ªói ki·ªÉm tra file t·ªìn t·∫°i: ${checkError.message}`, checkError.stack);
        console.log(`Ti·∫øp t·ª•c x·ª≠ l√Ω file d√π c√≥ l·ªói ki·ªÉm tra t·ªìn t·∫°i`);
      }
    } catch (existCheckError) {
      // Log l·ªói nh∆∞ng v·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω file - kh√¥ng d·ª´ng l·∫°i
      console.error(`L·ªói ki·ªÉm tra t·ªìn t·∫°i: ${existCheckError.message}`, existCheckError.stack);
      console.log(`B·ªè qua ki·ªÉm tra file t·ªìn t·∫°i, ti·∫øp t·ª•c x·ª≠ l√Ω file`);
    }
    
    console.log(`File "${fileName}" ch∆∞a t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ ki·ªÉm tra, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...`);
    
    // T·∫£i file t·ª´ Drive (h·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng)
    let downloadResult;
    try {
      downloadResult = await downloadFileFromDrive(fileId);
      tempDir = downloadResult.outputDir;
    } catch (downloadError) {
      console.log(`‚ö†Ô∏è L·ªói t·∫£i file t·ª´ Drive API: ${downloadError.message}`);
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói li√™n quan ƒë·∫øn "Docs Editors files" ho·∫∑c "cannot be downloaded"
      if (downloadError.message.includes('Only files with binary content can be downloaded') ||
          downloadError.message.includes('Docs Editors files')) {
        // C√≥ th·ªÉ l√† th∆∞ m·ª•c ho·∫∑c t√†i li·ªáu Google Docs, ki·ªÉm tra lo·∫°i
        try {
          // Tr√≠ch xu·∫•t fileId t·ª´ driveLink
          let fileId;
          if (driveLink.includes('drive.google.com')) {
            try {
              const result = extractGoogleDriveFileId(driveLink);
              fileId = result.fileId;
            } catch (error) {
              throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID t·ª´ link Google Drive: ${error.message}`);
            }
          } else {
            fileId = driveLink;
          }
          
          const downloadToken = getTokenByType('download');
          if (!downloadToken) {
            throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive.');
          }
          
          const oauth2Client = new google.auth.OAuth2(
            process.env.GOOGLE_CLIENT_ID,
            process.env.GOOGLE_CLIENT_SECRET,
            process.env.GOOGLE_REDIRECT_URI
          );
          
          oauth2Client.setCredentials(downloadToken);
          const drive = google.drive({ version: 'v3', auth: oauth2Client });
          
          // L·∫•y metadata c·ªßa file
          const fileMetadata = await drive.files.get({
            fileId: fileId,
            supportsAllDrives: true,
            includeItemsFromAllDrives: true,
            fields: 'name,mimeType,size'
          });
          
          const mimeType = fileMetadata.data.mimeType;
          
          // Ki·ªÉm tra n·∫øu l√† th∆∞ m·ª•c
          if (mimeType === 'application/vnd.google-apps.folder') {
            console.log(`üîç ƒê√£ ph√°t hi·ªán link l√† th∆∞ m·ª•c, chuy·ªÉn h∆∞·ªõng x·ª≠ l√Ω...`);
            
            // G·ªçi h√†m x·ª≠ l√Ω th∆∞ m·ª•c
            return await handleDriveFolder(
              driveLink, 
              backgroundImage, 
              backgroundOpacity, 
              courseName, 
              courseId,
              skipWatermarkRemoval,
              processRecursively === true, // X·ª≠ l√Ω ƒë·ªá quy n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
              maxRecursionDepth || 5 // ƒê·ªô s√¢u ƒë·ªá quy m·∫∑c ƒë·ªãnh l√† 5
            );
          } else if (mimeType.startsWith('image/')) {
            console.log(`üñºÔ∏è ƒê√£ ph√°t hi·ªán link l√† ·∫£nh (${mimeType}), ƒë∆∞·ª£c ph√©p x·ª≠ l√Ω...`);
            // Cho ph√©p ti·∫øp t·ª•c x·ª≠ l√Ω n·∫øu l√† ·∫£nh
            throw new Error(`Kh√¥ng th·ªÉ t·∫£i ·∫£nh tr·ª±c ti·∫øp. S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p thay th·∫ø.`);
          } else {
            throw new Error(`ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${mimeType}. Ch·ªâ h·ªó tr·ª£ file PDF v√† ·∫£nh.`);
          }
        } catch (typeCheckError) {
          if (typeCheckError.message.includes('th∆∞ m·ª•c') || typeCheckError.message.includes('folder')) {
            throw typeCheckError;
          } else {
            throw new Error(`Kh√¥ng th·ªÉ ki·ªÉm tra lo·∫°i n·ªôi dung: ${typeCheckError.message}`);
          }
        }
      } else if (downloadError.message.includes('cannot be downloaded') || 
          downloadError.message.includes('cannotDownloadFile') ||
          downloadError.message.includes('403')) {
        console.log(`üîÑ Th·ª≠ t·∫£i file b·∫±ng ph∆∞∆°ng ph√°p ch·ª•p PDF...`);
        
        // Tr√≠ch xu·∫•t fileId t·ª´ driveLink
        let fileId;
        if (driveLink.includes('drive.google.com')) {
          try {
            const result = extractGoogleDriveFileId(driveLink);
            fileId = result.fileId;
          } catch (error) {
            throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID t·ª´ link Google Drive: ${error.message}`);
          }
        } else {
          fileId = driveLink;
        }
        
        // T·∫°o th∆∞ m·ª•c t·∫°m
        const tempDirName = uuidv4();
        tempDir = path.join(os.tmpdir(), tempDirName);
        fs.mkdirSync(tempDir, { recursive: true });
        
        // L·∫•y th√¥ng tin file ƒë·ªÉ bi·∫øt t√™n
        try {
          const downloadToken = getTokenByType('download');
          if (!downloadToken) {
            throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive.');
          }
          
          const oauth2Client = new google.auth.OAuth2(
            process.env.GOOGLE_CLIENT_ID,
            process.env.GOOGLE_CLIENT_SECRET,
            process.env.GOOGLE_REDIRECT_URI
          );
          
          oauth2Client.setCredentials(downloadToken);
          const drive = google.drive({ version: 'v3', auth: oauth2Client });
          
          // L·∫•y metadata c·ªßa file
          const fileMetadata = await drive.files.get({
            fileId: fileId,
            supportsAllDrives: true,
            includeItemsFromAllDrives: true,
            fields: 'name,mimeType,size'
          });
          
          const fileName = fileMetadata.data.name;
          const mimeType = fileMetadata.data.mimeType;
          
          // Ki·ªÉm tra n·∫øu l√† th∆∞ m·ª•c
          if (mimeType === 'application/vnd.google-apps.folder') {
            throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω th∆∞ m·ª•c. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng x·ª≠ l√Ω th∆∞ m·ª•c thay v√¨ x·ª≠ l√Ω file ƒë∆°n l·∫ª.`);
          }
          
          // Ki·ªÉm tra n·∫øu l√† PDF th√¨ d√πng gi·∫£i ph√°p t·∫£i file b·ªã ch·∫∑n
          if (mimeType === 'application/pdf' || fileName.toLowerCase().endsWith('.pdf')) {
            console.log(`üìë S·ª≠ d·ª•ng gi·∫£i ph√°p x·ª≠ l√Ω file PDF...`);
            
            // T·∫°o config cho x·ª≠ l√Ω watermark
            const watermarkConfig = { ...DEFAULT_CONFIG };
            
            // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
            if (backgroundImage) {
              let backgroundImagePath = backgroundImage;
              
              if (!path.isAbsolute(backgroundImage) && 
                  !backgroundImage.includes(':/') && 
                  !backgroundImage.includes(':\\')) {
                backgroundImagePath = path.join(process.cwd(), backgroundImage);
              }
              
              const fileExists = fs.existsSync(backgroundImagePath);
              
              if (fileExists) {
                watermarkConfig.backgroundImage = backgroundImagePath;
                
                if (backgroundOpacity !== undefined) {
                  watermarkConfig.backgroundOpacity = parseFloat(backgroundOpacity);
                }
              }
            }
            
            // S·ª≠ d·ª•ng h√†m processPDF m·ªõi v·ªõi flag isBlocked=true
            const outputPath = path.join(tempDir, `${path.basename(fileName, '.pdf')}_clean.pdf`);
            // Kh√¥ng c·∫ßn truy·ªÅn downloadResult.filePath v√¨ file b·ªã ch·∫∑n kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o
            const processResult = await processPDF(null, outputPath, watermarkConfig, true, fileId);
            
            if (processResult.success) {
              downloadResult = {
                success: true,
                filePath: processResult.filePath,
                fileName: fileName,
                contentType: 'application/pdf',
                outputDir: tempDir,
                size: fs.statSync(processResult.filePath).size,
                isImage: false,
                isPdf: true,
                originalSize: processResult.originalSize || 0,
                processedSize: processResult.processedSize || fs.statSync(processResult.filePath).size,
                processingTime: processResult.processingTime || 0,
                alreadyProcessed: true // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω watermark
              };
            } else {
              throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF: ${processResult.error}`);
            }
          } else if (mimeType.startsWith('image/')) {
            // V·ªõi file ·∫£nh, ch√∫ng ta s·∫Ω x·ª≠ l√Ω nh∆∞ m·ªôt file b√¨nh th∆∞·ªùng
            console.log(`üñºÔ∏è File ·∫£nh: ${fileName} (${mimeType}) - ƒê∆∞·ª£c ph√©p x·ª≠ l√Ω`);
            
            // Ch√∫ng ta c√≥ th·ªÉ ti·∫øp t·ª•c v·ªõi th√¥ng tin ƒë√£ c√≥ t·ª´ metadata
            // v√† t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng downloadResult ·∫£o
            const imageFileName = `temp_${uuidv4()}${path.extname(fileName)}`;
            const imagePath = path.join(tempDir, imageFileName);
            
            // T·∫°o file ·∫£nh gi·∫£ (1x1 pixel) ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c quy tr√¨nh
            // Trong th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ c·∫ßn m·ªôt ph∆∞∆°ng ph√°p kh√°c ƒë·ªÉ l·∫•y ·∫£nh t·ª´ Drive
            const emptyImageContent = Buffer.from('R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7', 'base64'); // GIF 1x1
            fs.writeFileSync(imagePath, emptyImageContent);
            
            const imageFileSize = fs.statSync(imagePath).size;
            
            downloadResult = {
              success: true,
              filePath: imagePath,
              fileName: fileName,
              contentType: mimeType,
              outputDir: tempDir,
              size: imageFileSize,
              isImage: true,
              isPdf: false,
              originalSize: imageFileSize,
              processedSize: imageFileSize,
              processingTime: 0
            };
            
            console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω th√¥ng tin ·∫£nh: ${fileName}`);
          } else {
            // C√°c lo·∫°i file kh√°c - tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n tr·ª±c ti·∫øp
            console.log(`üìÑ File kh√°c: ${fileName} (${mimeType}) - Ti·∫øn h√†nh t·∫£i l√™n tr·ª±c ti·∫øp`);
                        
            // T·∫°o ƒë∆∞·ªùng d·∫´n cho file tr·ªëng ƒë·ªÉ chuy·ªÉn h∆∞·ªõng
            const tempFilePath = path.join(tempDir, `other_${uuidv4()}${path.extname(fileName)}`);
            fs.writeFileSync(tempFilePath, Buffer.from('dummy content'));
            
            downloadResult = {
              success: true,
              filePath: tempFilePath,
              fileName: fileName,
              contentType: mimeType,
              outputDir: tempDir,
              size: fs.statSync(tempFilePath).size,
              isImage: false,
              isPdf: false,
              originalSize: fs.statSync(tempFilePath).size,
              processedSize: fs.statSync(tempFilePath).size,
              processingTime: 0,
              directUpload: true
            };
            
            console.log(`‚úÖ ƒê√£ chu·∫©n b·ªã upload tr·ª±c ti·∫øp: ${fileName}`);
          }
        } catch (unblockError) {
          throw new Error(`Kh√¥ng th·ªÉ t·∫£i file b·ªã ch·∫∑n: ${unblockError.message}`);
        }
      } else {
      return NextResponse.json(
        { error: `Kh√¥ng th·ªÉ t·∫£i file t·ª´ Google Drive: ${downloadError.message}` },
        { status: 500 }
      );
    }
    }
    
    // Ki·ªÉm tra lo·∫°i file
    if (downloadResult.isPdf) {
      // X·ª≠ l√Ω n·∫øu l√† PDF
    let cleanResult;
      
      // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
      if (downloadResult.alreadyProcessed) {
        console.log(`‚úÖ File PDF ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark trong qu√° tr√¨nh t·∫£i xu·ªëng, b·ªè qua b∆∞·ªõc x·ª≠ l√Ω watermark`);
        cleanResult = {
          success: true,
          filePath: downloadResult.filePath,
          originalSize: downloadResult.originalSize,
          processedSize: downloadResult.processedSize,
          processingTime: downloadResult.processingTime
        };
        processedFilePath = downloadResult.filePath;
      } else {
    try {
      const outputPath = path.join(tempDir, `${path.basename(downloadResult.fileName, '.pdf')}.pdf`);
      
      // T·∫°o config v·ªõi tham s·ªë t·ª´ request
      const config = { ...DEFAULT_CONFIG };
      
      // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
      if (backgroundImage) {
        // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n h√¨nh n·ªÅn ƒë·ªÉ l√†m cho n√≥ di ƒë·ªông
        let backgroundImagePath = backgroundImage;
        
        // N·∫øu kh√¥ng ph·∫£i ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi, coi nh∆∞ n√≥ l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ th∆∞ m·ª•c g·ªëc
        if (!path.isAbsolute(backgroundImage) && 
            !backgroundImage.includes(':/') && 
            !backgroundImage.includes(':\\')) {
          backgroundImagePath = path.join(process.cwd(), backgroundImage);
        }
        
        // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        const fileExists = fs.existsSync(backgroundImagePath);
        
        if (fileExists) {
          config.backgroundImage = backgroundImagePath;
          
          if (backgroundOpacity !== undefined) {
            config.backgroundOpacity = parseFloat(backgroundOpacity);
          }
        }
      }
      
          // X·ª≠ l√Ω PDF ƒë·ªÉ x√≥a watermark
          console.log(`B·∫Øt ƒë·∫ßu x√≥a watermark cho file: ${downloadResult.fileName}`);
          
          // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
          if (downloadResult.alreadyProcessed) {
            console.log(`‚úÖ File PDF ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark trong qu√° tr√¨nh t·∫£i xu·ªëng, b·ªè qua b∆∞·ªõc x·ª≠ l√Ω watermark l·∫ßn hai`);
            
            // Ch·ªâ c·∫ßn copy file ƒë√£ x·ª≠ l√Ω
            fs.copyFileSync(downloadResult.filePath, outputPath);
            
            cleanResult = {
              success: true,
              filePath: outputPath,
              originalSize: downloadResult.originalSize, 
              processedSize: downloadResult.processedSize,
              processingTime: downloadResult.processingTime
            };
            console.log(`‚úÖ ƒê√£ sao ch√©p file ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: ${downloadResult.fileName}`);
          } else {
            // Th·ª±c hi·ªán x·ª≠ l√Ω watermark n·∫øu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
      cleanResult = await cleanPdf(downloadResult.filePath, outputPath, config);
            console.log(`ƒê√£ x√≥a watermark xong cho file: ${downloadResult.fileName}`);
          }
          
      processedFilePath = outputPath;
    } catch (cleanError) {
      // Clean up temp files
      if (tempDir && fs.existsSync(tempDir)) {
        cleanupTempFiles(tempDir);
      }
      
      return NextResponse.json(
        { error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω PDF: ${cleanError.message}` },
        { status: 500 }
      );
        }
    }
    
    // Upload processed file back to Drive
    let uploadResult;
    try {
      uploadResult = await uploadToDrive(processedFilePath, downloadResult.fileName, 'application/pdf', courseName);
    } catch (uploadError) {
      // Clean up temp files
      if (tempDir && fs.existsSync(tempDir)) {
        cleanupTempFiles(tempDir);
      }
      
      return NextResponse.json(
        { error: `Kh√¥ng th·ªÉ t·∫£i file l√™n Google Drive: ${uploadError.message}` },
        { status: 500 }
      );
    }
    
    // Clean up temp files
    try {
      cleanupTempFiles(tempDir);
      tempDir = null;
    } catch (cleanupError) {
      // Handle cleanup error
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu tr·∫£ v·ªÅ
    const responseData = {
      success: true,
      message: 'ƒê√£ x·ª≠ l√Ω x√≥a watermark th√†nh c√¥ng.',
      originalFilename: downloadResult.fileName,
      processedFilename: uploadResult.fileName,
      viewLink: uploadResult.webViewLink,
      downloadLink: uploadResult.downloadLink,
      processingDetails: {
        originalSize: cleanResult.originalSize,
        processedSize: cleanResult.processedSize,
        processingTime: cleanResult.processingTime + ' gi√¢y'
      }
    };
    
    // N·∫øu c√≥ courseId, c·∫≠p nh·∫≠t th√¥ng tin file v√†o DB
    try {
      if (courseId) {
        // Chu·∫©n b·ªã courseId
        let dbCourseId;
        try {
          dbCourseId = new ObjectId(courseId);
        } catch (idError) {
          console.error(`CourseId kh√¥ng h·ª£p l·ªá: ${courseId}`);
          // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi ID kh√¥ng h·ª£p l·ªá
        }
        
        if (dbCourseId) {
          console.log(`C·∫≠p nh·∫≠t file ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng v√†o DB cho courseId: ${courseId}`);
          
          // K·∫øt n·ªëi MongoDB
          const mongoClient = await getMongoClient();
          
          // C·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o DB
          await updateProcessedFileInDB(
            mongoClient,
            dbCourseId,
            driveLink,
            responseData
          );
        }
      }
    } catch (dbError) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t DB: ${dbError.message}`);
      // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi c√≥ l·ªói DB
    }
    
    // Return success response with link to processed file
    return NextResponse.json(responseData, { status: 200 });
      
    } else if (downloadResult.isImage) {
      // N·∫øu l√† ·∫£nh, x·ª≠ l√Ω ƒë·ªÉ lo·∫°i b·ªè watermark
      console.log(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω watermark cho ·∫£nh: ${downloadResult.fileName}`);
      
      // T·∫°o ƒë∆∞·ªùng d·∫´n output
      const outputPath = path.join(tempDir, `processed_${path.basename(downloadResult.fileName)}`);
      
      // T·∫°o config cho x·ª≠ l√Ω ·∫£nh
      const config = { ...DEFAULT_CONFIG };
      
      // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
      if (backgroundImage) {
        let backgroundImagePath = backgroundImage;
        
        if (!path.isAbsolute(backgroundImage) && 
            !backgroundImage.includes(':/') && 
            !backgroundImage.includes(':\\')) {
          backgroundImagePath = path.join(process.cwd(), backgroundImage);
        }
        
        // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        const fileExists = fs.existsSync(backgroundImagePath);
        
        if (fileExists) {
          config.backgroundImage = backgroundImagePath;
          
          if (backgroundOpacity !== undefined) {
            config.backgroundOpacity = parseFloat(backgroundOpacity);
          }
        }
      }
      
      // X·ª≠ l√Ω ·∫£nh ƒë·ªÉ x√≥a watermark
      console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω watermark cho ·∫£nh...`);
      console.log(`üîç ƒêang ph√¢n t√≠ch th√¥ng tin ·∫£nh...`);
      
      const startTime = Date.now();
      let cleanResult;
      let processedImagePath = downloadResult.filePath;
      let fallbackToOriginal = false;
      
      try {
        if (!sharp) {
          console.warn("Sharp kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông. S·ª≠ d·ª•ng ·∫£nh g·ªëc.");
          throw new Error("Sharp kh√¥ng kh·∫£ d·ª•ng");
        }
        
        try {
          await processImage(downloadResult.filePath, outputPath, config);
          
          if (!fs.existsSync(outputPath)) {
            console.error(`·∫¢nh ƒë·∫ßu ra kh√¥ng ƒë∆∞·ª£c t·∫°o: ${outputPath}`);
            throw new Error("·∫¢nh ƒë·∫ßu ra kh√¥ng t·ªìn t·∫°i sau khi x·ª≠ l√Ω");
          }
          
          const originalSize = fs.statSync(downloadResult.filePath).size;
          const processedSize = fs.statSync(outputPath).size;
          const processingTime = ((Date.now() - startTime) / 1000).toFixed(2);
          
          console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω watermark xong cho ·∫£nh: ${downloadResult.fileName} trong ${processingTime} gi√¢y`);
          
          cleanResult = {
            success: true,
            filePath: outputPath,
            originalSize: (originalSize / (1024 * 1024)).toFixed(2),
            processedSize: (processedSize / (1024 * 1024)).toFixed(2),
            processingTime
          };
          
          processedImagePath = outputPath;
        } catch (processError) {
          console.error(`*** CHI TI·∫æT L·ªñI X·ª¨ L√ù ·∫¢NH ${downloadResult.fileName} ***`);
          console.error(`- Message: ${processError.message}`);
          console.error(`- Stack: ${processError.stack}`);
          if (processError.cause) {
            console.error(`- Cause: ${JSON.stringify(processError.cause)}`);
          }
          console.error(`********************************`);
          
          // N·∫øu x·ª≠ l√Ω l·ªói, s·ª≠ d·ª•ng ·∫£nh g·ªëc
          console.log(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω watermark cho ·∫£nh. S·ª≠ d·ª•ng ·∫£nh g·ªëc: ${downloadResult.fileName}`);
          fs.copyFileSync(downloadResult.filePath, outputPath);
          
          const originalSize = fs.statSync(downloadResult.filePath).size;
          
          cleanResult = {
            success: false,
            filePath: outputPath,
            originalSize: (originalSize / (1024 * 1024)).toFixed(2),
            processedSize: (originalSize / (1024 * 1024)).toFixed(2),
            processingTime: '0',
            error: processError.message
          };
          
          fallbackToOriginal = true;
          processedImagePath = outputPath;
        }
      } catch (outerError) {
        console.error(`*** L·ªñI NGHI√äM TR·ªåNG KHI X·ª¨ L√ù ·∫¢NH ***`);
        console.error(`- Message: ${outerError.message}`);
        console.error(`- Stack: ${outerError.stack}`);
        console.error(`********************************`);
        
        // N·∫øu c√≥ l·ªói ·ªü m·ª©c cao nh·∫•t, v·∫´n s·ª≠ d·ª•ng file g·ªëc
        processedImagePath = downloadResult.filePath;
        const originalSize = fs.statSync(downloadResult.filePath).size;
        
        cleanResult = {
          success: false,
          filePath: downloadResult.filePath,
          originalSize: (originalSize / (1024 * 1024)).toFixed(2),
          processedSize: (originalSize / (1024 * 1024)).toFixed(2),
          processingTime: '0',
          error: outerError.message
        };
        
        fallbackToOriginal = true;
      }
      
      // Upload ·∫£nh ƒë√£ x·ª≠ l√Ω l√™n Drive
      let uploadResult;
      try {
        uploadResult = await uploadToDrive(processedImagePath, downloadResult.fileName, downloadResult.contentType, courseName);
      } catch (uploadError) {
        // Clean up temp files
        if (tempDir && fs.existsSync(tempDir)) {
          cleanupTempFiles(tempDir);
        }
        
        return NextResponse.json(
          { error: `Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n Google Drive: ${uploadError.message}` },
          { status: 500 }
        );
      }
      
      // Clean up temp files
      try {
        cleanupTempFiles(tempDir);
        tempDir = null;
      } catch (cleanupError) {
        // Handle cleanup error
      }
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu tr·∫£ v·ªÅ
      const responseData = {
        success: true,
        message: fallbackToOriginal 
          ? 'G·∫∑p l·ªói khi x·ª≠ l√Ω ·∫£nh. ƒê√£ t·∫£i ·∫£nh g·ªëc l√™n Google Drive.'
          : 'ƒê√£ x·ª≠ l√Ω v√† t·∫£i ·∫£nh l√™n Google Drive th√†nh c√¥ng.',
        originalFilename: downloadResult.fileName,
        processedFilename: uploadResult.fileName,
        viewLink: uploadResult.webViewLink,
        downloadLink: uploadResult.downloadLink,
        processingDetails: {
          originalSize: cleanResult.originalSize,
          processedSize: cleanResult.processedSize,
          processingTime: cleanResult.processingTime + ' gi√¢y',
          fallbackToOriginal: fallbackToOriginal,
          error: cleanResult.error
        }
      };
      
      // N·∫øu c√≥ courseId, c·∫≠p nh·∫≠t th√¥ng tin file v√†o DB
      try {
        if (courseId) {
          // Chu·∫©n b·ªã courseId
          let dbCourseId;
          try {
            dbCourseId = new ObjectId(courseId);
          } catch (idError) {
            console.error(`CourseId kh√¥ng h·ª£p l·ªá: ${courseId}`);
            // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi ID kh√¥ng h·ª£p l·ªá
          }
          
          if (dbCourseId) {
            console.log(`C·∫≠p nh·∫≠t th√¥ng tin ·∫£nh ƒë√£ x·ª≠ l√Ω v√†o DB cho courseId: ${courseId}`);
            
            // K·∫øt n·ªëi MongoDB
            const mongoClient = await getMongoClient();
            
            // C·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o DB
            await updateProcessedFileInDB(
              mongoClient,
              dbCourseId,
              driveLink,
              responseData
            );
          }
        }
      } catch (dbError) {
        console.error(`L·ªói khi c·∫≠p nh·∫≠t DB: ${dbError.message}`);
        // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi c√≥ l·ªói DB
      }
      
      // Return success response with link to uploaded image
      return NextResponse.json(responseData, { status: 200 });
      
    } else {
      // C√°c lo·∫°i file kh√°c - x·ª≠ l√Ω t·∫•t c·∫£ c√°c lo·∫°i file c√≤n l·∫°i
      console.log(`ƒêang x·ª≠ l√Ω file kh√°c (kh√¥ng ph·∫£i PDF/·∫£nh): ${downloadResult.fileName} (${downloadResult.contentType})`);
      
      // Upload tr·ª±c ti·∫øp file g·ªëc l√™n Drive kh√¥ng c·∫ßn ch·ªânh s·ª≠a
      let uploadResult;
      try {
        uploadResult = await uploadToDrive(downloadResult.filePath, downloadResult.fileName, downloadResult.contentType, courseName);
      } catch (uploadError) {
        // Clean up temp files
        if (tempDir && fs.existsSync(tempDir)) {
          cleanupTempFiles(tempDir);
        }
        
        return NextResponse.json(
          { error: `Kh√¥ng th·ªÉ t·∫£i file l√™n Google Drive: ${uploadError.message}` },
          { status: 500 }
        );
      }
      
      // Clean up temp files
      try {
        cleanupTempFiles(tempDir);
        tempDir = null;
      } catch (cleanupError) {
        // Handle cleanup error
      }
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu tr·∫£ v·ªÅ
      const responseData = {
        success: true,
        message: `ƒê√£ t·∫£i file l√™n Google Drive th√†nh c√¥ng.`,
        originalFilename: downloadResult.fileName,
        processedFilename: uploadResult.fileName,
        viewLink: uploadResult.webViewLink,
        downloadLink: uploadResult.downloadLink,
        fileType: downloadResult.contentType,
        size: downloadResult.size,
        directUpload: true
      };
      
      // N·∫øu c√≥ courseId, c·∫≠p nh·∫≠t th√¥ng tin file v√†o DB
      try {
        if (courseId) {
          // Chu·∫©n b·ªã courseId
          let dbCourseId;
          try {
            dbCourseId = new ObjectId(courseId);
          } catch (idError) {
            console.error(`CourseId kh√¥ng h·ª£p l·ªá: ${courseId}`);
            // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi ID kh√¥ng h·ª£p l·ªá
          }
          
          if (dbCourseId) {
            console.log(`C·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o DB cho courseId: ${courseId}`);
            
            // K·∫øt n·ªëi MongoDB
            const mongoClient = await getMongoClient();
            
            // C·∫≠p nh·∫≠t th√¥ng tin file ƒë√£ x·ª≠ l√Ω v√†o DB
            await updateProcessedFileInDB(
              mongoClient,
              dbCourseId,
              driveLink,
              responseData
            );
          }
        }
      } catch (dbError) {
        console.error(`L·ªói khi c·∫≠p nh·∫≠t DB: ${dbError.message}`);
        // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi c√≥ l·ªói DB
      }
      
      // Return success response
      return NextResponse.json(responseData, { status: 200 });
    }
    
  } catch (error) {
    // Clean up temp files
    if (tempDir && fs.existsSync(tempDir)) {
      try {
        cleanupTempFiles(tempDir);
      } catch (cleanupError) {
        console.error(`L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
      }
    }
    
    // Log chi ti·∫øt l·ªói ƒë·ªÉ debug
    console.error(`*** CHI TI·∫æT L·ªñI X·ª¨ L√ù FILE ***`);
    console.error(`- Message: ${error.message}`);
    console.error(`- Stack: ${error.stack}`);
    if (error.cause) {
      console.error(`- Cause: ${JSON.stringify(error.cause)}`);
    }
    console.error(`********************************`);
    
    // D·ªçn d·∫πp b·ªô nh·ªõ tr∆∞·ªõc khi tr·∫£ v·ªÅ l·ªói
    forceGarbageCollection();
    
    return NextResponse.json(
      { 
        success: false,
        error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω file: ${error.message}`,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}

// H√†m x·ª≠ l√Ω folder t·ª´ Google Drive
async function handleDriveFolder(driveFolderLink, backgroundImage, backgroundOpacity, courseName, courseId, skipWatermarkRemoval = false, processRecursively = false, maxRecursionDepth = 5) {
  let folderResults = [];
  let processingFolders = [];
  let destinationFolderId = null;
  let dbCourseId = null;
  let mongoClient = null;
  
  // Chu·∫©n b·ªã k·∫øt n·ªëi MongoDB v√† courseId n·∫øu c√≥
  try {
    if (courseId) {
      try {
        dbCourseId = new ObjectId(courseId);
        mongoClient = await getMongoClient();
        console.log(`S·∫Ω c·∫≠p nh·∫≠t DB cho courseId: ${courseId} sau khi x·ª≠ l√Ω folder`);
      } catch (idError) {
        console.error(`CourseId kh√¥ng h·ª£p l·ªá: ${courseId}`);
        // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi ID kh√¥ng h·ª£p l·ªá
        dbCourseId = null;
      }
    }
  } catch (dbConnectError) {
    console.error(`L·ªói k·∫øt n·ªëi DB: ${dbConnectError.message}`);
    // V·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω folder ngay c·∫£ khi k·∫øt n·ªëi DB th·∫•t b·∫°i
  }

  try {
    // X·ª≠ l√Ω ƒë·ªá quy n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (processRecursively) {
      console.log(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·ªá quy folder v·ªõi ƒë·ªô s√¢u t·ªëi ƒëa ${maxRecursionDepth}...`);
      
      const recursiveResult = await processRecursiveFolder(
        driveFolderLink, 
        maxRecursionDepth, 
        0, // currentDepth ban ƒë·∫ßu l√† 0
        backgroundImage,
        backgroundOpacity,
        courseName,
        skipWatermarkRemoval,
        mongoClient // Truy·ªÅn k·∫øt n·ªëi MongoDB ƒë√£ t·ªìn t·∫°i v√†o h√†m x·ª≠ l√Ω ƒë·ªá quy
      );
      
      if (!recursiveResult.success) {
        return NextResponse.json({
          success: false,
          message: `L·ªói khi x·ª≠ l√Ω ƒë·ªá quy folder: ${recursiveResult.error}`,
        }, { status: 500 });
      }
      
      console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω ƒë·ªá quy th√†nh c√¥ng: ${recursiveResult.nestedFilesProcessed} file v√† ${recursiveResult.nestedFoldersProcessed} th∆∞ m·ª•c con`);
      
      // Tr·∫£ v·ªÅ k·∫øt qu·∫£ x·ª≠ l√Ω ƒë·ªá quy
      return NextResponse.json({
        success: true,
        message: `ƒê√£ x·ª≠ l√Ω ƒë·ªá quy folder th√†nh c√¥ng`,
        folderLink: recursiveResult.processedFolderLink,
        folderName: recursiveResult.folderName,
        nestedFilesProcessed: recursiveResult.nestedFilesProcessed,
        nestedFoldersProcessed: recursiveResult.nestedFoldersProcessed,
        folderStats: {
          totalFiles: recursiveResult.nestedFilesProcessed,
          totalFolders: recursiveResult.nestedFoldersProcessed,
          errors: recursiveResult.errors ? recursiveResult.errors.length : 0
        },
        errors: recursiveResult.errors
      });
    }

    // L·∫•y th√¥ng tin folder v√† danh s√°ch files
    const folderInfo = await processDriveFolder(driveFolderLink);
    
    // Ki·ªÉm tra xem c√≥ file n√†o trong folder kh√¥ng
    if (!folderInfo.files || folderInfo.files.length === 0) {
      return NextResponse.json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y file n√†o trong folder n√†y.',
        folderName: folderInfo.folderName
      }, { status: 400 });
    }
    
    console.log(`ƒê√£ t√¨m th·∫•y ${folderInfo.files.length} file trong folder "${folderInfo.folderName}"`);
    
    // T·∫°o m·ªôt th∆∞ m·ª•c tr√™n Drive ƒë·ªÉ l∆∞u c√°c file ƒë√£ x·ª≠ l√Ω
    console.log(`T·∫°o th∆∞ m·ª•c ƒë√≠ch tr√™n Drive...`);
    
    const destinationFolder = await createDriveFolder(folderInfo.folderName, courseName);
    destinationFolderId = destinationFolder.folderId;
    
    console.log(`ƒê√£ t·∫°o folder ƒë√≠ch: ${destinationFolder.folderName} (ID: ${destinationFolderId})`);
    
    // X·ª≠ l√Ω t·ª´ng file trong folder - l·∫∑p tu·∫ßn t·ª± ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng g·∫∑p l·ªói v·ªõi nhi·ªÅu file
    for (let i = 0; i < folderInfo.files.length; i++) {
      const file = folderInfo.files[i];
      console.log(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file ${i+1}/${folderInfo.files.length}: ${file.name}`);
      
      try {
        // Ki·ªÉm tra tr∆∞·ªõc xem file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
        console.log(`Ki·ªÉm tra tr∆∞·ªõc xem file "${file.name}" ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a...`);
        
        // L·∫•y token upload
        const uploadToken = getTokenByType('upload');
        if (!uploadToken) {
          throw new Error('Kh√¥ng t√¨m th·∫•y token t·∫£i l√™n Google Drive.');
        }
        
        // T·∫°o OAuth2 client
        const oauth2Client = new google.auth.OAuth2(
          process.env.GOOGLE_CLIENT_ID,
          process.env.GOOGLE_CLIENT_SECRET,
          process.env.GOOGLE_REDIRECT_URI
        );
        
        // Thi·∫øt l·∫≠p credentials
        oauth2Client.setCredentials(uploadToken);
        
        // Kh·ªüi t·∫°o Google Drive API
        const drive = google.drive({ version: 'v3', auth: oauth2Client });
        
        // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa file
        const escapedFileName = escapeDriveQueryString(file.name);
        const searchQuery = `name='${escapedFileName}' and '${destinationFolderId}' in parents and trashed=false`;
        const existingFileResponse = await drive.files.list({
          q: searchQuery,
          fields: 'files(id, name, webViewLink, webContentLink)',
          spaces: 'drive'
        });
        
        // N·∫øu file ƒë√£ t·ªìn t·∫°i, b·ªè qua x·ª≠ l√Ω
        if (existingFileResponse.data.files && existingFileResponse.data.files.length > 0) {
          const existingFile = existingFileResponse.data.files[0];
          console.log(`‚è© File "${file.name}" ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch, b·ªè qua x·ª≠ l√Ω.`);
          
          folderResults.push({
            originalFile: file.name,
            processedFile: existingFile.name,
            viewLink: existingFile.webViewLink,
            downloadLink: existingFile.webContentLink,
            fileType: file.mimeType.startsWith('image/') ? 'image' : 'pdf',
            skipped: true,
            reason: 'File ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch'
          });
          
          continue; // B·ªè qua file n√†y, chuy·ªÉn sang file ti·∫øp theo
        }
        
        console.log(`File "${file.name}" ch∆∞a t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...`);
      
        // T·∫°o th∆∞ m·ª•c t·∫°m ri√™ng cho m·ªói file
        const tempDirName = uuidv4();
        const outputDir = path.join(os.tmpdir(), tempDirName);
        fs.mkdirSync(outputDir, { recursive: true });
        processingFolders.push(outputDir);
        
        // T·∫£i file t·ª´ Drive
        console.log(`ƒêang t·∫£i file: ${file.name} (ID: ${file.id})`);
        let downloadResult;
        try {
          downloadResult = await downloadFileFromDrive(file.id);
          console.log(`ƒê√£ t·∫£i xong file: ${file.name}, k√≠ch th∆∞·ªõc: ${downloadResult.size} bytes`);
        } catch (downloadError) {
          console.log(`‚ö†Ô∏è L·ªói t·∫£i file ${file.name}: ${downloadError.message}`);
          
          // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói "cannot be downloaded" kh√¥ng
          if (downloadError.message.includes('cannot be downloaded') || 
              downloadError.message.includes('cannotDownloadFile') ||
              downloadError.message.includes('403')) {
            console.log(`üîÑ Th·ª≠ t·∫£i file ${file.name} b·∫±ng ph∆∞∆°ng ph√°p ch·ª•p PDF...`);
            
            // T·∫°o th∆∞ m·ª•c t·∫°m cho file n√†y
            const tempDirName = uuidv4();
            const fileOutputDir = path.join(os.tmpdir(), tempDirName);
            fs.mkdirSync(fileOutputDir, { recursive: true });
            processingFolders.push(fileOutputDir);
            
            // Ki·ªÉm tra n·∫øu l√† PDF th√¨ d√πng gi·∫£i ph√°p t·∫£i file b·ªã ch·∫∑n
            if (file.mimeType === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {
              console.log(`üìë S·ª≠ d·ª•ng gi·∫£i ph√°p x·ª≠ l√Ω file PDF...`);
              
              // T·∫°o config cho x·ª≠ l√Ω watermark
              const watermarkConfig = { ...DEFAULT_CONFIG };
              
              // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
              if (backgroundImage) {
                let backgroundImagePath = backgroundImage;
                
                if (!path.isAbsolute(backgroundImage) && 
                    !backgroundImage.includes(':/') && 
                    !backgroundImage.includes(':\\')) {
                  backgroundImagePath = path.join(process.cwd(), backgroundImage);
                }
                
                const fileExists = fs.existsSync(backgroundImagePath);
                
                if (fileExists) {
                  watermarkConfig.backgroundImage = backgroundImagePath;
                  
                  if (backgroundOpacity !== undefined) {
                    watermarkConfig.backgroundOpacity = parseFloat(backgroundOpacity);
                  }
                }
              }
              
              // S·ª≠ d·ª•ng h√†m processPDF m·ªõi v·ªõi flag isBlocked=true
              const outputPath = path.join(fileOutputDir, `${path.basename(file.name, '.pdf')}_clean.pdf`);
              // Kh√¥ng c·∫ßn truy·ªÅn downloadResult.filePath v√¨ file b·ªã ch·∫∑n kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o
              const processResult = await processPDF(null, outputPath, watermarkConfig, true, file.id);
              
              if (processResult.success) {
                downloadResult = {
                  success: true,
                  filePath: processResult.filePath,
                  fileName: file.name,
                  contentType: 'application/pdf',
                  outputDir: fileOutputDir,
                  size: fs.statSync(processResult.filePath).size,
                  isImage: false,
                  isPdf: true,
                  originalSize: processResult.originalSize || 0,
                  processedSize: processResult.processedSize || fs.statSync(processResult.filePath).size,
                  processingTime: processResult.processingTime || 0,
                  alreadyProcessed: true // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω watermark
                };
                console.log(`‚úÖ ƒê√£ t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng file ${file.name} b·∫±ng ph∆∞∆°ng ph√°p ch·ª•p PDF`);
              } else {
                throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF: ${processResult.error}`);
              }
            } else if (file.mimeType.startsWith('image/')) {
              // X·ª≠ l√Ω file ·∫£nh b·ªã ch·∫∑n
              console.log(`üñºÔ∏è File ·∫£nh b·ªã ch·∫∑n: ${file.name} (${file.mimeType}) - ƒêang x·ª≠ l√Ω...`);
              
              // T·∫°o file ·∫£nh gi·∫£ ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c quy tr√¨nh
              const imageFileName = `temp_${uuidv4()}${path.extname(file.name)}`;
              const imagePath = path.join(fileOutputDir, imageFileName);
              
              // T·∫°o file ·∫£nh gi·∫£ (1x1 pixel)
              const emptyImageContent = Buffer.from('R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7', 'base64');
              fs.writeFileSync(imagePath, emptyImageContent);
              
              downloadResult = {
                success: true,
                filePath: imagePath,
                fileName: file.name,
                contentType: file.mimeType,
                outputDir: fileOutputDir,
                size: fs.statSync(imagePath).size,
                isImage: true,
                isPdf: false
              };
              
              console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω th√¥ng tin ·∫£nh: ${file.name}`);
            } else if (file.mimeType.includes('google-apps') && file.mimeType !== 'application/vnd.google-apps.folder') {
              // X·ª≠ l√Ω Google Workspace files (Docs, Sheets, Slides...)
              console.log(`üìù Ph√°t hi·ªán file Google Workspace: ${file.name} (${file.mimeType})`);
              
              try {
                // L·∫•y token download
                const downloadToken = getTokenByType('download');
                if (!downloadToken) {
                  throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive.');
                }
                
                // T·∫°o OAuth2 client
                const oauth2Client = new google.auth.OAuth2(
                  process.env.GOOGLE_CLIENT_ID,
                  process.env.GOOGLE_CLIENT_SECRET,
                  process.env.GOOGLE_REDIRECT_URI
                );
                
                // Thi·∫øt l·∫≠p credentials
                oauth2Client.setCredentials(downloadToken);
                
                // Kh·ªüi t·∫°o Google Drive API
                const drive = google.drive({ version: 'v3', auth: oauth2Client });
                
                console.log(`üîÑ Xu·∫•t file Google Workspace sang PDF: ${file.name}`);
                
                // Xu·∫•t file Google Workspace sang PDF
                const exportResponse = await drive.files.export({
                  fileId: file.id,
                  mimeType: 'application/pdf',
                  supportsAllDrives: true
                }, {
                  responseType: 'arraybuffer'
                });
                
                // T·∫°o t√™n file xu·∫•t ra
                const exportFileName = `${file.name}.pdf`;
                
                // L∆∞u file xu·∫•t ra v√†o th∆∞ m·ª•c t·∫°m
                const tempFileName = `${uuidv4()}.pdf`;
                const tempFilePath = path.join(fileOutputDir, tempFileName);
                fs.writeFileSync(tempFilePath, Buffer.from(exportResponse.data));
                
                console.log(`‚úÖ ƒê√£ xu·∫•t th√†nh c√¥ng file ${file.name} sang PDF (${fs.statSync(tempFilePath).size} bytes)`);
                
                // S·ª≠ d·ª•ng file ƒë√£ xu·∫•t m√† kh√¥ng x·ª≠ l√Ω watermark (theo logic c≈©)
                downloadResult = {
                  success: true,
                  filePath: tempFilePath,
                  fileName: exportFileName,
                  contentType: 'application/pdf',
                  outputDir: fileOutputDir,
                  size: fs.statSync(tempFilePath).size,
                  isImage: false,
                  isPdf: true,
                  isGoogleWorkspace: true,
                  skipWatermarkRemoval: true
                };
                console.log(`‚úÖ ƒê√£ xu·∫•t file Google Workspace: ${exportFileName} (Kh√¥ng x·ª≠ l√Ω watermark)`);
              } catch (googleWorkspaceError) {
                console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file Google Workspace ${file.name}:`, googleWorkspaceError);
                throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω file Google Workspace: ${googleWorkspaceError.message}`);
              }
            } else {
              // X·ª≠ l√Ω c√°c lo·∫°i file kh√°c b·ªã ch·∫∑n
              console.log(`üìÑ T·∫°o t·ªáp t·∫°m cho lo·∫°i file b·ªã ch·∫∑n: ${file.name} (${file.mimeType})`);
              
              // T·∫°o t·ªáp r·ªóng ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c quy tr√¨nh
              const tempFileName = `temp_${uuidv4()}${path.extname(file.name) || ''}`;
              const tempFilePath = path.join(fileOutputDir, tempFileName);
              fs.writeFileSync(tempFilePath, Buffer.from([]));
              
              downloadResult = {
                success: true,
                filePath: tempFilePath,
                fileName: file.name,
                contentType: file.mimeType,
                outputDir: fileOutputDir,
                size: fs.statSync(tempFilePath).size,
                isImage: false,
                isPdf: false,
                isOtherFile: true
              };
              
              console.log(`‚úÖ ƒê√£ t·∫°o t·ªáp t·∫°m cho: ${file.name}`);
            }
          } else {
            folderResults.push({
              originalFile: file.name,
              error: downloadError.message
            });
            continue;
          }
        }
        
        // X·ª≠ l√Ω t√πy theo lo·∫°i file
        if (downloadResult.isPdf) {
          console.log(`X·ª≠ l√Ω file PDF: ${file.name}`);
          // X·ª≠ l√Ω PDF
          const outputPath = path.join(outputDir, `${path.basename(downloadResult.fileName, '.pdf')}.pdf`);
          
          // T·∫°o config cho x·ª≠ l√Ω PDF
          const config = { ...DEFAULT_CONFIG };
          
          // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
          if (backgroundImage) {
            let backgroundImagePath = backgroundImage;
            
            if (!path.isAbsolute(backgroundImage) && 
                !backgroundImage.includes(':/') && 
                !backgroundImage.includes(':\\')) {
              backgroundImagePath = path.join(process.cwd(), backgroundImage);
            }
            
            const fileExists = fs.existsSync(backgroundImagePath);
            
            if (fileExists) {
              config.backgroundImage = backgroundImagePath;
              
              if (backgroundOpacity !== undefined) {
                config.backgroundOpacity = parseFloat(backgroundOpacity);
              }
            }
          }
          
          // X·ª≠ l√Ω PDF ƒë·ªÉ x√≥a watermark
          console.log(`B·∫Øt ƒë·∫ßu x√≥a watermark cho file: ${file.name}`);
          
          let cleanResult;
          // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
          if (downloadResult.alreadyProcessed) {
            console.log(`‚úÖ File PDF ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark trong qu√° tr√¨nh t·∫£i xu·ªëng, b·ªè qua b∆∞·ªõc x·ª≠ l√Ω watermark l·∫ßn hai`);
            
            // Ch·ªâ c·∫ßn copy file ƒë√£ x·ª≠ l√Ω
            fs.copyFileSync(downloadResult.filePath, outputPath);
            
            cleanResult = {
              success: true,
              filePath: outputPath,
              originalSize: downloadResult.originalSize, 
              processedSize: downloadResult.processedSize,
              processingTime: downloadResult.processingTime
            };
            console.log(`‚úÖ ƒê√£ sao ch√©p file ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: ${file.name}`);
          } else {
            // Th·ª±c hi·ªán x·ª≠ l√Ω watermark n·∫øu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
      cleanResult = await cleanPdf(downloadResult.filePath, outputPath, config);
            console.log(`ƒê√£ x√≥a watermark xong cho file: ${file.name}`);
          }
          
          // T·∫£i l√™n Drive v√†o folder ƒë√≠ch
          console.log(`ƒêang t·∫£i l√™n Drive cho file: ${file.name}`);
          const uploadResult = await uploadFileToDriveFolder(outputPath, `${downloadResult.fileName}`, destinationFolderId);
          console.log(`ƒê√£ t·∫£i l√™n Drive th√†nh c√¥ng cho file: ${file.name}`);
          
          folderResults.push({
            originalFile: file.name,
            processedFile: uploadResult.fileName,
            viewLink: uploadResult.webViewLink,
            downloadLink: uploadResult.downloadLink,
            fileType: 'pdf'
          });
          
        } else if (downloadResult.isImage) {
          console.log(`X·ª≠ l√Ω file ·∫£nh: ${file.name}`);
          
          // T·∫°o ƒë∆∞·ªùng d·∫´n output cho ·∫£nh
          const outputPath = path.join(outputDir, `processed_${file.name}`);
          
          // T·∫°o config cho x·ª≠ l√Ω ·∫£nh
          const config = { ...DEFAULT_CONFIG };
          
          // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
          if (backgroundImage) {
            let backgroundImagePath = backgroundImage;
            
            if (!path.isAbsolute(backgroundImage) && 
                !backgroundImage.includes(':/') && 
                !backgroundImage.includes(':\\')) {
              backgroundImagePath = path.join(process.cwd(), backgroundImage);
            }
            
            // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            const fileExists = fs.existsSync(backgroundImagePath);
            
            if (fileExists) {
              config.backgroundImage = backgroundImagePath;
              
              if (backgroundOpacity !== undefined) {
                config.backgroundOpacity = parseFloat(backgroundOpacity);
              }
            }
          }
          
          // X·ª≠ l√Ω ·∫£nh ƒë·ªÉ x√≥a watermark
          console.log(`üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω watermark cho ·∫£nh: ${file.name}`);
          console.log(`üîç ƒêang ph√¢n t√≠ch th√¥ng tin ·∫£nh...`);
          
          const startTime = Date.now();
          let cleanResult;
          let processedImagePath = downloadResult.filePath;
          let fallbackToOriginal = false;
          
          try {
            if (!sharp) {
              console.warn("Sharp kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông. S·ª≠ d·ª•ng ·∫£nh g·ªëc.");
              throw new Error("Sharp kh√¥ng kh·∫£ d·ª•ng");
            }
            
            try {
              await processImage(downloadResult.filePath, outputPath, config);
              
              if (!fs.existsSync(outputPath)) {
                console.error(`·∫¢nh ƒë·∫ßu ra kh√¥ng ƒë∆∞·ª£c t·∫°o: ${outputPath}`);
                throw new Error("·∫¢nh ƒë·∫ßu ra kh√¥ng t·ªìn t·∫°i sau khi x·ª≠ l√Ω");
              }
              
              const originalSize = fs.statSync(downloadResult.filePath).size;
              const processedSize = fs.statSync(outputPath).size;
              const processingTime = ((Date.now() - startTime) / 1000).toFixed(2);
              
              console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω watermark xong cho ·∫£nh: ${file.name} trong ${processingTime} gi√¢y`);
              
              cleanResult = {
                success: true,
                filePath: outputPath,
                originalSize: (originalSize / (1024 * 1024)).toFixed(2),
                processedSize: (processedSize / (1024 * 1024)).toFixed(2),
                processingTime
              };
              
              processedImagePath = outputPath;
            } catch (processError) {
              console.error(`*** CHI TI·∫æT L·ªñI X·ª¨ L√ù ·∫¢NH ${file.name} ***`);
              console.error(`- Message: ${processError.message}`);
              console.error(`- Stack: ${processError.stack}`);
              if (processError.cause) {
                console.error(`- Cause: ${JSON.stringify(processError.cause)}`);
              }
              console.error(`********************************`);
              
              // N·∫øu x·ª≠ l√Ω l·ªói, s·ª≠ d·ª•ng ·∫£nh g·ªëc
              console.log(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω watermark cho ·∫£nh. S·ª≠ d·ª•ng ·∫£nh g·ªëc: ${file.name}`);
              fs.copyFileSync(downloadResult.filePath, outputPath);
              
              const originalSize = fs.statSync(downloadResult.filePath).size;
              
              cleanResult = {
                success: false,
                filePath: outputPath,
                originalSize: (originalSize / (1024 * 1024)).toFixed(2),
                processedSize: (originalSize / (1024 * 1024)).toFixed(2),
                processingTime: '0',
                error: processError.message
              };
              
              fallbackToOriginal = true;
              processedImagePath = outputPath;
            }
          } catch (outerError) {
            console.error(`*** L·ªñI NGHI√äM TR·ªåNG KHI X·ª¨ L√ù ·∫¢NH ***`);
            console.error(`- Message: ${outerError.message}`);
            console.error(`- Stack: ${outerError.stack}`);
            console.error(`********************************`);
            
            // N·∫øu c√≥ l·ªói ·ªü m·ª©c cao nh·∫•t, v·∫´n s·ª≠ d·ª•ng file g·ªëc
            processedImagePath = downloadResult.filePath;
            const originalSize = fs.statSync(downloadResult.filePath).size;
            
            cleanResult = {
              success: false,
              filePath: downloadResult.filePath,
              originalSize: (originalSize / (1024 * 1024)).toFixed(2),
              processedSize: (originalSize / (1024 * 1024)).toFixed(2),
              processingTime: '0',
              error: outerError.message
            };
            
            fallbackToOriginal = true;
          }
          
          // T·∫£i l√™n Drive v√†o folder ƒë√≠ch
          console.log(`ƒêang t·∫£i l√™n Drive cho ·∫£nh: ${file.name}`);
          const uploadResult = await uploadFileToDriveFolder(processedImagePath, file.name, destinationFolderId);
          console.log(`ƒê√£ t·∫£i l√™n Drive th√†nh c√¥ng cho ·∫£nh: ${file.name}`);
          
          folderResults.push({
            originalFile: file.name,
            processedFile: uploadResult.fileName,
            viewLink: uploadResult.webViewLink,
            downloadLink: uploadResult.downloadLink,
            fileType: 'image',
            processingDetails: cleanResult,
            fallbackToOriginal: fallbackToOriginal
          });
          
        } else {
          // C√°c lo·∫°i file kh√°c - x·ª≠ l√Ω tr·ª±c ti·∫øp kh√¥ng thay ƒë·ªïi
          console.log(`ƒêang x·ª≠ l√Ω lo·∫°i file kh√°c: ${file.name} (${downloadResult.contentType})`);
          
          try {
            // T·∫£i tr·ª±c ti·∫øp file l√™n th∆∞ m·ª•c ƒë√≠ch
            const uploadResult = await uploadFileToDriveFolder(
              downloadResult.filePath,
              downloadResult.fileName,
              destinationFolderId
            );
            
            console.log(`‚úÖ ƒê√£ t·∫£i l√™n Drive th√†nh c√¥ng cho file kh√°c: ${file.name}`);
            
            folderResults.push({
              originalFile: file.name,
              processedFile: uploadResult.fileName,
              viewLink: uploadResult.webViewLink,
              downloadLink: uploadResult.downloadLink,
              fileType: downloadResult.contentType,
              directUpload: true
            });
          } catch (uploadError) {
            console.error(`‚ùå L·ªói khi t·∫£i l√™n file ${file.name}:`, uploadError);
            throw new Error(`Kh√¥ng th·ªÉ t·∫£i l√™n file: ${uploadError.message}`);
          }
        }
      } catch (fileError) {
        console.error(`L·ªói khi x·ª≠ l√Ω file ${file.name}: ${fileError.message}`);
        // Ghi l·∫°i l·ªói x·ª≠ l√Ω file nh∆∞ng kh√¥ng d·ª´ng to√†n b·ªô qu√° tr√¨nh
        folderResults.push({
          originalFile: file.name,
          error: fileError.message
        });
      } finally {
        // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m c·ªßa file
        try {
          // Ki·ªÉm tra outputDir t·ªìn t·∫°i tr∆∞·ªõc khi d·ªçn d·∫πp
          if (typeof outputDir !== 'undefined' && outputDir) {
            cleanupTempFiles(outputDir);
            const index = processingFolders.indexOf(outputDir);
            if (index > -1) {
              processingFolders.splice(index, 1);
            }
            console.log(`ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m cho file: ${file.name}`);
          }
        } catch (cleanupError) {
          // B·ªè qua l·ªói d·ªçn d·∫πp
          console.error(`L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
        }
      }
      
      console.log(`ƒê√£ ho√†n th√†nh x·ª≠ l√Ω file ${i+1}/${folderInfo.files.length}: ${file.name}`);
    }
    
    console.log(`ƒê√£ ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ ${folderInfo.files.length} file trong folder "${folderInfo.folderName}"`);
    
    // Ghi log th√¥ng tin v·ªÅ folder k·∫øt qu·∫£ 
    console.log(`URL folder k·∫øt qu·∫£: ${destinationFolder.webViewLink}`);
    console.log(`T·ªïng s·ªë file ƒë√£ x·ª≠ l√Ω: ${folderResults.length}`);
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu ph·∫£n h·ªìi
    const responseData = {
      success: true,
      message: `ƒê√£ x·ª≠ l√Ω ${folderResults.length} file trong folder th√†nh c√¥ng.`,
      folderName: destinationFolder.folderName,
      folderLink: destinationFolder.webViewLink,
      folderUrl: destinationFolder.webViewLink,
      driveUrl: destinationFolder.webViewLink,
      url: destinationFolder.webViewLink,
      totalFiles: folderInfo.files.length,
      processedFiles: folderResults,
      folderInfo: {
        id: destinationFolderId,
        name: destinationFolder.folderName,
        url: destinationFolder.webViewLink,
        fileCount: folderResults.length
      }
    };
    
    // C·∫≠p nh·∫≠t th√¥ng tin v√†o DB n·∫øu c√≥ courseId
    if (dbCourseId && mongoClient) {
      try {
        console.log(`C·∫≠p nh·∫≠t th√¥ng tin folder ƒë√£ x·ª≠ l√Ω v√†o DB cho courseId: ${courseId}`);
        
        // C·∫≠p nh·∫≠t t·ª´ng file trong folder v√†o DB
        for (const processedFile of folderResults) {
          // Ch·ªâ c·∫≠p nh·∫≠t c√°c file ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng v√† c√≥ link
          if (processedFile.viewLink && !processedFile.error) {
            // T·∫°o ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu file ƒë√£ x·ª≠ l√Ω
            const fileData = {
              success: true,
              originalFilename: processedFile.originalFile,
              processedFilename: processedFile.processedFile || processedFile.originalFile,
              viewLink: processedFile.viewLink,
              downloadLink: processedFile.downloadLink || processedFile.viewLink,
              skipped: processedFile.skipped || false
            };
            
            // T·∫°o URL g·ªëc t·ª´ file ID trong folder
            // L·∫•y file info t·ª´ danh s√°ch files g·ªëc
            const originalFile = folderInfo.files.find(f => f.name === processedFile.originalFile);
            if (originalFile) {
              const originalUrl = `https://drive.google.com/file/d/${originalFile.id}/view`;
              
              // C·∫≠p nh·∫≠t v√†o DB
              await updateProcessedFileInDB(
                mongoClient,
                dbCourseId,
                originalUrl,
                fileData
              );
              console.log(`ƒê√£ c·∫≠p nh·∫≠t DB cho file: ${processedFile.originalFile}`);
            } else {
              console.log(`Kh√¥ng t√¨m th·∫•y th√¥ng tin file g·ªëc cho: ${processedFile.originalFile}`);
            }
          }
        }
        
        console.log(`ƒê√£ ho√†n th√†nh c·∫≠p nh·∫≠t DB cho ${folderResults.length} file`);
      } catch (dbError) {
        console.error(`L·ªói khi c·∫≠p nh·∫≠t DB cho folder: ${dbError.message}`);
        // V·∫´n ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω ngay c·∫£ khi c√≥ l·ªói DB
      }
    }
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi link ƒë·∫øn folder ƒë√≠ch
    return NextResponse.json(responseData, { status: 200 });
    
  } catch (error) {
    console.error(`L·ªói khi x·ª≠ l√Ω folder: ${error.message}`);
    
    // D·ªçn d·∫πp c√°c th∆∞ m·ª•c t·∫°m n·∫øu c√≤n
    for (const folderPath of processingFolders) {
      if (fs.existsSync(folderPath)) {
        try {
          cleanupTempFiles(folderPath);
        } catch (cleanupError) {
          // B·ªè qua l·ªói cleanup
        }
      }
    }
    
    // D·ªçn d·∫πp b·ªô nh·ªõ tr∆∞·ªõc khi tr·∫£ v·ªÅ l·ªói
    forceGarbageCollection();
    
    return NextResponse.json(
      { 
        success: false,
        error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω folder: ${error.message}` 
      },
      { status: 500 }
    );
  }
}

// Test endpoint
export async function GET() {
  try {
    // Ki·ªÉm tra Google Drive token
    const uploadToken = getTokenByType('upload');
    const downloadToken = getTokenByType('download');
    
    const tokenStatus = {
      upload: uploadToken ? true : false,
      download: downloadToken ? true : false
    };
    
    // Ki·ªÉm tra Ghostscript
    const gsPath = findGhostscript();
    const gsStatus = gsPath ? true : false;
    
    return NextResponse.json({
      success: true,
      status: {
        drive: tokenStatus,
        ghostscript: gsStatus,
        gsPath: gsPath || null,
        sharp: sharp ? true : false
      }
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra API'
    }, { status: 500 });
  }
}