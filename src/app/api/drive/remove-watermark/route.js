/**
 * API x√≥a h√¨nh m·ªù file PDF t·ª´ Google Drive
 * 
 * API n√†y s·∫Ω:
 * 1. T·∫£i xu·ªëng file PDF t·ª´ Google Drive
 * 2. X·ª≠ l√Ω ƒë·ªÉ x√≥a watermark
 * 3. T√πy ch·ªçn th√™m h√¨nh n·ªÅn t√πy ch·ªânh
 * 4. T·∫£i l√™n file ƒë√£ x·ª≠ l√Ω l√™n Google Drive
 * 5. Tr·∫£ v·ªÅ link ƒë·∫øn file ƒë√£ x·ª≠ l√Ω
 * 
 * Tham s·ªë:
 * - token: Token x√°c th·ª±c API
 * - driveLink: Link ƒë·∫øn file PDF tr√™n Google Drive
 * - backgroundImage (t√πy ch·ªçn): T√™n file h√¨nh n·ªÅn (v√≠ d·ª•: "nen.png") ho·∫∑c ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
 *   - N·∫øu ch·ªâ cung c·∫•p t√™n file, h·ªá th·ªëng s·∫Ω t√¨m trong th∆∞ m·ª•c g·ªëc c·ªßa ·ª©ng d·ª•ng
 *   - V√≠ d·ª•: "nen.png" s·∫Ω t·ª± ƒë·ªông tr·ªè ƒë·∫øn "[th∆∞ m·ª•c ·ª©ng d·ª•ng]/nen.png"
 * - backgroundOpacity (t√πy ch·ªçn): ƒê·ªô trong su·ªët c·ªßa h√¨nh n·ªÅn (0.1 = 10%)
 */

import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { Worker, isMainThread, parentPort, workerData } from 'worker_threads';
import { v4 as uuidv4 } from 'uuid';
import os from 'os';
import { google } from 'googleapis';

// Import c√°c module ƒë√£ t√°ch
import { API_TOKEN, DEFAULT_CONFIG } from './lib/config.js';
import { downloadFromGoogleDrive } from './lib/drive-service.js';
import { uploadToDrive } from './lib/drive-service.js';
import { cleanPdf } from './lib/watermark.js';
import { cleanupTempFiles, getTokenByType, findGhostscript } from './lib/utils.js';
import { processPage, convertPage } from './lib/workers.js';
import { 
  processDriveFolder, 
  createDriveFolder, 
  uploadFileToDriveFolder,
  downloadFileFromDrive 
} from './lib/drive-service.js';
import { downloadBlockedPDF } from './lib/drive-fix-blockdown.js';

// Suppress Node.js deprecation warnings for punycode module
process.noDeprecation = true;
// If you still need specific warnings, you can handle them selectively
process.on('warning', (warning) => {
  if (warning.name === 'DeprecationWarning' && warning.message.includes('punycode')) {
    // Ignore punycode deprecation warnings
    return;
  }
  // Log other warnings if needed
  // console.warn(warning.name, warning.message);
});

// S·ª≠a import sharp ƒë·ªÉ s·ª≠ d·ª•ng phi√™n b·∫£n t∆∞∆°ng th√≠ch v·ªõi Node.js
let sharp;
try {
  sharp = require('sharp');
  
  if (process.env.NODE_ENV === 'production') {
    // C√°c c·∫•u h√¨nh cho m√¥i tr∆∞·ªùng production n·∫øu c·∫ßn
  }
} catch (error) {
  sharp = null;
}

// ƒê·∫∑t ƒë∆∞·ªùng d·∫´n cho worker - c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi Next.js
if (typeof window === 'undefined' && sharp) {
  try {
    sharp.disableWorker = true;
    
    if (sharp.GlobalWorkerOptions) {
      sharp.GlobalWorkerOptions.disableWorker = true;
    }
  } catch (error) {
    // Handle error
  }
}

// Ki·ªÉm tra n·∫øu ƒëang trong worker thread
if (!isMainThread) {
  const task = workerData.task;
  
  if (task === 'processPage') {
    // X·ª≠ l√Ω ·∫£nh trong worker thread
    processPage(workerData).then(result => {
      parentPort.postMessage(result);
    }).catch(error => {
      parentPort.postMessage({ success: false, error: error.message });
    });
  } else if (task === 'convertPage') {
    // Chuy·ªÉn ƒë·ªïi PDF sang PNG trong worker thread
    convertPage(workerData).then(result => {
      parentPort.postMessage(result);
    }).catch(error => {
      parentPort.postMessage({ success: false, error: error.message });
    });
  }
}

// Next.js API route handler
export async function POST(request) {
  let tempDir = null;
  let processedFilePath = null;
  let processingFolders = [];
  
  try {
    // Parse request body
    const requestBody = await request.json();
    let { token, driveLink, backgroundImage, backgroundOpacity, skipTokenValidation, url } = requestBody;

    // H·ªó tr·ª£ c·∫£ url v√† driveLink (ƒë·ªÉ t∆∞∆°ng th√≠ch)
    if (!driveLink && url) {
      driveLink = url;
    }

    // S·ª≠ d·ª•ng "nen.png" l√†m h√¨nh n·ªÅn m·∫∑c ƒë·ªãnh
    if (!backgroundImage) {
      backgroundImage = path.join(process.cwd(), "nen.png");
    }
    if (backgroundOpacity === undefined) {
      backgroundOpacity = 0.15; // Gi·∫£m xu·ªëng 0.15 ƒë·ªÉ ·∫£nh n·ªÅn ƒë·∫≠m h∆°n
    }

    // Validate API token ch·ªâ khi kh√¥ng c√≥ skipTokenValidation
    if (!skipTokenValidation && (!token || token !== API_TOKEN)) {
      return NextResponse.json(
        { error: 'Kh√¥ng ƒë∆∞·ª£c ph√©p. Token API kh√¥ng h·ª£p l·ªá.' },
        { status: 401 }
      );
    }

    // Validate drive link
    if (!driveLink) {
      return NextResponse.json(
        { error: 'Thi·∫øu li√™n k·∫øt Google Drive.' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra xem link l√† folder hay file
    let isFolder = false;
    if (driveLink.includes('drive.google.com/drive/folders/') || 
        driveLink.includes('drive.google.com/drive/u/0/folders/') ||
        driveLink.includes('drive.google.com/drive/my-drive/folders/') ||
        driveLink.includes('drive.google.com/drive/shared-with-me/folders/') ||
        driveLink.includes('drive.google.com/folders/') ||
        (driveLink.includes('drive.google.com') && driveLink.includes('folders'))) {
      isFolder = true;
    }
    
    if (isFolder) {
      console.log('X·ª≠ l√Ω folder:', driveLink);
      // X·ª≠ l√Ω n·∫øu l√† folder
      const folderResponse = await handleDriveFolder(driveLink, backgroundImage, backgroundOpacity);
      
      // Kh√¥ng c·∫ßn ƒë·ªçc response.json() ·ªü ƒë√¢y v√¨ s·∫Ω l√†m stream b·ªã kh√≥a
      // Log ƒë∆∞·ª£c t·∫°o tr·ª±c ti·∫øp trong h√†m handleDriveFolder r·ªìi
      console.log('ƒê√£ x·ª≠ l√Ω folder th√†nh c√¥ng, tr·∫£ v·ªÅ k·∫øt qu·∫£...');
      
      return folderResponse;
    } else {
      console.log('X·ª≠ l√Ω file ƒë∆°n l·∫ª:', driveLink);
      // X·ª≠ l√Ω n·∫øu l√† file (PDF ho·∫∑c ·∫£nh)
      return await handleDriveFile(driveLink, backgroundImage, backgroundOpacity);
    }
    
  } catch (error) {
    // Clean up temp files
    if (tempDir && fs.existsSync(tempDir)) {
      try {
        cleanupTempFiles(tempDir);
      } catch (cleanupError) {
        // Handle cleanup error
      }
    }
    
    // D·ªçn d·∫πp c√°c th∆∞ m·ª•c x·ª≠ l√Ω folder n·∫øu c√≥
    for (const folderPath of processingFolders) {
      if (fs.existsSync(folderPath)) {
        try {
          cleanupTempFiles(folderPath);
        } catch (cleanupError) {
          // B·ªè qua l·ªói cleanup
        }
      }
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω: ${error.message}` 
      },
      { status: 500 }
    );
  }
}

// H√†m x·ª≠ l√Ω m·ªôt file ƒë∆°n l·∫ª (PDF ho·∫∑c ·∫£nh)
async function handleDriveFile(driveLink, backgroundImage, backgroundOpacity) {
  let tempDir = null;
  let processedFilePath = null;
  
  try {
    // T·∫£i file t·ª´ Drive (h·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng)
    let downloadResult;
    try {
      downloadResult = await downloadFileFromDrive(driveLink);
      tempDir = downloadResult.outputDir;
    } catch (downloadError) {
      console.log(`‚ö†Ô∏è L·ªói t·∫£i file t·ª´ Drive API: ${downloadError.message}`);
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói "cannot be downloaded" kh√¥ng
      if (downloadError.message.includes('cannot be downloaded') || 
          downloadError.message.includes('cannotDownloadFile') ||
          downloadError.message.includes('403')) {
        console.log(`üîÑ Th·ª≠ t·∫£i file b·∫±ng ph∆∞∆°ng ph√°p ch·ª•p PDF...`);
        
        // Tr√≠ch xu·∫•t fileId t·ª´ driveLink
        let fileId;
        if (driveLink.includes('drive.google.com')) {
          try {
            const result = extractGoogleDriveFileId(driveLink);
            fileId = result.fileId;
          } catch (error) {
            throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID t·ª´ link Google Drive: ${error.message}`);
          }
        } else {
          fileId = driveLink;
        }
        
        // T·∫°o th∆∞ m·ª•c t·∫°m
        const tempDirName = uuidv4();
        tempDir = path.join(os.tmpdir(), tempDirName);
        fs.mkdirSync(tempDir, { recursive: true });
        
        // L·∫•y th√¥ng tin file ƒë·ªÉ bi·∫øt t√™n
        try {
          const downloadToken = getTokenByType('download');
          if (!downloadToken) {
            throw new Error('Kh√¥ng t√¨m th·∫•y token Google Drive.');
          }
          
          const oauth2Client = new google.auth.OAuth2(
            process.env.GOOGLE_CLIENT_ID,
            process.env.GOOGLE_CLIENT_SECRET,
            process.env.GOOGLE_REDIRECT_URI
          );
          
          oauth2Client.setCredentials(downloadToken);
          const drive = google.drive({ version: 'v3', auth: oauth2Client });
          
          // L·∫•y metadata c·ªßa file
          const fileMetadata = await drive.files.get({
            fileId: fileId,
            supportsAllDrives: true,
            includeItemsFromAllDrives: true,
            fields: 'name,mimeType,size'
          });
          
          const fileName = fileMetadata.data.name;
          const mimeType = fileMetadata.data.mimeType;
          
          // Ki·ªÉm tra n·∫øu l√† PDF th√¨ d√πng gi·∫£i ph√°p t·∫£i file b·ªã ch·∫∑n
          if (mimeType === 'application/pdf' || fileName.toLowerCase().endsWith('.pdf')) {
            console.log(`üìë S·ª≠ d·ª•ng gi·∫£i ph√°p t·∫£i file PDF b·ªã ch·∫∑n...`);
            // T·∫°o config cho x·ª≠ l√Ω watermark
            const watermarkConfig = { ...DEFAULT_CONFIG };
            
            // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
            if (backgroundImage) {
              let backgroundImagePath = backgroundImage;
              
              if (!path.isAbsolute(backgroundImage) && 
                  !backgroundImage.includes(':/') && 
                  !backgroundImage.includes(':\\')) {
                backgroundImagePath = path.join(process.cwd(), backgroundImage);
              }
              
              const fileExists = fs.existsSync(backgroundImagePath);
              
              if (fileExists) {
                watermarkConfig.backgroundImage = backgroundImagePath;
                
                if (backgroundOpacity !== undefined) {
                  watermarkConfig.backgroundOpacity = parseFloat(backgroundOpacity);
                }
              }
            }
            
            const unblockResult = await downloadBlockedPDF(fileId, fileName, tempDir, watermarkConfig);
            
            if (unblockResult.success) {
              downloadResult = {
                success: true,
                filePath: unblockResult.filePath,
                fileName: fileName,
                contentType: 'application/pdf',
                outputDir: tempDir,
                size: fs.statSync(unblockResult.filePath).size,
                isImage: false,
                isPdf: true,
                originalSize: unblockResult.originalSize || 0,
                processedSize: unblockResult.processedSize || fs.statSync(unblockResult.filePath).size,
                processingTime: unblockResult.processingTime || 0,
                alreadyProcessed: true // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω watermark
              };
            } else {
              throw new Error(`Kh√¥ng th·ªÉ t·∫£i file b·ªã ch·∫∑n: ${unblockResult.error}`);
            }
          } else {
            throw new Error(`Lo·∫°i file ${mimeType} kh√¥ng h·ªó tr·ª£ t·∫£i xu·ªëng khi b·ªã ch·∫∑n`);
          }
        } catch (unblockError) {
          throw new Error(`Kh√¥ng th·ªÉ t·∫£i file b·ªã ch·∫∑n: ${unblockError.message}`);
        }
      } else {
      return NextResponse.json(
        { error: `Kh√¥ng th·ªÉ t·∫£i file t·ª´ Google Drive: ${downloadError.message}` },
        { status: 500 }
      );
    }
    }
    
    // Ki·ªÉm tra lo·∫°i file
    if (downloadResult.isPdf) {
      // X·ª≠ l√Ω n·∫øu l√† PDF
    let cleanResult;
      
      // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
      if (downloadResult.alreadyProcessed) {
        console.log(`‚úÖ File PDF ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark trong qu√° tr√¨nh t·∫£i xu·ªëng, b·ªè qua b∆∞·ªõc x·ª≠ l√Ω watermark`);
        cleanResult = {
          success: true,
          filePath: downloadResult.filePath,
          originalSize: downloadResult.originalSize,
          processedSize: downloadResult.processedSize,
          processingTime: downloadResult.processingTime
        };
        processedFilePath = downloadResult.filePath;
      } else {
    try {
      const outputPath = path.join(tempDir, `${path.basename(downloadResult.fileName, '.pdf')}.pdf`);
      
      // T·∫°o config v·ªõi tham s·ªë t·ª´ request
      const config = { ...DEFAULT_CONFIG };
      
      // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
      if (backgroundImage) {
        // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n h√¨nh n·ªÅn ƒë·ªÉ l√†m cho n√≥ di ƒë·ªông
        let backgroundImagePath = backgroundImage;
        
        // N·∫øu kh√¥ng ph·∫£i ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi, coi nh∆∞ n√≥ l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ th∆∞ m·ª•c g·ªëc
        if (!path.isAbsolute(backgroundImage) && 
            !backgroundImage.includes(':/') && 
            !backgroundImage.includes(':\\')) {
          backgroundImagePath = path.join(process.cwd(), backgroundImage);
        }
        
        // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        const fileExists = fs.existsSync(backgroundImagePath);
        
        if (fileExists) {
          config.backgroundImage = backgroundImagePath;
          
          if (backgroundOpacity !== undefined) {
            config.backgroundOpacity = parseFloat(backgroundOpacity);
          }
        }
      }
      
          // X·ª≠ l√Ω PDF ƒë·ªÉ x√≥a watermark
          console.log(`B·∫Øt ƒë·∫ßu x√≥a watermark cho file: ${downloadResult.fileName}`);
          
          // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
          if (downloadResult.alreadyProcessed) {
            console.log(`‚úÖ File PDF ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark trong qu√° tr√¨nh t·∫£i xu·ªëng, b·ªè qua b∆∞·ªõc x·ª≠ l√Ω watermark l·∫ßn hai`);
            
            // Ch·ªâ c·∫ßn copy file ƒë√£ x·ª≠ l√Ω
            fs.copyFileSync(downloadResult.filePath, outputPath);
            
            cleanResult = {
              success: true,
              filePath: outputPath,
              originalSize: downloadResult.originalSize, 
              processedSize: downloadResult.processedSize,
              processingTime: downloadResult.processingTime
            };
            console.log(`‚úÖ ƒê√£ sao ch√©p file ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: ${downloadResult.fileName}`);
          } else {
            // Th·ª±c hi·ªán x·ª≠ l√Ω watermark n·∫øu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
      cleanResult = await cleanPdf(downloadResult.filePath, outputPath, config);
            console.log(`ƒê√£ x√≥a watermark xong cho file: ${downloadResult.fileName}`);
          }
          
      processedFilePath = outputPath;
    } catch (cleanError) {
      // Clean up temp files
      if (tempDir && fs.existsSync(tempDir)) {
        cleanupTempFiles(tempDir);
      }
      
      return NextResponse.json(
        { error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω PDF: ${cleanError.message}` },
        { status: 500 }
      );
        }
    }
    
    // Upload processed file back to Drive
    let uploadResult;
    try {
      uploadResult = await uploadToDrive(processedFilePath, downloadResult.fileName, 'application/pdf');
    } catch (uploadError) {
      // Clean up temp files
      if (tempDir && fs.existsSync(tempDir)) {
        cleanupTempFiles(tempDir);
      }
      
      return NextResponse.json(
        { error: `Kh√¥ng th·ªÉ t·∫£i file l√™n Google Drive: ${uploadError.message}` },
        { status: 500 }
      );
    }
    
    // Clean up temp files
    try {
      cleanupTempFiles(tempDir);
      tempDir = null;
    } catch (cleanupError) {
      // Handle cleanup error
    }
    
    // Return success response with link to processed file
    return NextResponse.json({
      success: true,
      message: 'ƒê√£ x·ª≠ l√Ω x√≥a watermark th√†nh c√¥ng.',
      originalFilename: downloadResult.fileName,
      processedFilename: uploadResult.fileName,
      viewLink: uploadResult.webViewLink,
      downloadLink: uploadResult.downloadLink,
      processingDetails: {
        originalSize: cleanResult.originalSize,
        processedSize: cleanResult.processedSize,
        processingTime: cleanResult.processingTime + ' gi√¢y'
      }
    }, { status: 200 });
      
    } else if (downloadResult.isImage) {
      // N·∫øu l√† ·∫£nh, kh√¥ng x·ª≠ l√Ω, ch·ªâ t·∫£i l√™n Drive
      let uploadResult;
      try {
        uploadResult = await uploadToDrive(downloadResult.filePath, downloadResult.fileName, downloadResult.contentType);
      } catch (uploadError) {
        // Clean up temp files
        if (tempDir && fs.existsSync(tempDir)) {
          cleanupTempFiles(tempDir);
        }
        
        return NextResponse.json(
          { error: `Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n Google Drive: ${uploadError.message}` },
          { status: 500 }
        );
      }
      
      // Clean up temp files
      try {
        cleanupTempFiles(tempDir);
        tempDir = null;
      } catch (cleanupError) {
        // Handle cleanup error
      }
      
      // Return success response with link to uploaded image
      return NextResponse.json({
        success: true,
        message: 'ƒê√£ t·∫£i ·∫£nh l√™n Google Drive th√†nh c√¥ng.',
        originalFilename: downloadResult.fileName,
        processedFilename: uploadResult.fileName,
        viewLink: uploadResult.webViewLink,
        downloadLink: uploadResult.downloadLink
      }, { status: 200 });
      
    } else {
      // Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
      cleanupTempFiles(tempDir);
      
      return NextResponse.json(
        { error: 'Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. API n√†y ch·ªâ h·ªó tr·ª£ x·ª≠ l√Ω file PDF v√† ·∫£nh.' },
        { status: 400 }
      );
    }
    
  } catch (error) {
    // Clean up temp files
    if (tempDir && fs.existsSync(tempDir)) {
      try {
        cleanupTempFiles(tempDir);
      } catch (cleanupError) {
        // Handle cleanup error
      }
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω file: ${error.message}` 
      },
      { status: 500 }
    );
  }
}

// H√†m x·ª≠ l√Ω folder t·ª´ Google Drive
async function handleDriveFolder(driveFolderLink, backgroundImage, backgroundOpacity) {
  let folderResults = [];
  let processingFolders = [];
  let destinationFolderId = null;
  
  try {
    // L·∫•y th√¥ng tin folder v√† danh s√°ch files
    const folderInfo = await processDriveFolder(driveFolderLink);
    
    // Ki·ªÉm tra xem c√≥ file n√†o trong folder kh√¥ng
    if (!folderInfo.files || folderInfo.files.length === 0) {
      return NextResponse.json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y file n√†o trong folder n√†y.',
        folderName: folderInfo.folderName
      }, { status: 400 });
    }
    
    console.log(`ƒê√£ t√¨m th·∫•y ${folderInfo.files.length} file trong folder "${folderInfo.folderName}"`);
    
    // T·∫°o folder ƒë√≠ch tr√™n Drive ƒë·ªÉ l∆∞u k·∫øt qu·∫£
    const destinationFolder = await createDriveFolder(folderInfo.folderName);
    destinationFolderId = destinationFolder.folderId;
    
    console.log(`ƒê√£ t·∫°o folder ƒë√≠ch: ${destinationFolder.folderName} (ID: ${destinationFolderId})`);
    
    // X·ª≠ l√Ω t·ª´ng file trong folder - l·∫∑p tu·∫ßn t·ª± ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng g·∫∑p l·ªói v·ªõi nhi·ªÅu file
    for (let i = 0; i < folderInfo.files.length; i++) {
      const file = folderInfo.files[i];
      console.log(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file ${i+1}/${folderInfo.files.length}: ${file.name}`);
      
      // T·∫°o th∆∞ m·ª•c t·∫°m ri√™ng cho m·ªói file
      const tempDirName = uuidv4();
      const outputDir = path.join(os.tmpdir(), tempDirName);
      fs.mkdirSync(outputDir, { recursive: true });
      processingFolders.push(outputDir);
      
      try {
        // T·∫£i file t·ª´ Drive
        console.log(`ƒêang t·∫£i file: ${file.name} (ID: ${file.id})`);
        let downloadResult;
        try {
          downloadResult = await downloadFileFromDrive(file.id);
          console.log(`ƒê√£ t·∫£i xong file: ${file.name}, k√≠ch th∆∞·ªõc: ${downloadResult.size} bytes`);
        } catch (downloadError) {
          console.log(`‚ö†Ô∏è L·ªói t·∫£i file ${file.name}: ${downloadError.message}`);
          
          // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói "cannot be downloaded" kh√¥ng
          if (downloadError.message.includes('cannot be downloaded') || 
              downloadError.message.includes('cannotDownloadFile') ||
              downloadError.message.includes('403')) {
            console.log(`üîÑ Th·ª≠ t·∫£i file ${file.name} b·∫±ng ph∆∞∆°ng ph√°p ch·ª•p PDF...`);
            
            // T·∫°o th∆∞ m·ª•c t·∫°m cho file n√†y
            const tempDirName = uuidv4();
            const fileOutputDir = path.join(os.tmpdir(), tempDirName);
            fs.mkdirSync(fileOutputDir, { recursive: true });
            processingFolders.push(fileOutputDir);
            
            // Ki·ªÉm tra n·∫øu l√† PDF th√¨ d√πng gi·∫£i ph√°p t·∫£i file b·ªã ch·∫∑n
            if (file.mimeType === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {
              console.log(`üìë S·ª≠ d·ª•ng gi·∫£i ph√°p t·∫£i file PDF b·ªã ch·∫∑n...`);
              
              // T·∫°o config cho x·ª≠ l√Ω watermark
              const watermarkConfig = { ...DEFAULT_CONFIG };
              
              // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
              if (backgroundImage) {
                let backgroundImagePath = backgroundImage;
                
                if (!path.isAbsolute(backgroundImage) && 
                    !backgroundImage.includes(':/') && 
                    !backgroundImage.includes(':\\')) {
                  backgroundImagePath = path.join(process.cwd(), backgroundImage);
                }
                
                const fileExists = fs.existsSync(backgroundImagePath);
                
                if (fileExists) {
                  watermarkConfig.backgroundImage = backgroundImagePath;
                  
                  if (backgroundOpacity !== undefined) {
                    watermarkConfig.backgroundOpacity = parseFloat(backgroundOpacity);
                  }
                }
              }
              
              const unblockResult = await downloadBlockedPDF(file.id, file.name, fileOutputDir, watermarkConfig);
              
              if (unblockResult.success) {
                downloadResult = {
                  success: true,
                  filePath: unblockResult.filePath,
                  fileName: file.name,
                  contentType: 'application/pdf',
                  outputDir: fileOutputDir,
                  size: fs.statSync(unblockResult.filePath).size,
                  isImage: false,
                  isPdf: true,
                  originalSize: unblockResult.originalSize || 0,
                  processedSize: unblockResult.processedSize || fs.statSync(unblockResult.filePath).size,
                  processingTime: unblockResult.processingTime || 0,
                  alreadyProcessed: true // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω watermark
                };
                console.log(`‚úÖ ƒê√£ t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng file ${file.name} b·∫±ng ph∆∞∆°ng ph√°p ch·ª•p PDF`);
              } else {
                throw new Error(`Kh√¥ng th·ªÉ t·∫£i file b·ªã ch·∫∑n: ${unblockResult.error}`);
              }
            } else {
              folderResults.push({
                originalFile: file.name,
                skipped: true,
                reason: `Lo·∫°i file ${file.mimeType} kh√¥ng h·ªó tr·ª£ t·∫£i xu·ªëng khi b·ªã ch·∫∑n`
              });
              continue;
            }
          } else {
            folderResults.push({
              originalFile: file.name,
              error: downloadError.message
            });
            continue;
          }
        }
        
        // X·ª≠ l√Ω t√πy theo lo·∫°i file
        if (downloadResult.isPdf) {
          console.log(`X·ª≠ l√Ω file PDF: ${file.name}`);
          // X·ª≠ l√Ω PDF
          const outputPath = path.join(outputDir, `${path.basename(downloadResult.fileName, '.pdf')}.pdf`);
          
          // T·∫°o config cho x·ª≠ l√Ω PDF
          const config = { ...DEFAULT_CONFIG };
          
          // Th√™m h√¨nh n·ªÅn n·∫øu c√≥
          if (backgroundImage) {
            let backgroundImagePath = backgroundImage;
            
            if (!path.isAbsolute(backgroundImage) && 
                !backgroundImage.includes(':/') && 
                !backgroundImage.includes(':\\')) {
              backgroundImagePath = path.join(process.cwd(), backgroundImage);
            }
            
            const fileExists = fs.existsSync(backgroundImagePath);
            
            if (fileExists) {
              config.backgroundImage = backgroundImagePath;
              
              if (backgroundOpacity !== undefined) {
                config.backgroundOpacity = parseFloat(backgroundOpacity);
              }
            }
          }
          
          // X·ª≠ l√Ω PDF ƒë·ªÉ x√≥a watermark
          console.log(`B·∫Øt ƒë·∫ßu x√≥a watermark cho file: ${file.name}`);
          
          let cleanResult;
          // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark ch∆∞a
          if (downloadResult.alreadyProcessed) {
            console.log(`‚úÖ File PDF ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω watermark trong qu√° tr√¨nh t·∫£i xu·ªëng, b·ªè qua b∆∞·ªõc x·ª≠ l√Ω watermark l·∫ßn hai`);
            
            // Ch·ªâ c·∫ßn copy file ƒë√£ x·ª≠ l√Ω
            fs.copyFileSync(downloadResult.filePath, outputPath);
            
            cleanResult = {
              success: true,
              filePath: outputPath,
              originalSize: downloadResult.originalSize, 
              processedSize: downloadResult.processedSize,
              processingTime: downloadResult.processingTime
            };
            console.log(`‚úÖ ƒê√£ sao ch√©p file ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: ${file.name}`);
          } else {
            // Th·ª±c hi·ªán x·ª≠ l√Ω watermark n·∫øu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
            cleanResult = await cleanPdf(downloadResult.filePath, outputPath, config);
            console.log(`ƒê√£ x√≥a watermark xong cho file: ${file.name}`);
          }
          
          // T·∫£i l√™n Drive v√†o folder ƒë√≠ch
          console.log(`ƒêang t·∫£i l√™n Drive cho file: ${file.name}`);
          const uploadResult = await uploadFileToDriveFolder(outputPath, `${downloadResult.fileName}`, destinationFolderId);
          console.log(`ƒê√£ t·∫£i l√™n Drive th√†nh c√¥ng cho file: ${file.name}`);
          
          folderResults.push({
            originalFile: file.name,
            processedFile: uploadResult.fileName,
            viewLink: uploadResult.webViewLink,
            downloadLink: uploadResult.downloadLink,
            fileType: 'pdf'
          });
          
        } else if (downloadResult.isImage) {
          console.log(`X·ª≠ l√Ω file ·∫£nh: ${file.name}`);
          // V·ªõi ·∫£nh, kh√¥ng x·ª≠ l√Ω, t·∫£i th·∫≥ng l√™n folder ƒë√≠ch
          console.log(`ƒêang t·∫£i l√™n Drive cho ·∫£nh: ${file.name}`);
          const uploadResult = await uploadFileToDriveFolder(downloadResult.filePath, downloadResult.fileName, destinationFolderId);
          console.log(`ƒê√£ t·∫£i l√™n Drive th√†nh c√¥ng cho ·∫£nh: ${file.name}`);
          
          folderResults.push({
            originalFile: file.name,
            processedFile: uploadResult.fileName,
            viewLink: uploadResult.webViewLink,
            downloadLink: uploadResult.downloadLink,
            fileType: 'image'
          });
          
        } else {
          console.log(`B·ªè qua file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${file.name}`);
          // B·ªè qua c√°c lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
          folderResults.push({
            originalFile: file.name,
            skipped: true,
            reason: 'Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£'
          });
        }
      } catch (fileError) {
        console.error(`L·ªói khi x·ª≠ l√Ω file ${file.name}: ${fileError.message}`);
        // Ghi l·∫°i l·ªói x·ª≠ l√Ω file nh∆∞ng kh√¥ng d·ª´ng to√†n b·ªô qu√° tr√¨nh
        folderResults.push({
          originalFile: file.name,
          error: fileError.message
        });
      } finally {
        // D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m c·ªßa file
        try {
          cleanupTempFiles(outputDir);
          const index = processingFolders.indexOf(outputDir);
          if (index > -1) {
            processingFolders.splice(index, 1);
          }
          console.log(`ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m cho file: ${file.name}`);
        } catch (cleanupError) {
          // B·ªè qua l·ªói d·ªçn d·∫πp
          console.error(`L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: ${cleanupError.message}`);
        }
      }
      
      console.log(`ƒê√£ ho√†n th√†nh x·ª≠ l√Ω file ${i+1}/${folderInfo.files.length}: ${file.name}`);
    }
    
    console.log(`ƒê√£ ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ ${folderInfo.files.length} file trong folder "${folderInfo.folderName}"`);
    
    // Ghi log th√¥ng tin v·ªÅ folder k·∫øt qu·∫£ 
    console.log(`URL folder k·∫øt qu·∫£: ${destinationFolder.webViewLink}`);
    console.log(`T·ªïng s·ªë file ƒë√£ x·ª≠ l√Ω: ${folderResults.length}`);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi link ƒë·∫øn folder ƒë√≠ch
    return NextResponse.json({
      success: true,
      message: `ƒê√£ x·ª≠ l√Ω ${folderResults.length} file trong folder th√†nh c√¥ng.`,
      folderName: destinationFolder.folderName,
      folderLink: destinationFolder.webViewLink,
      folderUrl: destinationFolder.webViewLink,
      driveUrl: destinationFolder.webViewLink,
      url: destinationFolder.webViewLink,
      totalFiles: folderInfo.files.length,
      processedFiles: folderResults,
      folderInfo: {
        id: destinationFolderId,
        name: destinationFolder.folderName,
        url: destinationFolder.webViewLink,
        fileCount: folderResults.length
      }
    }, { status: 200 });
    
  } catch (error) {
    console.error(`L·ªói khi x·ª≠ l√Ω folder: ${error.message}`);
    
    // D·ªçn d·∫πp c√°c th∆∞ m·ª•c t·∫°m n·∫øu c√≤n
    for (const folderPath of processingFolders) {
      if (fs.existsSync(folderPath)) {
        try {
          cleanupTempFiles(folderPath);
        } catch (cleanupError) {
          // B·ªè qua l·ªói cleanup
        }
      }
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: `Kh√¥ng th·ªÉ x·ª≠ l√Ω folder: ${error.message}` 
      },
      { status: 500 }
    );
  }
}

// Test endpoint
export async function GET() {
  try {
    // Ki·ªÉm tra Google Drive token
    const uploadToken = getTokenByType('upload');
    const downloadToken = getTokenByType('download');
    
    const tokenStatus = {
      upload: uploadToken ? true : false,
      download: downloadToken ? true : false
    };
    
    // Ki·ªÉm tra Ghostscript
    const gsPath = findGhostscript();
    const gsStatus = gsPath ? true : false;
    
    return NextResponse.json({
      success: true,
      status: {
        drive: tokenStatus,
        ghostscript: gsStatus,
        gsPath: gsPath || null,
        sharp: sharp ? true : false
      }
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra API'
    }, { status: 500 });
  }
}