import { NextResponse } from 'next/server';
import { verifyServerAuthToken } from '@/utils/server-auth';

/**
 * API route ƒë·ªÉ x√°c th·ª±c token
 * S·ª≠ d·ª•ng b·ªüi c√°c trang client-side v√† server components
 */
export async function POST(request) {
  try {
    console.log('üìù API verify: ƒêang x·ª≠ l√Ω y√™u c·∫ßu x√°c th·ª±c token');
    const body = await request.json();
    const { token } = body;

    if (!token) {
      console.log('‚ùå API verify: Kh√¥ng c√≥ token trong request');
      return NextResponse.json(
        { valid: false, error: 'Kh√¥ng c√≥ token' },
        { status: 400 }
      );
    }

    console.log('üîç API verify: ƒêang x√°c th·ª±c token...');
    // X√°c th·ª±c token v·ªõi Firebase Admin
    const user = await verifyServerAuthToken(token);

    if (!user) {
      console.log('‚ùå API verify: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      return NextResponse.json(
        { valid: false, error: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' },
        { status: 401 }
      );
    }

    console.log('‚úÖ API verify: Token h·ª£p l·ªá, tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng');
    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng n·∫øu token h·ª£p l·ªá
    return NextResponse.json({
      valid: true,
      user: {
        uid: user.uid,
        email: user.email,
        emailVerified: user.emailVerified,
        displayName: user.displayName,
        photoURL: user.photoURL,
        role: user.role || 'user',
        tokenExpiration: user.tokenExpiration || null,
      }
    });

  } catch (error) {
    console.error('‚ùå API verify: L·ªói x√°c th·ª±c token:', error);
    return NextResponse.json(
      { valid: false, error: 'L·ªói x√°c th·ª±c token: ' + error.message },
      { status: 500 }
    );
  }
}

/**
 * API route ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ cookie token
 * S·ª≠ d·ª•ng b·ªüi server components
 */
export async function GET(request) {
  try {
    console.log('üìù API verify GET: ƒêang x·ª≠ l√Ω y√™u c·∫ßu l·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    // L·∫•y token t·ª´ cookie
    const token = request.cookies.get('auth-token')?.value;

    if (!token) {
      console.log('‚ùå API verify GET: Kh√¥ng c√≥ token trong cookie');
      return NextResponse.json(
        { authenticated: false, error: 'Kh√¥ng c√≥ token' },
        { status: 401 }
      );
    }

    console.log('üîç API verify GET: ƒêang x√°c th·ª±c token t·ª´ cookie...');
    // X√°c th·ª±c token v·ªõi Firebase Admin
    const user = await verifyServerAuthToken(token);

    if (!user) {
      console.log('‚ùå API verify GET: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      return NextResponse.json(
        { authenticated: false, error: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' },
        { status: 401 }
      );
    }

    console.log('‚úÖ API verify GET: Token h·ª£p l·ªá, tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng');
    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng n·∫øu token h·ª£p l·ªá
    return NextResponse.json({
      authenticated: true,
      user: {
        uid: user.uid,
        email: user.email,
        emailVerified: user.emailVerified,
        displayName: user.displayName,
        photoURL: user.photoURL,
        role: user.role || 'user',
        tokenExpiration: user.tokenExpiration || null,
      }
    });

  } catch (error) {
    console.error('‚ùå API verify GET: L·ªói x√°c th·ª±c token:', error);
    return NextResponse.json(
      { authenticated: false, error: 'L·ªói x√°c th·ª±c token: ' + error.message },
      { status: 500 }
    );
  }
} 