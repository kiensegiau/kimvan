import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { cookieConfig } from '@/config/env-config';
import { rateLimit } from '@/utils/rate-limit';
import { trackFailedLogin, trackSuccessfulLogin, isIPBlocked, isEmailLocked } from '@/utils/auth-monitor';
import firebaseAdmin from '@/lib/firebase-admin';
import { verifyEmailPassword } from '@/utils/firebase-auth-helper';

// H·∫±ng s·ªë CSRF
const CSRF_COOKIE_NAME = 'csrf-token';
const CSRF_FORM_FIELD = '_csrf';
const CSRF_HEADER_NAME = 'X-CSRF-Token';

// L∆∞u tr·ªØ rate limit localy cho login attempts
const loginRateLimits = new Map();

/**
 * Ki·ªÉm tra CSRF token
 */
async function validateCsrfToken(providedToken) {
  if (!providedToken) return false;
  
  const cookieStore = await cookies();
  const storedToken = cookieStore.get(CSRF_COOKIE_NAME)?.value;
  if (!storedToken) return false;
  
  // So s√°nh token m·ªôt c√°ch an to√†n, tr√°nh timing attacks
  return timingSafeEqual(providedToken, storedToken);
}

/**
 * So s√°nh hai string m·ªôt c√°ch an to√†n, tr√°nh timing attacks
 */
function timingSafeEqual(a, b) {
  if (a.length !== b.length) return false;
  
  let result = 0;
  for (let i = 0; i < a.length; i++) {
    result |= a.charCodeAt(i) ^ b.charCodeAt(i);
  }
  
  return result === 0;
}

/**
 * X·ª≠ l√Ω POST request ƒë·ªÉ ƒëƒÉng nh·∫≠p
 */
export async function POST(request) {
  try {
    console.log('üîí API ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c g·ªçi');
    
    // L·∫•y th√¥ng tin t·ª´ request
    const body = await request.json();
    const { email, password, rememberMe, [CSRF_FORM_FIELD]: csrfToken } = body;
    
    console.log('üìß Email ƒëƒÉng nh·∫≠p:', email);
    console.log('üîê M·∫≠t kh·∫©u c√≥ ƒë∆∞·ª£c cung c·∫•p:', !!password);
    console.log('üîÑ Remember me:', !!rememberMe);
    console.log('üõ°Ô∏è CSRF token c√≥ ƒë∆∞·ª£c cung c·∫•p:', !!csrfToken);

    // L·∫•y IP c·ªßa client
    const ip = request.headers.get('x-forwarded-for') || 'unknown-ip';
    console.log('üåê IP c·ªßa client:', ip);
    
    // Ki·ªÉm tra xem IP c√≥ b·ªã ch·∫∑n kh√¥ng
    const ipBlocked = isIPBlocked(ip);
    console.log('üö´ IP c√≥ b·ªã ch·∫∑n:', ipBlocked);
    if (ipBlocked) {
      return NextResponse.json(
        { error: 'ƒê·ªãa ch·ªâ IP c·ªßa b·∫°n ƒë√£ b·ªã t·∫°m th·ªùi ch·∫∑n do qu√° nhi·ªÅu l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.' },
        { status: 403 }
      );
    }
    
    // Ki·ªÉm tra xem email c√≥ b·ªã t·∫°m kh√≥a kh√¥ng
    const emailLocked = email && isEmailLocked(email);
    console.log('üîí Email c√≥ b·ªã kh√≥a:', emailLocked);
    if (emailLocked) {
      return NextResponse.json(
        { error: 'T√†i kho·∫£n n√†y ƒë√£ b·ªã t·∫°m th·ªùi kh√≥a do qu√° nhi·ªÅu l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.' },
        { status: 403 }
      );
    }
    
    // Ki·ªÉm tra rate limit
    const rateLimitInfo = rateLimit(ip, 5, 15 * 60 * 1000); // 5 l·∫ßn/15 ph√∫t
    console.log('‚è±Ô∏è Rate limit info:', rateLimitInfo);
    
    // N·∫øu qu√° gi·ªõi h·∫°n, tr·∫£ v·ªÅ l·ªói 429
    if (rateLimitInfo.isLimited) {
      console.log('‚ö†Ô∏è Rate limit exceeded');
      // Ghi nh·∫≠n l·∫ßn th·∫•t b·∫°i do rate limit
      if (email) {
        trackFailedLogin(email, ip, 'rate_limit_exceeded');
      }
      
      return NextResponse.json(
        { error: 'Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p, vui l√≤ng th·ª≠ l·∫°i sau.' },
        { 
          status: 429,
          headers: {
            'Retry-After': rateLimitInfo.retryAfter,
            'X-RateLimit-Limit': rateLimitInfo.limit,
            'X-RateLimit-Remaining': rateLimitInfo.remaining,
            'X-RateLimit-Reset': rateLimitInfo.resetTime,
          }
        }
      );
    }
    
    // X√°c th·ª±c CSRF token
    const csrfValid = await validateCsrfToken(csrfToken);
    console.log('üõ°Ô∏è CSRF token h·ª£p l·ªá:', csrfValid);
    if (!csrfValid) {
      // Ghi nh·∫≠n l·∫ßn th·∫•t b·∫°i do CSRF kh√¥ng h·ª£p l·ªá
      if (email) {
        trackFailedLogin(email, ip, 'invalid_csrf');
      }
      
      return NextResponse.json(
        { error: 'CSRF token kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.' },
        { status: 403 }
      );
    }
    
    // Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
    if (!email || !password) {
      console.log('‚ö†Ô∏è Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u');
      return NextResponse.json(
        { error: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' },
        { status: 400 }
      );
    }
    
    try {
      console.log('üîß NODE_ENV:', process.env.NODE_ENV);
      
      // Lu√¥n s·ª≠ d·ª•ng Firebase Auth th·ª±c, b·ªè qua ch·∫ø ƒë·ªô gi·∫£ l·∫≠p
      console.log('üöÄ ƒêang s·ª≠ d·ª•ng Firebase Auth API ƒë·ªÉ x√°c th·ª±c');
      try {
        // X√°c th·ª±c ng∆∞·ªùi d√πng b·∫±ng email v√† m·∫≠t kh·∫©u
        console.log('üë§ ƒêang x√°c th·ª±c ng∆∞·ªùi d√πng v·ªõi email:', email);
        const authResult = await verifyEmailPassword(email, password);
        console.log('‚úÖ X√°c th·ª±c th√†nh c√¥ng, uid:', authResult.uid);
        
        // T·∫°o custom token cho ng∆∞·ªùi d√πng
        console.log('üîë ƒêang t·∫°o custom token cho uid:', authResult.uid);
        const customToken = await firebaseAdmin.auth().createCustomToken(authResult.uid);
        console.log('‚úÖ ƒê√£ t·∫°o custom token th√†nh c√¥ng');
        
        // Thi·∫øt l·∫≠p th·ªùi gian s·ªëng c·ªßa cookie
        const maxAge = rememberMe ? cookieConfig.extendedMaxAge : cookieConfig.defaultMaxAge;
        console.log('‚è±Ô∏è Th·ªùi gian s·ªëng c·ªßa cookie:', maxAge);
        
        // Thi·∫øt l·∫≠p cookie token
        console.log('üç™ ƒêang thi·∫øt l·∫≠p cookie auth token');
        const cookieStore = await cookies();
        await cookieStore.set(cookieConfig.authCookieName, customToken, {
          path: '/',
          maxAge,
          httpOnly: true,
          secure: cookieConfig.secure,
          sameSite: cookieConfig.sameSite,
        });
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p cookie th√†nh c√¥ng');
        
        // Reset rate limit counter n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        if (loginRateLimits.has(ip)) {
          loginRateLimits.delete(ip);
        }
        
        // Ghi nh·∫≠n ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        trackSuccessfulLogin(email, ip, authResult.uid);
        
        // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng t·ª´ Firebase Admin
        console.log('üë§ ƒêang l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng');
        const userRecord = await firebaseAdmin.auth().getUser(authResult.uid);
        console.log('‚úÖ ƒê√£ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng');
        
        // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng (kh√¥ng bao g·ªìm th√¥ng tin nh·∫°y c·∫£m)
        return NextResponse.json({
          success: true,
          user: {
            uid: userRecord.uid,
            email: userRecord.email,
            emailVerified: userRecord.emailVerified,
            displayName: userRecord.displayName || null,
            photoURL: userRecord.photoURL || null,
          }
        });
      } catch (error) {
        // Ghi nh·∫≠n l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
        console.error('‚ùå L·ªói x√°c th·ª±c:', error);
        console.error('‚ùå Error message:', error.message);
        console.error('‚ùå Error stack:', error.stack);
        
        trackFailedLogin(email, ip, error.message || 'unknown_error');
        
        // X·ª≠ l√Ω l·ªói Firebase Auth
        let message = 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng';
        let status = 401;
        
        if (error.message === 'EMAIL_NOT_FOUND' || error.message === 'INVALID_PASSWORD') {
          message = 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng';
        } else if (error.message === 'USER_DISABLED') {
          message = 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a';
          status = 403;
        } else if (error.message === 'TOO_MANY_ATTEMPTS_TRY_LATER') {
          message = 'Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t';
          status = 429;
        }
        
        return NextResponse.json({ error: message }, { status });
      }
      
    } catch (error) {
      // Ghi nh·∫≠n l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
      console.error('‚ùå L·ªói ngo√†i c√πng:', error);
      console.error('‚ùå Error code:', error.code);
      console.error('‚ùå Error message:', error.message);
      console.error('‚ùå Error stack:', error.stack);
      
      trackFailedLogin(email, ip, error.code || 'unknown_error');
      
      // X·ª≠ l√Ω l·ªói Firebase Auth
      let message = 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng nh·∫≠p';
      let status = 500;
      
      if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
        message = 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng';
        status = 401;
      } else if (error.code === 'auth/too-many-requests') {
        message = 'Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t';
        status = 429;
      } else if (error.code === 'auth/user-disabled') {
        message = 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a';
        status = 403;
      }
      
      return NextResponse.json({ error: message }, { status });
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói server khi ƒëƒÉng nh·∫≠p:', error);
    
    return NextResponse.json(
      { error: 'ƒê√£ x·∫£y ra l·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.' },
      { status: 500 }
    );
  }
} 