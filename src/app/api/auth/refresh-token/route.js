import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { cookieConfig } from '@/config/env-config';
import firebaseAdmin from '@/lib/firebase-admin';
import { verifyServerAuthToken } from '@/utils/server-auth';

/**
 * API route ƒë·ªÉ l√†m m·ªõi token x√°c th·ª±c
 * S·∫Ω ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông b·ªüi middleware khi token g·∫ßn h·∫øt h·∫°n
 */
export async function POST(request) {
  try {
    console.log('üîÑ API refresh-token: B·∫Øt ƒë·∫ßu qu√° tr√¨nh l√†m m·ªõi token');
    // L·∫•y d·ªØ li·ªáu t·ª´ request body
    const body = await request.json();
    const { token: tokenFromBody, rememberMe } = body;
    
    // L·∫•y token hi·ªán t·∫°i t·ª´ cookie ho·∫∑c request body
    const cookieStore = cookies();
    const authCookie = cookieStore.get(cookieConfig.authCookieName);
    const tokenFromCookie = authCookie?.value;
    
    // ∆Øu ti√™n s·ª≠ d·ª•ng token t·ª´ body n·∫øu c√≥
    const currentToken = tokenFromBody || tokenFromCookie;
    
    // N·∫øu kh√¥ng c√≥ token, tr·∫£ v·ªÅ l·ªói
    if (!currentToken) {
      console.log('‚ùå API refresh-token: Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
      return NextResponse.json(
        { success: false, error: 'Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c' },
        { status: 401 }
      );
    }

    console.log('üîç API refresh-token: ƒêang x√°c th·ª±c token hi·ªán t·∫°i...');
    // X√°c th·ª±c token hi·ªán t·∫°i
    const user = await verifyServerAuthToken(currentToken);
    
    if (!user) {
      console.log('‚ùå API refresh-token: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      return NextResponse.json(
        { success: false, error: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' },
        { status: 401 }
      );
    }

    console.log('‚úÖ API refresh-token: Token h·ª£p l·ªá, ƒëang t·∫°o token m·ªõi...');
    // T·∫°o token m·ªõi v·ªõi th·ªùi gian s·ªëng d√†i h∆°n
    const customToken = await firebaseAdmin.auth().createCustomToken(user.uid);
    
    // ƒê·ªïi custom token th√†nh ID token b·∫±ng c√°ch g·ªçi Firebase Auth REST API
    const firebaseApiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY;
    if (!firebaseApiKey) {
      console.log('‚ùå API refresh-token: Firebase API Key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
      throw new Error('Firebase API Key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    
    console.log('üîÑ API refresh-token: ƒêang ƒë·ªïi custom token th√†nh ID token...');
    // G·ªçi Firebase Auth REST API ƒë·ªÉ ƒë·ªïi custom token th√†nh ID token
    const tokenResponse = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=${firebaseApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          token: customToken,
          returnSecureToken: true,
        }),
      }
    );
    
    const tokenData = await tokenResponse.json();
    if (!tokenResponse.ok) {
      console.error('‚ùå API refresh-token: L·ªói khi ƒë·ªïi custom token th√†nh ID token:', tokenData.error);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o ID token m·ªõi');
    }
    
    // L·∫•y ID token m·ªõi t·ª´ k·∫øt qu·∫£
    const newIdToken = tokenData.idToken;
    console.log('‚úÖ API refresh-token: ƒê√£ t·∫°o ID token m·ªõi th√†nh c√¥ng');
    
    // Thi·∫øt l·∫≠p th·ªùi gian s·ªëng c·ªßa cookie
    const maxAge = rememberMe ? cookieConfig.extendedMaxAge : cookieConfig.defaultMaxAge;
    console.log(`üç™ API refresh-token: Thi·∫øt l·∫≠p cookie v·ªõi th·ªùi gian s·ªëng ${maxAge} gi√¢y`);
    
    // Thi·∫øt l·∫≠p cookie v·ªõi token m·ªõi
    await cookieStore.set(cookieConfig.authCookieName, newIdToken, {
      path: '/',
      maxAge,
      httpOnly: true,
      secure: cookieConfig.secure,
      sameSite: cookieConfig.sameSite,
    });

    console.log('‚úÖ API refresh-token: Ho√†n t·∫•t qu√° tr√¨nh l√†m m·ªõi token');
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng v·ªõi token m·ªõi
    return NextResponse.json({
      success: true,
      message: 'Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi th√†nh c√¥ng',
      token: newIdToken
    });
  } catch (error) {
    console.error('‚ùå API refresh-token: L·ªói khi l√†m m·ªõi token:', error);
    return NextResponse.json(
      { success: false, error: 'L·ªói khi l√†m m·ªõi token: ' + error.message },
      { status: 500 }
    );
  }
} 