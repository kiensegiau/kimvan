import { useState, useEffect } from 'react';

const useUserData = () => {
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Gi·∫£m th·ªùi gian cache xu·ªëng 1 ph√∫t ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n
  const CACHE_TTL = 1 * 60 * 1000; // 1 ph√∫t

  useEffect(() => {
    // T·∫°o bi·∫øn ƒë·ªÉ ki·ªÉm tra xem component c√≤n mounted kh√¥ng
    let isMounted = true;

    const fetchUserData = async (forceRefresh = false) => {
      try {
        setLoading(true);
        
        // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu user c√≥ hi·ªáu l·ª±c trong global cache kh√¥ng
        const now = Date.now();
        if (!forceRefresh && window.__USER_DATA_CACHE__ && 
            window.__USER_DATA_TIMESTAMP__ && 
            (now - window.__USER_DATA_TIMESTAMP__) < CACHE_TTL) {
          if (isMounted) {
            setUserData(window.__USER_DATA_CACHE__);
            setLoading(false);
          }
          return;
        }
        
        // TH√äM: Ki·ªÉm tra th√¥ng tin t·ª´ cookie user_info tr∆∞·ªõc
        try {
          console.log('üç™ ƒêang ki·ªÉm tra cookie user_info...');
          const cookies = document.cookie;
          console.log('üìã Danh s√°ch cookies:', cookies);
          
          const userInfoCookie = cookies
            .split('; ')
            .find(row => row.startsWith('user_info='));
            
          if (userInfoCookie) {
            const cookieValue = userInfoCookie.split('=')[1];
            const decodedValue = decodeURIComponent(cookieValue);
            console.log('üîÑ Cookie user_info ƒë√£ gi·∫£i m√£:', decodedValue);
            
            try {
              const parsedUserInfo = JSON.parse(decodedValue);
              console.log('‚úÖ ƒê√£ t√¨m th·∫•y user_info cookie:', parsedUserInfo);
              
              if (parsedUserInfo && parsedUserInfo.uid) {
                // T√≠nh to√°n hasViewAllPermission
                const hasViewAllPermission = parsedUserInfo.canViewAllCourses === true || 
                  (parsedUserInfo.permissions && Array.isArray(parsedUserInfo.permissions) && 
                   parsedUserInfo.permissions.includes('view_all_courses'));

                // Th√™m hasViewAllPermission v√†o userData
                const enhancedUserData = {
                  ...parsedUserInfo,
                  hasViewAllPermission
                };
                
                // L∆∞u v√†o global cache
                window.__USER_DATA_CACHE__ = enhancedUserData;
                window.__USER_DATA_TIMESTAMP__ = Date.now();
                
                if (isMounted) {
                  setUserData(enhancedUserData);
                  setLoading(false);
                }
                
                // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o localStorage ƒë·ªÉ d√πng khi offline
                try {
                  localStorage.setItem('userData', JSON.stringify(enhancedUserData));
                  localStorage.setItem('userDataTimestamp', Date.now().toString());
                } catch (e) {
                  console.error('Kh√¥ng th·ªÉ l∆∞u v√†o localStorage:', e);
                }
                
                return; // Kh√¥ng c·∫ßn g·ªçi API n·∫øu ƒë√£ c√≥ th√¥ng tin t·ª´ cookie
              }
            } catch (parseError) {
              console.error('‚ùå L·ªói khi parse JSON t·ª´ cookie:', parseError);
            }
          } else {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user_info cookie, s·∫Ω ti·∫øp t·ª•c g·ªçi API');
          }
        } catch (cookieError) {
          console.error('‚ùå L·ªói khi ƒë·ªçc cookie user_info:', cookieError);
        }
        
        // Lu√¥n ∆∞u ti√™n l·∫•y d·ªØ li·ªáu t·ª´ API n·∫øu kh√¥ng c√≥ cookie
        console.log('ƒêang g·ªçi API users/me ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng...');
        
        // T·∫°o danh s√°ch c√°c endpoint ƒë·ªÉ th·ª≠
        const endpoints = [
          '/api/users/me',
          '/api/auth/verify', // Th·ª≠ endpoint n√†y n·∫øu /api/users/me kh√¥ng ho·∫°t ƒë·ªông
          '/api/auth/user-role' // Th·ª≠ endpoint n√†y n·∫øu c·∫£ hai kh√¥ng ho·∫°t ƒë·ªông
        ];
        
        // L∆∞u tr·ªØ l·ªói t·ª´ t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÉ ghi log
        const allErrors = [];
        let userData = null;
        
        // Th·ª≠ t·ª´ng endpoint cho ƒë·∫øn khi th√†nh c√¥ng
        for (const endpoint of endpoints) {
          try {
            console.log(`ƒêang th·ª≠ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ ${endpoint}...`);
            // Prepare options for fetch
            const options = {
              method: endpoint === '/api/auth/user-role' ? 'POST' : 'GET', // Use POST for user-role endpoint
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              credentials: 'include', // ƒê·∫£m b·∫£o g·ª≠i cookie
              // Th√™m timestamp ƒë·ªÉ tr√°nh cache
              cache: 'no-cache',
              // Th√™m timeout ƒë·ªÉ tr√°nh fetch qu√° l√¢u
              signal: AbortSignal.timeout(10000) // 10 gi√¢y timeout
            };
            
            // Add body for POST requests
            if (endpoint === '/api/auth/user-role') {
              options.body = JSON.stringify({ uid: 'anonymous-fallback' });
            }
            
            const response = await fetch(`${endpoint}?_=${now}`, options);
            
            if (response.ok) {
              const contentType = response.headers.get('content-type');
              if (contentType && contentType.includes('application/json')) {
                const result = await response.json();
                
                // X·ª≠ l√Ω d·ªØ li·ªáu kh√°c nhau t·ª´ c√°c endpoint kh√°c nhau
                if (endpoint === '/api/users/me' && result.success && result.user) {
                  userData = result.user;
                  break;
                } else if (endpoint === '/api/auth/verify' && result.valid && result.user) {
                  userData = result.user;
                  break;
                } else if (endpoint === '/api/auth/user-role' && result.success) {
                  // T·∫°o d·ªØ li·ªáu c∆° b·∫£n t·ª´ th√¥ng tin vai tr√≤
                  userData = {
                    uid: result.uid || 'unknown',
                    role: result.role || 'user',
                    roleDisplayName: getRoleDisplayName(result.role || 'user'),
                    additionalInfo: {},
                    enrollments: []
                  };
                  break;
                }
              }
            } else {
              // L∆∞u l·∫°i l·ªói chi ti·∫øt h∆°n cho vi·ªác debug
              const errorStatus = response.status;
              const errorText = await response.text().catch(() => 'No response text');
              allErrors.push(`${endpoint}: ${errorStatus} ${errorText.substring(0, 100)}`);
              
              // Handle specific error cases
              if (endpoint === '/api/auth/user-role' && errorStatus === 405) {
                console.warn('API user-role requires POST method - retrying with proper payload');
                // Try again with proper request body if Method Not Allowed
                try {
                  const retryResponse = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'Accept': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ uid: 'anonymous-fallback' }), // Provide a fallback UID
                    signal: AbortSignal.timeout(10000),
                    cache: 'no-cache'
                  });
                  
                  if (retryResponse.ok) {
                    const retryData = await retryResponse.json();
                    if (retryData.success) {
                      userData = {
                        uid: retryData.uid || 'unknown',
                        role: retryData.role || 'user',
                        roleDisplayName: getRoleDisplayName(retryData.role || 'user'),
                        additionalInfo: {},
                        enrollments: []
                      };
                      break;
                    }
                  }
                } catch (retryError) {
                  console.warn('Retry failed:', retryError.message);
                }
              }
            }
          } catch (fetchError) {
            allErrors.push(`${endpoint}: ${fetchError.message}`);
          }
        }
        
        // N·∫øu l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ b·∫•t k·ª≥ endpoint n√†o
        if (userData) {
          console.log('‚úÖ L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng th√†nh c√¥ng:', userData);
          
          // T√≠nh to√°n canViewAllCourses d·ª±a tr√™n permissions
          userData.canViewAllCourses = userData.canViewAllCourses === true || 
            (userData.permissions && Array.isArray(userData.permissions) && 
             userData.permissions.includes('view_all_courses'));
          
          // L∆∞u v√†o global cache ƒë·ªÉ c√°c component kh√°c s·ª≠ d·ª•ng
          window.__USER_DATA_CACHE__ = userData;
          window.__USER_DATA_TIMESTAMP__ = Date.now();
          
          // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o localStorage ƒë·ªÉ d√πng khi offline
          try {
            localStorage.setItem('userData', JSON.stringify(userData));
            localStorage.setItem('userDataTimestamp', Date.now().toString());
            localStorage.setItem('userTokenHash', 'auto-generated');
          } catch (e) {
            console.error('Kh√¥ng th·ªÉ l∆∞u v√†o localStorage:', e);
          }
          
          if (isMounted) {
            setUserData(userData);
          }
        } else {
          // N·∫øu t·∫•t c·∫£ c√°c endpoint ƒë·ªÅu th·∫•t b·∫°i, ghi log l·ªói
          console.warn('T·∫•t c·∫£ c√°c endpoint ƒë·ªÅu th·∫•t b·∫°i:', allErrors);
          
          // Th·ª≠ l·∫•y t·ª´ localStorage
          try {
            console.log('Th·ª≠ l·∫•y d·ªØ li·ªáu t·ª´ localStorage do API th·∫•t b·∫°i');
            const cachedData = localStorage.getItem('userData');
            const timestamp = localStorage.getItem('userDataTimestamp');
            const now = Date.now();
            
            // Ch·ªâ s·ª≠ d·ª•ng cache n·∫øu n√≥ t·ªìn t·∫°i v√† kh√¥ng qu√° c≈©
            if (cachedData && timestamp && (now - parseInt(timestamp)) < CACHE_TTL) {
              const parsedData = JSON.parse(cachedData);
              console.log('‚úÖ S·ª≠ d·ª•ng d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ cache:', parsedData);
              
              // L∆∞u v√†o global cache
              window.__USER_DATA_CACHE__ = parsedData;
              window.__USER_DATA_TIMESTAMP__ = parseInt(timestamp);
              
              if (isMounted) {
                setUserData(parsedData);
              }
            } else {
              // Fallback user data khi kh√¥ng c√≥ cache v√† API th·∫•t b·∫°i
              console.log('‚ö†Ô∏è Kh√¥ng c√≥ cache ho·∫∑c cache ƒë√£ h·∫øt h·∫°n. S·ª≠ d·ª•ng d·ªØ li·ªáu ng∆∞·ªùi d√πng m·∫∑c ƒë·ªãnh');
              const defaultUser = getDefaultUser();
              
              // L∆∞u v√†o global cache
              window.__USER_DATA_CACHE__ = defaultUser;
              window.__USER_DATA_TIMESTAMP__ = now;
              
              if (isMounted) {
                setUserData(defaultUser);
              }
            }
          } catch (storageErr) {
            console.error('Kh√¥ng th·ªÉ ƒë·ªçc t·ª´ localStorage:', storageErr);
            // Fallback user as last resort
            const defaultUser = getDefaultUser();
            
            // L∆∞u v√†o global cache
            window.__USER_DATA_CACHE__ = defaultUser;
            window.__USER_DATA_TIMESTAMP__ = Date.now();
            
            if (isMounted) {
              setUserData(defaultUser);
            }
          }
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
        
        if (isMounted) {
          setError(error.message);
        }
        
        // Fallback to localStorage if API request fails
        try {
          const cachedData = localStorage.getItem('userData');
          if (cachedData) {
            const parsedData = JSON.parse(cachedData);
            console.log('API l·ªói, s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ cache:', parsedData);
            
            // L∆∞u v√†o global cache
            window.__USER_DATA_CACHE__ = parsedData;
            window.__USER_DATA_TIMESTAMP__ = Date.now();
            
            if (isMounted) {
              setUserData(parsedData);
            }
          } else {
            console.log('API l·ªói, kh√¥ng c√≥ cache. S·ª≠ d·ª•ng d·ªØ li·ªáu ng∆∞·ªùi d√πng m·∫∑c ƒë·ªãnh');
            const defaultUser = getDefaultUser();
            
            // L∆∞u v√†o global cache
            window.__USER_DATA_CACHE__ = defaultUser;
            window.__USER_DATA_TIMESTAMP__ = Date.now();
            
            if (isMounted) {
              setUserData(defaultUser);
            }
          }
        } catch (storageErr) {
          console.error('Kh√¥ng th·ªÉ ƒë·ªçc t·ª´ localStorage:', storageErr);
          // Fallback user as absolute last resort
          const defaultUser = getDefaultUser();
          
          // L∆∞u v√†o global cache
          window.__USER_DATA_CACHE__ = defaultUser;
          window.__USER_DATA_TIMESTAMP__ = Date.now();
          
          if (isMounted) {
            setUserData(defaultUser);
          }
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    // Th√™m event listener ƒë·ªÉ l√†m m·ªõi d·ªØ li·ªáu ng∆∞·ªùi d√πng khi chuy·ªÉn trang
    const handleRouteChange = () => {
      console.log('ƒê∆∞·ªùng d·∫´n thay ƒë·ªïi, l√†m m·ªõi th√¥ng tin ng∆∞·ªùi d√πng');
      fetchUserData(true); // Force refresh khi chuy·ªÉn trang
    };
    
    // Th√™m event listener cho navigation events
    if (typeof window !== 'undefined') {
      window.addEventListener('popstate', handleRouteChange);
      
      // Cho Next.js router events n·∫øu c√≥
      try {
        const { Router } = require('next/router');
        Router.events.on('routeChangeComplete', handleRouteChange);
      } catch (e) {
        // B·ªè qua n·∫øu kh√¥ng th·ªÉ s·ª≠ d·ª•ng Next.js Router events
      }
    }

    fetchUserData();

    return () => {
      isMounted = false;
      // Cleanup event listeners
      if (typeof window !== 'undefined') {
        window.removeEventListener('popstate', handleRouteChange);
        
        try {
          const { Router } = require('next/router');
          Router.events.off('routeChangeComplete', handleRouteChange);
        } catch (e) {
          // B·ªè qua n·∫øu kh√¥ng th·ªÉ s·ª≠ d·ª•ng Next.js Router events
        }
      }
    };
  }, []);

  const getDefaultUser = () => {
    return {
      uid: 'anonymous',
      email: 'guest@example.com',
      displayName: 'Kh√°ch',
      role: 'guest',
      roleDisplayName: 'Kh√°ch',
      additionalInfo: {},
      enrollments: []
    };
  };

  function getRoleDisplayName(role) {
    const roleMap = {
      'admin': 'Qu·∫£n tr·ªã vi√™n',
      'user': 'Ng∆∞·ªùi d√πng',
      'ctv': 'C√¥ng t√°c vi√™n',
      'staff': 'Nh√¢n vi√™n',
      'instructor': 'Gi·∫£ng vi√™n',
      'student': 'H·ªçc vi√™n',
      'guest': 'Kh√°ch'
    };
    
    return roleMap[role] || role;
  }

  // H√†m ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu ng∆∞·ªùi d√πng m·ªôt c√°ch ch·ªß ƒë·ªông
  const refreshUserData = async () => {
    console.log('‚ü≥ ƒêang t·∫£i l·∫°i th√¥ng tin ng∆∞·ªùi d√πng...');
    setLoading(true);
    
    try {
      // X√≥a cache
      clearUserDataCache();
      
      // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin m·ªõi nh·∫•t
      const response = await fetch('/api/users/me?_=' + Date.now(), {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        credentials: 'include',
        cache: 'no-cache'
      });
      
      if (response.ok) {
        const result = await response.json();
        
        if (result.success && result.user) {
          // C·∫≠p nh·∫≠t cache v√† state
          window.__USER_DATA_CACHE__ = result.user;
          window.__USER_DATA_TIMESTAMP__ = Date.now();
          
          // C·∫≠p nh·∫≠t localStorage
          try {
            localStorage.setItem('userData', JSON.stringify(result.user));
            localStorage.setItem('userDataTimestamp', Date.now().toString());
          } catch (e) {
            console.error('Kh√¥ng th·ªÉ l∆∞u v√†o localStorage:', e);
          }
          
          setUserData(result.user);
          console.log('‚úÖ T·∫£i l·∫°i th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng');
          return true;
        }
      }
      
      console.error('‚ùå Kh√¥ng th·ªÉ t·∫£i l·∫°i th√¥ng tin ng∆∞·ªùi d√πng:', response.status);
      return false;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i l·∫°i th√¥ng tin ng∆∞·ªùi d√πng:', error);
      return false;
    } finally {
      setLoading(false);
    }
  };

  // H√†m x√≥a cache ng∆∞·ªùi d√πng
  const clearUserDataCache = () => {
    console.log('üßπ ƒêang x√≥a cache th√¥ng tin ng∆∞·ªùi d√πng...');
    
    // X√≥a cache to√†n c·ª•c
    if (typeof window !== 'undefined') {
      window.__USER_DATA_CACHE__ = null;
      window.__USER_DATA_TIMESTAMP__ = 0;
    }
    
    // X√≥a localStorage
    try {
      localStorage.removeItem('userData');
      localStorage.removeItem('userDataTimestamp');
    } catch (e) {
      console.error('Kh√¥ng th·ªÉ x√≥a t·ª´ localStorage:', e);
    }
  };

  return {
    userData,
    loading,
    error,
    refreshUserData,
    clearUserDataCache
  };
};

export default useUserData; 