import { NextResponse } from 'next/server';
import { publicPaths, routes, cookieConfig } from '@/config/env-config';
// Kh√¥ng import config t·ª´ middleware.config.js

// C√°c Security Headers c∆° b·∫£n
const securityHeaders = [
  {
    key: 'X-DNS-Prefetch-Control',
    value: 'on'
  },
  {
    key: 'X-XSS-Protection',
    value: '1; mode=block'
  },
  {
    key: 'X-Frame-Options',
    value: 'SAMEORIGIN'
  },
  {
    key: 'X-Content-Type-Options',
    value: 'nosniff'
  },
  {
    key: 'Referrer-Policy',
    value: 'strict-origin-when-cross-origin'
  },
  {
    key: 'Permissions-Policy',
    value: 'camera=(), microphone=(), geolocation=(), interest-cohort=()'
  },
  {
    key: 'Strict-Transport-Security',
    value: 'max-age=63072000; includeSubDomains; preload'
  }
];

// Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n c√≥ thu·ªôc danh s√°ch c√¥ng khai kh√¥ng
const isPublicPath = (path) => {
  return publicPaths.some(publicPath => path.startsWith(publicPath));
};

// Cache k·∫øt qu·∫£ ki·ªÉm tra ƒë∆∞·ªùng d·∫´n public ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
const publicPathCache = new Map();

// ƒê∆∞·ªùng d·∫´n API x√°c th·ª±c token
const TOKEN_VERIFY_API = '/api/auth/verify';
const TOKEN_REFRESH_API = '/api/auth/refresh-token';
const USER_ROLE_API = '/api/auth/user-role';

// ƒê∆∞·ªùng d·∫´n API kh√¥ng c·∫ßn k·∫øt n·ªëi DB
const NO_DB_API_PATHS = [
  '/api/auth/verify',
  '/api/auth/refresh-token',
  '/api/auth/user-role',
  '/api/auth/logout',
  '/api/auth/admin/check-permission',
  '/api/drive/check-file-type',
  '/api/drive/download',
  '/api/drive/download-direct',
  '/api/drive/refresh-tokens',
  '/api/test-browser'
];

// Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n c√≥ c·∫ßn k·∫øt n·ªëi DB kh√¥ng
const needsDatabaseConnection = (path) => {
  return path.startsWith('/api/') && !NO_DB_API_PATHS.some(apiPath => path.startsWith(apiPath));
};

// Email ƒë∆∞·ª£c ph√©p truy c·∫≠p trang admin - kh√¥ng c√≤n c·∫ßn thi·∫øt v√¨ s·∫Ω ki·ªÉm tra theo role
// const ADMIN_EMAIL = process.env.NEXT_PUBLIC_ADMIN_EMAIL || 'phanhuukien2001@gmail.com';
// console.log('üîß Middleware - Email admin ƒë∆∞·ª£c c·∫•u h√¨nh:', ADMIN_EMAIL);

// Log kh·ªüi ƒë·ªông middleware
console.log('üö® MIDDLEWARE.JS LOADED');

// H√†m th√™m security headers v√†o response
function addSecurityHeaders(response) {
  securityHeaders.forEach(header => {
    response.headers.set(header.key, header.value);
  });
  return response;
}

export async function middleware(request) {
  const { pathname } = request.nextUrl;
  // Debug: log pathname ƒë·ªÉ ki·ªÉm tra
  console.log('üîé middleware pathname:', pathname);

  // √Åp d·ª•ng security headers cho t·∫•t c·∫£ c√°c request
  const response = NextResponse.next();
  securityHeaders.forEach(header => {
    response.headers.set(header.key, header.value);
  });

  // Lo·∫°i tr·ª´ c√°c API x√°c th·ª±c kh·ªèi middleware ƒë·ªÉ tr√°nh l·∫∑p
  if (
    pathname.startsWith(TOKEN_VERIFY_API) ||
    pathname.startsWith(TOKEN_REFRESH_API) ||
    pathname.startsWith(USER_ROLE_API) ||
    pathname.startsWith('/api/auth/logout') ||
    pathname.startsWith('/api/auth/admin/check-permission')
  ) {
    return response;
  }

  // Ki·ªÉm tra v√† cache k·∫øt qu·∫£ cho ƒë∆∞·ªùng d·∫´n c√¥ng khai
  if (publicPathCache.has(pathname)) {
    const isPublic = publicPathCache.get(pathname);
    if (isPublic) {
      return addSecurityHeaders(response);
    }
  }

  const pathIsPublic = isPublicPath(pathname);
  publicPathCache.set(pathname, pathIsPublic);
  
  // Kh√¥ng ki·ªÉm tra x√°c th·ª±c cho c√°c ƒë∆∞·ªùng d·∫´n c√¥ng khai
  if (pathIsPublic) {
    return addSecurityHeaders(response);
  }

  // L·∫•y token t·ª´ cookie cho t·∫•t c·∫£ c√°c ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c b·∫£o v·ªá
  // Danh s√°ch c√°c t√™n cookie c√≥ th·ªÉ ch·ª©a token
  const possibleCookieNames = [
    cookieConfig.authCookieName,
    'auth-token',
    'authToken',
    '__Secure-authjs.session-token'
  ];
  
  let token = null;
  
  // Ki·ªÉm tra t·ª´ng cookie c√≥ th·ªÉ ch·ª©a token
  for (const cookieName of possibleCookieNames) {
    const cookieValue = request.cookies.get(cookieName)?.value;
    if (cookieValue && cookieValue.trim() !== '') {
      token = cookieValue;
      break;
    }
  }
  
  // Ki·ªÉm tra token c√≥ t·ªìn t·∫°i v√† kh√¥ng ph·∫£i l√† chu·ªói r·ªóng
  if (!token || token.trim() === '') {
    const rawPathname = pathname;
    if (pathname.startsWith('/api/')) {
      // N·∫øu l√† API, tr·∫£ v·ªÅ JSON l·ªói 401
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    } else {
      // N·∫øu l√† route th∆∞·ªùng, redirect v·ªÅ login
      const redirectUrl = new URL(routes.login, request.url);
      redirectUrl.searchParams.set('returnUrl', rawPathname);
      const redirectResponse = NextResponse.redirect(redirectUrl);
      return addSecurityHeaders(redirectResponse);
    }
  }

  // X√°c th·ª±c token v·ªõi server tr∆∞·ªõc khi cho ph√©p truy c·∫≠p
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    // G·ªçi API x√°c th·ª±c token (d√πng URL ƒë·∫ßy ƒë·ªß)
    const verifyResponse = await fetch(`${baseUrl}${TOKEN_VERIFY_API}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ token }),
    });

    let user;
    let userRole;

    if (!verifyResponse.ok) {
      // Th·ª≠ l√†m m·ªõi token (d√πng URL ƒë·∫ßy ƒë·ªß)
      const refreshResponse = await fetch(`${baseUrl}${TOKEN_REFRESH_API}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          token,
          rememberMe: true
        })
      });
      
      // N·∫øu kh√¥ng th·ªÉ l√†m m·ªõi token, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      if (!refreshResponse.ok) {
        const redirectUrl = new URL(routes.login, request.url);
        redirectUrl.searchParams.set('returnUrl', pathname);
        const redirectResponse = NextResponse.redirect(redirectUrl);
        
        // X√≥a cookie token kh√¥ng h·ª£p l·ªá
        redirectResponse.cookies.set({
          name: cookieConfig.authCookieName,
          value: '',
          expires: new Date(0),
          path: '/',
        });
        
        return addSecurityHeaders(redirectResponse);
      }
      
      // N·∫øu l√†m m·ªõi token th√†nh c√¥ng, l·∫•y token m·ªõi v√† ti·∫øp t·ª•c
      const refreshData = await refreshResponse.json();
      
      if (!refreshData.success || !refreshData.token) {
        const redirectUrl = new URL(routes.login, request.url);
        redirectUrl.searchParams.set('returnUrl', pathname);
        const redirectResponse = NextResponse.redirect(redirectUrl);
        
        // X√≥a cookie token kh√¥ng h·ª£p l·ªá
        redirectResponse.cookies.set({
          name: cookieConfig.authCookieName,
          value: '',
          expires: new Date(0),
          path: '/',
        });
        
        return addSecurityHeaders(redirectResponse);
      }
      
      // C·∫≠p nh·∫≠t token m·ªõi v√†o cookie
      const maxAge = 60 * 60 * 24 * 30; // 30 ng√†y
      response.cookies.set({
        name: cookieConfig.authCookieName,
        value: refreshData.token,
        path: '/',
        maxAge: maxAge,
        httpOnly: true,
        secure: cookieConfig.secure,
        sameSite: cookieConfig.sameSite,
      });
      
      // C·∫≠p nh·∫≠t token ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c b∆∞·ªõc ti·∫øp theo
      token = refreshData.token;
      
      // G·ªçi l·∫°i API x√°c th·ª±c v·ªõi token m·ªõi (d√πng URL ƒë·∫ßy ƒë·ªß)
      const reVerifyResponse = await fetch(`${baseUrl}${TOKEN_VERIFY_API}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token }),
      });
      
      if (!reVerifyResponse.ok) {
        const redirectUrl = new URL(routes.login, request.url);
        redirectUrl.searchParams.set('returnUrl', pathname);
        const redirectResponse = NextResponse.redirect(redirectUrl);
        return addSecurityHeaders(redirectResponse);
      }
      
      const verifyData = await reVerifyResponse.json();
      
      // N·∫øu token m·ªõi kh√¥ng h·ª£p l·ªá, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      if (!verifyData.valid) {
        const redirectUrl = new URL(routes.login, request.url);
        redirectUrl.searchParams.set('returnUrl', pathname);
        const redirectResponse = NextResponse.redirect(redirectUrl);
        return addSecurityHeaders(redirectResponse);
      }
      
      // S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ token m·ªõi ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
      user = verifyData.user;
      
      // L·∫•y role t·ª´ MongoDB th√¥ng qua API (d√πng URL ƒë·∫ßy ƒë·ªß)
      userRole = user.role || 'user';
      try {
        const roleResponse = await fetch(`${baseUrl}${USER_ROLE_API}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ uid: user.uid }),
        });
        
        if (roleResponse.ok) {
          const roleData = await roleResponse.json();
          if (roleData.success && roleData.role) {
            userRole = roleData.role;
          }
        } else {
          console.error('L·ªói khi g·ªçi API role:', await roleResponse.text());
        }
      } catch (roleError) {
        console.error('L·ªói khi l·∫•y role t·ª´ API:', roleError);
        // Kh√¥ng l√†m gi√°n ƒëo·∫°n lu·ªìng n·∫øu l·ªói API, ti·∫øp t·ª•c s·ª≠ d·ª•ng role t·ª´ token
      }
  
      // Ki·ªÉm tra xem token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng
      // L·∫•y th·ªùi gian h·∫øt h·∫°n t·ª´ payload token
      const tokenExpiration = user.tokenExpiration;
      const now = Date.now();
      const timeLeft = tokenExpiration - now;
      
      // N·∫øu token s·∫Øp h·∫øt h·∫°n (c√≤n d∆∞·ªõi 30 ph√∫t), l√†m m·ªõi token
      if (timeLeft < 30 * 60 * 1000) {
        try {
          // G·ªçi API l√†m m·ªõi token (d√πng URL ƒë·∫ßy ƒë·ªß)
          const refreshResponse = await fetch(`${baseUrl}${TOKEN_REFRESH_API}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
              token,
              rememberMe: true
            })
          });
          
          const refreshData = await refreshResponse.json();
          
          if (refreshResponse.ok) {
            // C·∫≠p nh·∫≠t cookie v·ªõi token m·ªõi
            if (refreshData.token) {
              // Thi·∫øt l·∫≠p cookie m·ªõi cho response
              const maxAge = 60 * 60 * 24 * 30; // 30 ng√†y
              response.cookies.set({
                name: cookieConfig.authCookieName,
                value: refreshData.token,
                path: '/',
                maxAge: maxAge,
                httpOnly: true,
                secure: cookieConfig.secure,
                sameSite: cookieConfig.sameSite,
              });
            }
          } else {
            console.error('Kh√¥ng th·ªÉ l√†m m·ªõi token:', refreshData.error);
          }
        } catch (refreshError) {
          console.error('L·ªói khi l√†m m·ªõi token:', refreshError);
        }
      }
      
      // N·∫øu token h·ª£p l·ªá, ƒë·∫∑t header
      response.headers.set('x-middleware-active', 'true');
      response.headers.set('x-auth-token', token);
      response.headers.set('x-user-id', user.uid);
      response.headers.set('x-user-role', userRole);
    } else {
      const verifyData = await verifyResponse.json();
      
      // N·∫øu token kh√¥ng h·ª£p l·ªá, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      if (!verifyData.valid) {
        const redirectUrl = new URL(routes.login, request.url);
        redirectUrl.searchParams.set('returnUrl', pathname);
        const redirectResponse = NextResponse.redirect(redirectUrl);
        
        // X√≥a cookie token kh√¥ng h·ª£p l·ªá
        redirectResponse.cookies.set({
          name: cookieConfig.authCookieName,
          value: '',
          expires: new Date(0),
          path: '/',
        });
        
        return addSecurityHeaders(redirectResponse);
      }
      
      user = verifyData.user;
      
      // L·∫•y role t·ª´ MongoDB th√¥ng qua API (d√πng URL ƒë·∫ßy ƒë·ªß)
      userRole = user.role || 'user';
      try {
        const roleResponse = await fetch(`${baseUrl}${USER_ROLE_API}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ uid: user.uid }),
        });
        
        if (roleResponse.ok) {
          const roleData = await roleResponse.json();
          if (roleData.success && roleData.role) {
            userRole = roleData.role;
          }
        } else {
          console.error('L·ªói khi g·ªçi API role:', await roleResponse.text());
        }
      } catch (roleError) {
        console.error('L·ªói khi l·∫•y role t·ª´ API:', roleError);
        // Kh√¥ng l√†m gi√°n ƒëo·∫°n lu·ªìng n·∫øu l·ªói API, ti·∫øp t·ª•c s·ª≠ d·ª•ng role t·ª´ token
      }
  
      // Ki·ªÉm tra xem token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng
      // L·∫•y th·ªùi gian h·∫øt h·∫°n t·ª´ payload token
      const tokenExpiration = user.tokenExpiration;
      const now = Date.now();
      const timeLeft = tokenExpiration - now;
      
      // N·∫øu token s·∫Øp h·∫øt h·∫°n (c√≤n d∆∞·ªõi 30 ph√∫t), l√†m m·ªõi token
      if (timeLeft < 30 * 60 * 1000) {
        try {
          // G·ªçi API l√†m m·ªõi token (d√πng URL ƒë·∫ßy ƒë·ªß)
          const refreshResponse = await fetch(`${baseUrl}${TOKEN_REFRESH_API}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
              token,
              rememberMe: true
            })
          });
          
          const refreshData = await refreshResponse.json();
          
          if (refreshResponse.ok) {
            // C·∫≠p nh·∫≠t cookie v·ªõi token m·ªõi
            if (refreshData.token) {
              // Thi·∫øt l·∫≠p cookie m·ªõi cho response
              const maxAge = 60 * 60 * 24 * 30; // 30 ng√†y
              response.cookies.set({
                name: cookieConfig.authCookieName,
                value: refreshData.token,
                path: '/',
                maxAge: maxAge,
                httpOnly: true,
                secure: cookieConfig.secure,
                sameSite: cookieConfig.sameSite,
              });
            }
          } else {
            console.error('Kh√¥ng th·ªÉ l√†m m·ªõi token:', refreshData.error);
          }
        } catch (refreshError) {
          console.error('L·ªói khi l√†m m·ªõi token:', refreshError);
        }
      }
      
      // N·∫øu token h·ª£p l·ªá, ƒë·∫∑t header
      response.headers.set('x-middleware-active', 'true');
      response.headers.set('x-auth-token', token);
      response.headers.set('x-user-id', user.uid);
      response.headers.set('x-user-role', userRole);
    }
    
    // ==== Ki·ªÉm tra quy·ªÅn truy c·∫≠p cho c√°c ƒë∆∞·ªùng d·∫´n c·ª• th·ªÉ ====
    
    // 1. Ki·ªÉm tra n·∫øu y√™u c·∫ßu l√† cho trang admin
    if (pathname.startsWith('/admin') && !pathname.startsWith('/admin/login')) {
      // ƒê·∫£m b·∫£o userRole ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
      if (userRole === undefined) {
        userRole = user?.role || 'user';
      }
      
      // Ki·ªÉm tra user c√≥ quy·ªÅn admin kh√¥ng
      if (userRole !== 'admin') {
        const redirectResponse = NextResponse.redirect(new URL('/', request.url));
        return addSecurityHeaders(redirectResponse);
      }
      
      // Th√™m cookie admin_access ƒë·ªÉ ƒë√°nh d·∫•u quy·ªÅn admin
      response.cookies.set('admin_access', 'true', {
        httpOnly: true,
        secure: cookieConfig.secure,
        sameSite: cookieConfig.sameSite,
        maxAge: 60 * 60 * 2, // 2 gi·ªù
        path: '/',
      });
      
      return addSecurityHeaders(response);
    }
    
    // 2. Ki·ªÉm tra n·∫øu y√™u c·∫ßu l√† cho trang c√¥ng t√°c vi√™n (CTV)
    if (pathname.startsWith('/ctv') && !pathname.startsWith('/ctv/login')) {
      // ƒê·∫£m b·∫£o userRole ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
      if (userRole === undefined) {
        userRole = user?.role || 'user';
      }
      
      // Ki·ªÉm tra user c√≥ quy·ªÅn ctv (c√¥ng t√°c vi√™n) hay kh√¥ng
      if (userRole !== 'ctv') {
        const redirectResponse = NextResponse.redirect(new URL('/', request.url));
        return addSecurityHeaders(redirectResponse);
      }
      
      // Th√™m cookie ctv_access ƒë·ªÉ ƒë√°nh d·∫•u quy·ªÅn c√¥ng t√°c vi√™n
      response.cookies.set('ctv_access', 'true', {
        httpOnly: true,
        secure: cookieConfig.secure,
        sameSite: cookieConfig.sameSite,
        maxAge: 60 * 60 * 2, // 2 gi·ªù
        path: '/',
      });
      
      return addSecurityHeaders(response);
    }
    
    // 3. Ki·ªÉm tra n·∫øu y√™u c·∫ßu l√† cho API admin
    if (pathname.startsWith('/api/admin') || pathname.startsWith('/api/courses/raw')) {
      // ƒê·∫£m b·∫£o userRole ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
      if (userRole === undefined) {
        userRole = user?.role || 'user';
      }
      
      // Ki·ªÉm tra c√°c API ƒë·∫∑c bi·ªát m√† CTV ƒë∆∞·ª£c ph√©p truy c·∫≠p
      if (pathname.startsWith('/api/admin/enrollments') || pathname.startsWith('/api/admin/courses')) {
        // Ki·ªÉm tra user c√≥ quy·ªÅn admin ho·∫∑c ctv kh√¥ng
        if (userRole === 'admin' || userRole === 'ctv') {
          // Thi·∫øt l·∫≠p cookie ph√π h·ª£p d·ª±a tr√™n vai tr√≤
          if (userRole === 'admin') {
            response.cookies.set('admin_access', 'true', {
              httpOnly: true,
              secure: cookieConfig.secure,
              sameSite: cookieConfig.sameSite,
              maxAge: 60 * 60 * 2, // 2 gi·ªù
              path: '/',
            });
          } else if (userRole === 'ctv') {
            // ƒê·∫∑t cookie ctv_access v√† th√™m email CTV v√†o cookie ƒë·ªÉ API c√≥ th·ªÉ s·ª≠ d·ª•ng
            response.cookies.set('ctv_access', 'true', {
              httpOnly: true,
              secure: cookieConfig.secure,
              sameSite: cookieConfig.sameSite,
              maxAge: 60 * 60 * 2, // 2 gi·ªù
              path: '/',
            });
            
            // Th√™m email c·ªßa CTV v√†o cookie ƒë·ªÉ API c√≥ th·ªÉ l·∫•y
            response.cookies.set('ctv_email', user.email, {
              httpOnly: true,
              secure: cookieConfig.secure,
              sameSite: cookieConfig.sameSite,
              maxAge: 60 * 60 * 2, // 2 gi·ªù
              path: '/',
            });
          }
          
          return addSecurityHeaders(response);
        } else {
          return NextResponse.json(
            { error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API n√†y' },
            { status: 403 }
          );
        }
      }
      
      // C√°c API admin kh√°c (kh√¥ng ph·∫£i /api/admin/enrollments ho·∫∑c /api/admin/courses)
      // ch·ªâ cho ph√©p admin truy c·∫≠p
      if (userRole !== 'admin') {
        return NextResponse.json(
          { error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API admin' },
          { status: 403 }
        );
      }
      
      // C·∫≠p nh·∫≠t cookie admin_access
      response.cookies.set('admin_access', 'true', {
        httpOnly: true,
        secure: cookieConfig.secure,
        sameSite: cookieConfig.sameSite,
        maxAge: 60 * 60 * 2, // 2 gi·ªù
        path: '/',
      });
      
      return addSecurityHeaders(response);
    }
    
    // 4. Ki·ªÉm tra n·∫øu y√™u c·∫ßu l√† cho API c√¥ng t√°c vi√™n (CTV)
    if (pathname.startsWith('/api/ctv')) {
      // ƒê·∫£m b·∫£o userRole ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
      if (userRole === undefined) {
        userRole = user?.role || 'user';
      }
      
      // Ki·ªÉm tra user c√≥ quy·ªÅn CTV kh√¥ng
      if (userRole !== 'ctv') {
        return NextResponse.json(
          { error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API c√¥ng t√°c vi√™n' },
          { status: 403 }
        );
      }
      
      // C·∫≠p nh·∫≠t cookie ctv_access
      response.cookies.set('ctv_access', 'true', {
        httpOnly: true,
        secure: cookieConfig.secure,
        sameSite: cookieConfig.sameSite,
        maxAge: 60 * 60 * 2, // 2 gi·ªù
        path: '/',
      });
      
      return addSecurityHeaders(response);
    }
    
    // Cho ph√©p truy c·∫≠p c√°c ƒë∆∞·ªùng d·∫´n kh√°c n·∫øu ƒë√£ x√°c th·ª±c th√†nh c√¥ng
    return addSecurityHeaders(response);
  } catch (error) {
    console.error('L·ªói khi x√°c th·ª±c token:', error);
    
    const redirectUrl = new URL(routes.login, request.url);
    redirectUrl.searchParams.set('returnUrl', pathname);
    const redirectResponse = NextResponse.redirect(redirectUrl);
    return addSecurityHeaders(redirectResponse);
  }
}

// C·∫•u h√¨nh middleware
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public (public files)
     */
    '/((?!_next/static|_next/image|favicon.ico|public).*)',
  ]
}; 