/**
 * Helper functions cho x√°c th·ª±c Firebase
 */
import firebaseAdmin from '@/lib/firebase-admin';

/**
 * X√°c th·ª±c ng∆∞·ªùi d√πng b·∫±ng email v√† m·∫≠t kh·∫©u
 * @param {string} email - Email ng∆∞·ªùi d√πng
 * @param {string} password - M·∫≠t kh·∫©u
 * @returns {Promise<Object>} - Th√¥ng tin ƒëƒÉng nh·∫≠p
 */
export async function verifyEmailPassword(email, password) {
  try {
    console.log('üîç ƒêang x√°c th·ª±c ng∆∞·ªùi d√πng v·ªõi email:', email);
    
    // L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const apiKey = process.env.FIREBASE_API_KEY || process.env.NEXT_PUBLIC_FIREBASE_API_KEY;
    
    console.log('üîë Firebase API Key c√≥ s·∫µn:', !!apiKey);
    
    if (!apiKey) {
      // N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p thay th·∫ø v·ªõi Firebase Admin
      console.warn('‚ö†Ô∏è FIREBASE_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p thay th·∫ø v·ªõi Firebase Admin');
      
      try {
        // T√¨m ng∆∞·ªùi d√πng theo email
        console.log('üë§ ƒêang t√¨m ng∆∞·ªùi d√πng theo email v·ªõi Firebase Admin...');
        const userRecord = await firebaseAdmin.auth().getUserByEmail(email);
        
        console.log('‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng:', userRecord.uid);
        
        // L∆∞u √Ω: Kh√¥ng th·ªÉ x√°c th·ª±c m·∫≠t kh·∫©u tr·ª±c ti·∫øp v·ªõi Firebase Admin SDK
        // ƒê√¢y l√† m·ªôt gi·∫£i ph√°p t·∫°m th·ªùi, kh√¥ng an to√†n cho m√¥i tr∆∞·ªùng production
        // Trong m√¥i tr∆∞·ªùng production th·ª±c t·∫ø, b·∫°n c·∫ßn s·ª≠ d·ª•ng Firebase API Key
        
        return {
          uid: userRecord.uid,
          email: userRecord.email,
          emailVerified: userRecord.emailVerified || false,
        };
      } catch (error) {
        console.error('‚ùå L·ªói khi t√¨m ng∆∞·ªùi d√πng v·ªõi Firebase Admin:', error);
        throw new Error('EMAIL_NOT_FOUND');
      }
    }
    
    // G·ªçi Firebase Auth REST API ƒë·ªÉ x√°c th·ª±c
    console.log('üîÑ ƒêang g·ªçi Firebase Auth REST API...');
    const response = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          password,
          returnSecureToken: true,
        }),
      }
    );
    
    const data = await response.json();
    
    if (!response.ok) {
      // X·ª≠ l√Ω l·ªói t·ª´ Firebase Auth
      console.error('‚ùå L·ªói t·ª´ Firebase Auth API:', data.error);
      const errorCode = data.error?.message || 'auth/unknown-error';
      throw new Error(errorCode);
    }
    
    console.log('‚úÖ X√°c th·ª±c th√†nh c√¥ng v·ªõi Firebase Auth API');
    
    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
    return {
      uid: data.localId,
      email: data.email,
      emailVerified: data.emailVerified || false,
      idToken: data.idToken,
      refreshToken: data.refreshToken,
    };
  } catch (error) {
    console.error('‚ùå L·ªói x√°c th·ª±c Firebase:', error);
    throw error;
  }
}

/**
 * T·∫°o ng∆∞·ªùi d√πng m·ªõi b·∫±ng email v√† m·∫≠t kh·∫©u
 * @param {string} email - Email ng∆∞·ªùi d√πng
 * @param {string} password - M·∫≠t kh·∫©u
 * @returns {Promise<Object>} - Th√¥ng tin ng∆∞·ªùi d√πng m·ªõi
 */
export async function createUserWithEmailPassword(email, password) {
  try {
    // L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const apiKey = process.env.FIREBASE_API_KEY;
    
    if (!apiKey) {
      // N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng Firebase Admin SDK
      console.warn('FIREBASE_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng Firebase Admin SDK');
      
      // T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi Firebase Admin
      const userRecord = await firebaseAdmin.auth().createUser({
        email: email,
        password: password,
        emailVerified: false,
      });
      
      return {
        uid: userRecord.uid,
        email: userRecord.email,
        emailVerified: userRecord.emailVerified || false,
      };
    }
    
    // G·ªçi Firebase Auth REST API ƒë·ªÉ t·∫°o ng∆∞·ªùi d√πng m·ªõi
    const response = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          password,
          returnSecureToken: true,
        }),
      }
    );
    
    const data = await response.json();
    
    if (!response.ok) {
      // X·ª≠ l√Ω l·ªói t·ª´ Firebase Auth
      const errorCode = data.error?.message || 'auth/unknown-error';
      throw new Error(errorCode);
    }
    
    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng m·ªõi
    return {
      uid: data.localId,
      email: data.email,
      emailVerified: false,
      idToken: data.idToken,
      refreshToken: data.refreshToken,
    };
  } catch (error) {
    console.error('L·ªói t·∫°o ng∆∞·ªùi d√πng Firebase:', error);
    throw error;
  }
}

/**
 * G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 * @param {string} email - Email ng∆∞·ªùi d√πng
 * @returns {Promise<void>}
 */
export async function sendPasswordResetEmail(email) {
  try {
    // L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const apiKey = process.env.FIREBASE_API_KEY;
    
    if (!apiKey) {
      // N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng Firebase Admin SDK
      console.warn('FIREBASE_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng Firebase Admin SDK');
      
      // T·∫°o link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v·ªõi Firebase Admin
      await firebaseAdmin.auth().generatePasswordResetLink(email);
      return;
    }
    
    // G·ªçi Firebase Auth REST API ƒë·ªÉ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    const response = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          requestType: 'PASSWORD_RESET',
          email,
        }),
      }
    );
    
    const data = await response.json();
    
    if (!response.ok) {
      // X·ª≠ l√Ω l·ªói t·ª´ Firebase Auth
      const errorCode = data.error?.message || 'auth/unknown-error';
      throw new Error(errorCode);
    }
  } catch (error) {
    console.error('L·ªói g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u Firebase:', error);
    throw error;
  }
} 