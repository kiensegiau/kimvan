import { cookies } from 'next/headers';
import firebaseAdmin from '@/lib/firebase-admin';

// Th√™m system cache cho token ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
// Cache theo c·∫∑p {token: {user, timestamp}}
const tokenCache = new Map();
const TOKEN_CACHE_MAX_AGE = 5 * 60 * 1000; // 5 ph√∫t

// H√†m ki·ªÉm tra v√† x√≥a c√°c token h·∫øt h·∫°n trong cache
function cleanupTokenCache() {
  const now = Date.now();
  for (const [token, data] of tokenCache.entries()) {
    if (now - data.timestamp > TOKEN_CACHE_MAX_AGE) {
      tokenCache.delete(token);
    }
  }
}

// X√≥a token h·∫øt h·∫°n m·ªói ph√∫t (ch·ªâ ch·∫°y tr√™n server)
setInterval(cleanupTokenCache, 60 * 1000);

// H√†m l·∫•y token t·ª´ cookies (server-side)
export async function getServerToken() {
  const cookieStore = await cookies();
  const token = cookieStore.get('auth-token')?.value;
  return token || null;
}

// H√†m x√°c th·ª±c token ƒë∆∞·ª£c t·ªëi ∆∞u v·ªõi cache
export async function verifyServerAuthToken(token) {
  if (!token) return null;
  
  try {
    console.log('üîç verifyServerAuthToken: B·∫Øt ƒë·∫ßu x√°c th·ª±c token');
    
    // Ki·ªÉm tra cache tr∆∞·ªõc
    if (tokenCache.has(token)) {
      const cachedData = tokenCache.get(token);
      const now = Date.now();
      
      // N·∫øu token trong cache v·∫´n c√≤n h·∫°n, s·ª≠ d·ª•ng l·∫°i
      if (now - cachedData.timestamp < TOKEN_CACHE_MAX_AGE) {
        console.log('‚úÖ verifyServerAuthToken: S·ª≠ d·ª•ng token t·ª´ cache');
        return cachedData.user;
      } else {
        // X√≥a token h·∫øt h·∫°n
        console.log('‚è±Ô∏è verifyServerAuthToken: Token trong cache ƒë√£ h·∫øt h·∫°n, x√≥a kh·ªèi cache');
        tokenCache.delete(token);
      }
    }
    
    console.log('üîÑ verifyServerAuthToken: ƒêang x√°c th·ª±c token v·ªõi Firebase Admin...');
    // X√°c th·ª±c token v·ªõi Firebase Admin
    const decodedToken = await firebaseAdmin.auth().verifyIdToken(token);
    const uid = decodedToken.uid;
    
    console.log(`‚úÖ verifyServerAuthToken: Token h·ª£p l·ªá cho ng∆∞·ªùi d√πng ${uid}`);
    
    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ uid
    console.log('üë§ verifyServerAuthToken: ƒêang l·∫•y th√¥ng tin ng∆∞·ªùi d√πng...');
    const userRecord = await firebaseAdmin.auth().getUser(uid);
    
    const user = {
      uid: userRecord.uid,
      email: userRecord.email,
      emailVerified: userRecord.emailVerified,
      displayName: userRecord.displayName,
      photoURL: userRecord.photoURL,
      role: userRecord.customClaims?.role || 'user',
      // Th√™m th√¥ng tin v·ªÅ th·ªùi gian h·∫øt h·∫°n c·ªßa token
      tokenExpiration: decodedToken.exp * 1000, // Chuy·ªÉn t·ª´ gi√¢y sang mili gi√¢y
    };
    
    console.log(`‚úÖ verifyServerAuthToken: X√°c th·ª±c th√†nh c√¥ng, token h·∫øt h·∫°n v√†o: ${new Date(user.tokenExpiration).toLocaleString()}`);
    
    // L∆∞u k·∫øt qu·∫£ x√°c th·ª±c v√†o cache
    tokenCache.set(token, {
      user,
      timestamp: Date.now()
    });
    console.log('üíæ verifyServerAuthToken: ƒê√£ l∆∞u k·∫øt qu·∫£ x√°c th·ª±c v√†o cache');
    
    return user;
  } catch (error) {
    console.error('‚ùå verifyServerAuthToken: L·ªói x√°c th·ª±c token:', error.message);
    return null;
  }
}

// H√†m ki·ªÉm tra token s·∫Øp h·∫øt h·∫°n
export async function isTokenExpiringSoon(token, thresholdMinutes = 30) {
  if (!token) return true;
  
  try {
    const user = await verifyServerAuthToken(token);
    if (!user || !user.tokenExpiration) return true;
    
    const now = Date.now();
    const thresholdMs = thresholdMinutes * 60 * 1000;
    
    // Token s·∫Øp h·∫øt h·∫°n n·∫øu th·ªùi gian c√≤n l·∫°i nh·ªè h∆°n ng∆∞·ª°ng
    return (user.tokenExpiration - now) < thresholdMs;
  } catch (error) {
    console.error('L·ªói ki·ªÉm tra th·ªùi h·∫°n token:', error);
    return true;
  }
}

// Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a (server-side)
export async function isServerAuthenticated() {
  const token = await getServerToken();
  if (!token) return false;
  
  const user = await verifyServerAuthToken(token);
  return !!user;
}

// Ki·ªÉm tra vai tr√≤ c·ªßa ng∆∞·ªùi d√πng (server-side)
export async function hasServerRole(requiredRole = 'user') {
  const token = await getServerToken();
  if (!token) return false;
  
  const user = await verifyServerAuthToken(token);
  if (!user) return false;
  
  // N·∫øu role l√† admin, cho ph√©p truy c·∫≠p m·ªçi n∆°i
  if (user.role === 'admin') return true;
  
  // N·∫øu role l√† staff, cho ph√©p truy c·∫≠p quy·ªÅn staff v√† user
  if (user.role === 'staff' && requiredRole === 'user') return true;
  
  // Tr∆∞·ªùng h·ª£p kh√°c, so s√°nh tr·ª±c ti·∫øp
  return user.role === requiredRole;
} 