/**
 * Script ƒë·ªÉ thay th·∫ø l·ªánh g·ªçi connectDB() b·∫±ng dbMiddleware(request) trong c√°c API routes
 * Ch·∫°y script n√†y b·∫±ng l·ªánh: node src/scripts/add-db-middleware.js
 */

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const readDirAsync = promisify(fs.readdir);
const statAsync = promisify(fs.stat);

// ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c API
const API_DIR = path.join(__dirname, '..', 'app', 'api');

// Regex ƒë·ªÉ t√¨m c√°c l·ªánh g·ªçi connectDB()
const CONNECT_DB_REGEX = /await\s+connectDB\(\);/g;

// Regex ƒë·ªÉ t√¨m import connectDB
const IMPORT_CONNECT_DB_REGEX = /import\s+{\s*connectDB\s*}\s*from\s+['"]@\/lib\/mongodb['"];?/g;

// Danh s√°ch c√°c file ƒë√£ ƒë∆∞·ª£c s·ª≠a
const modifiedFiles = [];
// Danh s√°ch c√°c file c√≥ l·ªói
const errorFiles = [];

/**
 * Ki·ªÉm tra v√† s·ª≠a file
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫ßn ki·ªÉm tra
 */
async function processFile(filePath) {
  try {
    // ƒê·ªçc n·ªôi dung file
    const content = await readFileAsync(filePath, 'utf8');
    
    // Ki·ªÉm tra xem file c√≥ import connectDB kh√¥ng
    const hasConnectDBImport = IMPORT_CONNECT_DB_REGEX.test(content);
    
    // ƒê·∫∑t l·∫°i regex ƒë·ªÉ tr√°nh l·ªói lastIndex
    CONNECT_DB_REGEX.lastIndex = 0;
    
    // Ki·ªÉm tra xem file c√≥ g·ªçi connectDB() kh√¥ng
    const hasConnectDBCall = CONNECT_DB_REGEX.test(content);
    
    // N·∫øu file c√≥ c·∫£ import v√† g·ªçi connectDB()
    if (hasConnectDBImport && hasConnectDBCall) {
      console.log(`ƒêang x·ª≠ l√Ω file: ${filePath}`);
      
      // Thay th·∫ø import connectDB b·∫±ng import dbMiddleware
      let newContent = content.replace(
        IMPORT_CONNECT_DB_REGEX,
        `import { dbMiddleware } from '@/utils/db-middleware';`
      );
      
      // Thay th·∫ø c√°c l·ªánh g·ªçi connectDB() b·∫±ng dbMiddleware(request)
      newContent = newContent.replace(
        CONNECT_DB_REGEX,
        `await dbMiddleware(request);`
      );
      
      // Ghi n·ªôi dung m·ªõi v√†o file
      await writeFileAsync(filePath, newContent, 'utf8');
      
      // Th√™m v√†o danh s√°ch file ƒë√£ s·ª≠a
      modifiedFiles.push(filePath);
      
      console.log(`‚úÖ ƒê√£ s·ª≠a file: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file ${filePath}:`, error);
    errorFiles.push({ path: filePath, error: error.message });
  }
}

/**
 * Duy·ªát qua th∆∞ m·ª•c v√† x·ª≠ l√Ω c√°c file
 * @param {string} dirPath - ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c c·∫ßn duy·ªát
 */
async function processDirectory(dirPath) {
  try {
    const entries = await readDirAsync(dirPath);
    
    for (const entry of entries) {
      const entryPath = path.join(dirPath, entry);
      const stats = await statAsync(entryPath);
      
      if (stats.isDirectory()) {
        // ƒê·ªá quy v√†o th∆∞ m·ª•c con
        await processDirectory(entryPath);
      } else if (stats.isFile() && (entry.endsWith('.js') || entry.endsWith('.jsx'))) {
        // X·ª≠ l√Ω file JavaScript
        await processFile(entryPath);
      }
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi duy·ªát th∆∞ m·ª•c ${dirPath}:`, error);
  }
}

// H√†m ch√≠nh
async function main() {
  console.log('üîç B·∫Øt ƒë·∫ßu thay th·∫ø l·ªánh g·ªçi connectDB() b·∫±ng dbMiddleware(request)...');
  
  // X·ª≠ l√Ω th∆∞ m·ª•c API
  await processDirectory(API_DIR);
  
  // In k·∫øt qu·∫£
  console.log('\n===== K·∫æT QU·∫¢ =====');
  console.log(`ƒê√£ s·ª≠a ${modifiedFiles.length} file:`);
  modifiedFiles.forEach((file, index) => {
    console.log(`${index + 1}. ${file}`);
  });
  
  if (errorFiles.length > 0) {
    console.log(`\nC√≥ ${errorFiles.length} file l·ªói:`);
    errorFiles.forEach((file, index) => {
      console.log(`${index + 1}. ${file.path}: ${file.error}`);
    });
  }
  
  console.log('\n‚úÖ Ho√†n t·∫•t!');
}

// Ch·∫°y h√†m ch√≠nh
main().catch(error => {
  console.error('‚ùå L·ªói:', error);
  process.exit(1);
}); 